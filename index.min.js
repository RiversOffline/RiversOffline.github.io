'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

//Copyright (c) 2014-2016 GitHub, Inc.
//MIT License

var support = {
  searchParams: 'URLSearchParams' in self,
  iterable: 'Symbol' in self && 'iterator' in Symbol,
  blob: 'FileReader' in self && 'Blob' in self && function () {
    try {
      new Blob();
      return true;
    } catch (e) {
      return false;
    }
  }(),
  formData: 'FormData' in self,
  arrayBuffer: 'ArrayBuffer' in self
};

function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj);
}

if (support.arrayBuffer) {
  var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

  var isArrayBufferView = ArrayBuffer.isView || function (obj) {
    return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
  };
}

function normalizeName(name) {
  if (typeof name !== 'string') {
    name = String(name);
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
    throw new TypeError('Invalid character in header field name');
  }
  return name.toLowerCase();
}

function normalizeValue(value) {
  if (typeof value !== 'string') {
    value = String(value);
  }
  return value;
}

// Build a destructive iterator for the value list
function iteratorFor(items) {
  var iterator = {
    next: function next() {
      var value = items.shift();
      return { done: value === undefined, value: value };
    }
  };

  if (support.iterable) {
    iterator[Symbol.iterator] = function () {
      return iterator;
    };
  }

  return iterator;
}

function Headers(headers) {
  this.map = {};

  if (headers instanceof Headers) {
    headers.forEach(function (value, name) {
      this.append(name, value);
    }, this);
  } else if (Array.isArray(headers)) {
    headers.forEach(function (header) {
      this.append(header[0], header[1]);
    }, this);
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function (name) {
      this.append(name, headers[name]);
    }, this);
  }
}

Headers.prototype.append = function (name, value) {
  name = normalizeName(name);
  value = normalizeValue(value);
  var oldValue = this.map[name];
  this.map[name] = oldValue ? oldValue + ', ' + value : value;
};

Headers.prototype['delete'] = function (name) {
  delete this.map[normalizeName(name)];
};

Headers.prototype.get = function (name) {
  name = normalizeName(name);
  return this.has(name) ? this.map[name] : null;
};

Headers.prototype.has = function (name) {
  return this.map.hasOwnProperty(normalizeName(name));
};

Headers.prototype.set = function (name, value) {
  this.map[normalizeName(name)] = normalizeValue(value);
};

Headers.prototype.forEach = function (callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this);
    }
  }
};

Headers.prototype.keys = function () {
  var items = [];
  this.forEach(function (value, name) {
    items.push(name);
  });
  return iteratorFor(items);
};

Headers.prototype.values = function () {
  var items = [];
  this.forEach(function (value) {
    items.push(value);
  });
  return iteratorFor(items);
};

Headers.prototype.entries = function () {
  var items = [];
  this.forEach(function (value, name) {
    items.push([name, value]);
  });
  return iteratorFor(items);
};

if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
}

function consumed(body) {
  if (body.bodyUsed) {
    return Promise.reject(new TypeError('Already read'));
  }
  body.bodyUsed = true;
}

function fileReaderReady(reader) {
  return new Promise(function (resolve, reject) {
    reader.onload = function () {
      resolve(reader.result);
    };
    reader.onerror = function () {
      reject(reader.error);
    };
  });
}

function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  reader.readAsArrayBuffer(blob);
  return promise;
}

function readBlobAsText(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  reader.readAsText(blob);
  return promise;
}

function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf);
  var chars = new Array(view.length);

  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i]);
  }
  return chars.join('');
}

function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0);
  } else {
    var view = new Uint8Array(buf.byteLength);
    view.set(new Uint8Array(buf));
    return view.buffer;
  }
}

function Body() {
  this.bodyUsed = false;

  this._initBody = function (body) {
    this._bodyInit = body;
    if (!body) {
      this._bodyText = '';
    } else if (typeof body === 'string') {
      this._bodyText = body;
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body;
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body;
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString();
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer);
      // IE 10-11 can't handle a DataView body.
      this._bodyInit = new Blob([this._bodyArrayBuffer]);
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body);
    } else {
      this._bodyText = body = Object.prototype.toString.call(body);
    }

    if (!this.headers.get('content-type')) {
      if (typeof body === 'string') {
        this.headers.set('content-type', 'text/plain;charset=UTF-8');
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set('content-type', this._bodyBlob.type);
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
      }
    }
  };

  if (support.blob) {
    this.blob = function () {
      var rejected = consumed(this);
      if (rejected) {
        return rejected;
      }

      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]));
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as blob');
      } else {
        return Promise.resolve(new Blob([this._bodyText]));
      }
    };

    this.arrayBuffer = function () {
      if (this._bodyArrayBuffer) {
        return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
      } else {
        return this.blob().then(readBlobAsArrayBuffer);
      }
    };
  }

  this.text = function () {
    var rejected = consumed(this);
    if (rejected) {
      return rejected;
    }

    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob);
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
    } else if (this._bodyFormData) {
      throw new Error('could not read FormData body as text');
    } else {
      return Promise.resolve(this._bodyText);
    }
  };

  if (support.formData) {
    this.formData = function () {
      return this.text().then(decode);
    };
  }

  this.json = function () {
    return this.text().then(JSON.parse);
  };

  return this;
}

// HTTP methods whose capitalization should be normalized
var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

function normalizeMethod(method) {
  var upcased = method.toUpperCase();
  return methods.indexOf(upcased) > -1 ? upcased : method;
}

function Request(input, options) {
  options = options || {};
  var body = options.body;

  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError('Already read');
    }
    this.url = input.url;
    this.credentials = input.credentials;
    if (!options.headers) {
      this.headers = new Headers(input.headers);
    }
    this.method = input.method;
    this.mode = input.mode;
    this.signal = input.signal;
    if (!body && input._bodyInit != null) {
      body = input._bodyInit;
      input.bodyUsed = true;
    }
  } else {
    this.url = String(input);
  }

  this.credentials = options.credentials || this.credentials || 'same-origin';
  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers);
  }
  this.method = normalizeMethod(options.method || this.method || 'GET');
  this.mode = options.mode || this.mode || null;
  this.signal = options.signal || this.signal;
  this.referrer = null;

  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
    throw new TypeError('Body not allowed for GET or HEAD requests');
  }
  this._initBody(body);
}

Request.prototype.clone = function () {
  return new Request(this, { body: this._bodyInit });
};

function decode(body) {
  var form = new FormData();
  body.trim().split('&').forEach(function (bytes) {
    if (bytes) {
      var split = bytes.split('=');
      var name = split.shift().replace(/\+/g, ' ');
      var value = split.join('=').replace(/\+/g, ' ');
      form.append(decodeURIComponent(name), decodeURIComponent(value));
    }
  });
  return form;
}

function parseHeaders(rawHeaders) {
  var headers = new Headers();
  // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  // https://tools.ietf.org/html/rfc7230#section-3.2
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
  preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
    var parts = line.split(':');
    var key = parts.shift().trim();
    if (key) {
      var value = parts.join(':').trim();
      headers.append(key, value);
    }
  });
  return headers;
}

Body.call(Request.prototype);

function Response(bodyInit, options) {
  if (!options) {
    options = {};
  }

  this.type = 'default';
  this.status = options.status === undefined ? 200 : options.status;
  this.ok = this.status >= 200 && this.status < 300;
  this.statusText = 'statusText' in options ? options.statusText : 'OK';
  this.headers = new Headers(options.headers);
  this.url = options.url || '';
  this._initBody(bodyInit);
}

Body.call(Response.prototype);

Response.prototype.clone = function () {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  });
};

Response.error = function () {
  var response = new Response(null, { status: 0, statusText: '' });
  response.type = 'error';
  return response;
};

var redirectStatuses = [301, 302, 303, 307, 308];

Response.redirect = function (url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError('Invalid status code');
  }

  return new Response(null, { status: status, headers: { location: url } });
};

try {
  new DOMException();
} catch (err) {
  DOMException = function DOMException(message, name) {
    this.message = message;
    this.name = name;
    var error = Error(message);
    this.stack = error.stack;
  };
  DOMException.prototype = Object.create(Error.prototype);
  DOMException.prototype.constructor = DOMException;
}

function fetch(input, init) {
  return new Promise(function (resolve, reject) {
    var request = new Request(input, init);

    if (request.signal && request.signal.aborted) {
      return reject(new DOMException('Aborted', 'AbortError'));
    }

    var xhr = new XMLHttpRequest();

    function abortXhr() {
      xhr.abort();
    }

    xhr.onload = function () {
      var options = {
        status: xhr.status,
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
      };
      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
      var body = 'response' in xhr ? xhr.response : xhr.responseText;
      resolve(new Response(body, options));
    };

    xhr.onerror = function () {
      reject(new TypeError('Network request failed'));
    };

    xhr.ontimeout = function () {
      reject(new TypeError('Network request failed'));
    };

    xhr.onabort = function () {
      reject(new DOMException('Aborted', 'AbortError'));
    };

    xhr.open(request.method, request.url, true);

    if (request.credentials === 'include') {
      xhr.withCredentials = true;
    } else if (request.credentials === 'omit') {
      xhr.withCredentials = false;
    }

    if ('responseType' in xhr && support.blob) {
      xhr.responseType = 'blob';
    }

    request.headers.forEach(function (value, name) {
      xhr.setRequestHeader(name, value);
    });

    if (request.signal) {
      request.signal.addEventListener('abort', abortXhr);

      xhr.onreadystatechange = function () {
        // DONE (success or failure)
        if (xhr.readyState === 4) {
          request.signal.removeEventListener('abort', abortXhr);
        }
      };
    }

    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
  });
}

fetch.polyfill = true;

if (!self.fetch) {
  self.fetch = fetch;
  self.Headers = Headers;
  self.Request = Request;
  self.Response = Response;
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var regeneratorRuntime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction ||
    // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function (arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === "object" && hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
      // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
      // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function stop() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;
}(
// If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
(typeof module === 'undefined' ? 'undefined' : _typeof(module)) === "object" ? module.exports : {});

'use strict';

if (navigator.onLine && caches) {
  var dc = caches.delete('Temporary');
  dc.then(LoadSW());
  dc.catch(function (event) {
    console.warn(event);
    LoadSW();
  });
} else {
  LoadSW();
}

function LoadSW() {
  if ('serviceWorker' in navigator) {
    var sw = navigator.serviceWorker.register('https://rivers.run/serviceworker.js');
    sw.then(function () {
      console.log("ServiceWorker Registered!");
      var ld = navigator.serviceWorker.ready;
      ld.then(function () {
        console.log("ServiceWorker Ready!");
        MainCode();
      });
      ld.catch(MainCode());
    });
    sw.catch(function (error) {
      console.warn(error);
      MainCode();
    });
  } else {
    console.log("No ServiceWorker Support");
    MainCode();
  }
}

function MainCode() {
  var LoadStringData = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(URL) {
      var Response;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return fetch(URL);

            case 2:
              Response = _context.sent;
              _context.next = 5;
              return Response.text();

            case 5:
              Response = _context.sent;
              return _context.abrupt('return', Response);

            case 7:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function LoadStringData(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  var FetchData = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(SiteNumber) {
      var FetchedFromUSGS, GaugeName, Data, Timezone;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return LoadStringData(CreateURL(SiteNumber));

            case 2:
              FetchedFromUSGS = _context2.sent;
              GaugeName = FetchedFromUSGS.split("\n")[16].slice(1).trim();
              Data = TrimExtraData2(TrimExtraData1(Expand(TrimTopStuff(FetchedFromUSGS))));
              Timezone = CheckTimeZone(Data);
              return _context2.abrupt('return', Objectify(RemoveTimeZone(Data), GaugeName, Timezone));

            case 7:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function FetchData(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  //AddLine(canvas, horizontal, vertical, color, graphtype, numplace)

  //canvas - HTML canvas element
  //horizontal - array of horizontal values. Pass 0 and it will evenly space.
  //vertical - array of vertical values

  //color - Optional. Color of line. Default black
  //graphtype - Optional. Specify 2 to put 2 lines and 2 scales on one graph. See numplace below
  //numplace - Use only if you are using graphtype = 2. 
  //If you specify 0 or do not pass a value, the line's scale will be on the left side of the graph.
  //If you specify 1, the line's scale will be on the right side of the graph.

  var LoadAndRender = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(number, TextReport, watercanvas, tempcanvas, precipcanvas, color1, color2, color3) {
      var Result, Check, i, Check2, d, ctx;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return FetchData(number);

            case 2:
              Result = _context3.sent;

              TextReport.innerHTML = "---";

              Check = 1;
              _context3.prev = 5;
              i = 0;

            case 7:
              if (!(i < Result.cfs.length)) {
                _context3.next = 14;
                break;
              }

              if (!(Result.cfs[i] !== undefined)) {
                _context3.next = 11;
                break;
              }

              Check = 0;
              return _context3.abrupt('break', 14);

            case 11:
              i++;
              _context3.next = 7;
              break;

            case 14:
              _context3.next = 18;
              break;

            case 16:
              _context3.prev = 16;
              _context3.t0 = _context3['catch'](5);

            case 18:
              Check2 = 1;
              _context3.prev = 19;
              i = 0;

            case 21:
              if (!(i < Result.height.length)) {
                _context3.next = 28;
                break;
              }

              if (!(Result.height[i] !== undefined)) {
                _context3.next = 25;
                break;
              }

              Check2 = 0;
              return _context3.abrupt('break', 28);

            case 25:
              i++;
              _context3.next = 21;
              break;

            case 28:
              _context3.next = 32;
              break;

            case 30:
              _context3.prev = 30;
              _context3.t1 = _context3['catch'](19);

            case 32:
              if (!(Check === 0)) {
                _context3.next = 58;
                break;
              }

              d = Result.cfs.length - 1;

            case 34:
              if (!(d >= 0)) {
                _context3.next = 41;
                break;
              }

              if (!(!isNaN(Number(Result.cfs[d])) && Number(Result.cfs[d]) !== 0 && Result.cfs[d] !== undefined)) {
                _context3.next = 38;
                break;
              }

              TextReport.innerHTML = Result.cfs[d] + " cfs";
              return _context3.abrupt('break', 41);

            case 38:
              d--;
              _context3.next = 34;
              break;

            case 41:
              if (!(Check2 === 0)) {
                _context3.next = 55;
                break;
              }

              TextReport.innerHTML += ", ";
              d = Result.height.length - 1;

            case 44:
              if (!(d >= 0)) {
                _context3.next = 51;
                break;
              }

              if (!(!isNaN(Number(Result.height[d])) && Number(Result.height[d]) !== 0 && Result.height[d] !== undefined)) {
                _context3.next = 48;
                break;
              }

              TextReport.innerHTML += Result.height[d] + " feet";
              return _context3.abrupt('break', 51);

            case 48:
              d--;
              _context3.next = 44;
              break;

            case 51:

              AddLine("", Result.Timezone, Result.timeframe, Result.Source, watercanvas, 0, Result.cfs, color1, 2);
              AddLine("", Result.Timezone, Result.timeframe, Result.Source, watercanvas, 0, Result.height, color2, 2, 1);
              _context3.next = 56;
              break;

            case 55:
              AddLine("cfs", Result.Timezone, Result.timeframe, Result.Source, watercanvas, 0, Result.cfs, color1);

            case 56:
              _context3.next = 74;
              break;

            case 58:
              if (!(Check2 === 0)) {
                _context3.next = 70;
                break;
              }

              AddLine("height", Result.Timezone, Result.timeframe, Result.Source, watercanvas, 0, Result.height, color2);

              d = Result.height.length - 1;

            case 61:
              if (!(d >= 0)) {
                _context3.next = 68;
                break;
              }

              if (!(!isNaN(Number(Result.height[d])) && Number(Result.height[d]) !== 0 && Result.height[d] !== undefined)) {
                _context3.next = 65;
                break;
              }

              TextReport.innerHTML = Result.height[d] + " feet";
              return _context3.abrupt('break', 68);

            case 65:
              d--;
              _context3.next = 61;
              break;

            case 68:
              _context3.next = 74;
              break;

            case 70:
              ctx = watercanvas.getContext('2d');

              ctx.textAlign = "center";
              ctx.font = tempcanvas.width / 35 + "px Arial";
              ctx.fillText("No Flow Data Currently Avalible for this Site (" + number + ")", watercanvas.width / 2, watercanvas.height / 2);

            case 74:
              Check = 1;
              _context3.prev = 75;
              i = 0;

            case 77:
              if (!(i < Result.temp.length)) {
                _context3.next = 84;
                break;
              }

              if (!(Result.temp[i] !== undefined)) {
                _context3.next = 81;
                break;
              }

              Check = 0;
              return _context3.abrupt('break', 84);

            case 81:
              i++;
              _context3.next = 77;
              break;

            case 84:
              _context3.next = 88;
              break;

            case 86:
              _context3.prev = 86;
              _context3.t2 = _context3['catch'](75);

            case 88:
              if (Check === 0) {
                //Convert to fahrenheit
                Result.temp = Result.temp.map(function (value) {
                  return value * 1.8 + 32;
                });
                AddLine("", Result.Timezone, Result.timeframe, Result.Source, tempcanvas, 0, Result.temp, "#FF0000", 3, "#0000FF");
              } else {
                ctx = tempcanvas.getContext('2d');

                ctx.textAlign = "center";
                ctx.font = tempcanvas.width / 35 + "px Arial";
                ctx.fillText("No Water Temperature Data Currently Avalible for this Site (" + number + ")", tempcanvas.width / 2, tempcanvas.height / 2);
              }

              Check = 1;
              _context3.prev = 90;
              i = 0;

            case 92:
              if (!(i < Result.precip.length)) {
                _context3.next = 99;
                break;
              }

              if (!(Result.precip[i] !== undefined)) {
                _context3.next = 96;
                break;
              }

              Check = 0;
              return _context3.abrupt('break', 99);

            case 96:
              i++;
              _context3.next = 92;
              break;

            case 99:
              _context3.next = 103;
              break;

            case 101:
              _context3.prev = 101;
              _context3.t3 = _context3['catch'](90);

            case 103:
              if (Check === 0) {
                AddLine("Precipitation", Result.Timezone, Result.timeframe, Result.Source, precipcanvas, 0, Result.precip, color3);
              } else {
                ctx = precipcanvas.getContext('2d');

                ctx.font = precipcanvas.width / 35 + "px Arial";
                ctx.textAlign = "center";
                ctx.fillText("No Precipitation Data Currently Avalible for this Site (" + number + ")", precipcanvas.width / 2, precipcanvas.height / 2);
              }

            case 104:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this, [[5, 16], [19, 30], [75, 86], [90, 101]]);
    }));

    return function LoadAndRender(_x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10) {
      return _ref3.apply(this, arguments);
    };
  }();

  var PrepSort = function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var wait, value;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              wait = function wait(ms) {
                return new Promise(function (r, j) {
                  return setTimeout(r, ms);
                });
              };

              _context4.next = 3;
              return wait(20);

            case 3:
              value = GetId("SearchBox").value.trim();

              if (!(value === SearchStore)) {
                SortListGen();
              }

            case 5:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    return function PrepSort() {
      return _ref4.apply(this, arguments);
    };
  }();

  function GetId(Id) {
    return document.getElementById(Id);
  }
  function ReloadAllCache() {
    localStorage.setItem("TimeStamp", Date.now());

    caches.delete('rivers.run').then(function (event) {
      window.location.reload(true);
    }).catch(function (event) {
      window.location.reload(true);
    });
  }
  function UpdateTime() {
    try {
      if (localStorage.getItem("TimeStamp") !== null && Date.now() - localStorage.getItem("TimeStamp") > 600000) {
        var Minutes = Math.floor(Math.floor((Date.now() - localStorage.getItem("TimeStamp")) / 1000) / 60);
        var Hours = Math.floor(Minutes / 60);
        Minutes = Minutes % 60;
        var Days = Math.floor(Hours / 24);
        Hours = Hours % 24;
        var TimeStr = "";
        if (Days !== 0) {
          if (Days === 1) {
            TimeStr = TimeStr + Days + " day ";
          } else {
            TimeStr = TimeStr + Days + " days ";
          }
        }
        if (Hours !== 0) {
          if (Hours === 1) {
            TimeStr = TimeStr + Hours + " hour ";
          } else {
            TimeStr = TimeStr + Hours + " hours ";
          }
        }
        if (Minutes !== 0) {
          if (Minutes === 1) {
            TimeStr = TimeStr + Minutes + " minute ";
          } else {
            TimeStr = TimeStr + Minutes + " minutes ";
          }
        }
        GetId("ReloadAllText").innerHTML = "You're viewing a cached version of this site from " + TimeStr + " ago.";
      }
    } catch (e) {
      console.warn(e);
    }
  }
  try {
    if (localStorage.getItem("TimeStamp") !== null && Date.now() - localStorage.getItem("TimeStamp") > 600000) {
      UpdateTime();
      setInterval(UpdateTime, 60000);
      GetId("ReloadAll").hidden = "";
      if (navigator.onLine) {
        GetId("ReloadAllButton").style = "display: inline";
      }
      window.addEventListener("offline", function () {
        GetId("ReloadAllButton").style = "display: none";
      });
      window.addEventListener("offline", function () {
        GetId("ReloadAllButton").style = "display: inline";
      });
      GetId("ReloadAllButton").addEventListener("click", ReloadAllCache);
      GetId("ReloadAllButton").value = "Update Now";
      UpdateTime();
    } else {
      if (localStorage.getItem("TimeStamp") === null) {
        localStorage.setItem("TimeStamp", Date.now());
      }
    }
  } catch (e) {
    console.warn(e);
  }

  window.addEventListener("resize", function () {
    setTimeout(RotateHandler, 100);
  });

  function RotateHandler() {
    //Embedded Frames - Reduce height slightly so it doesn't look fullscreen
    document.documentElement.style.setProperty('--screenheight', Math.floor(window.innerHeight / 1.15) + "px");

    //values arbitrary and picked by me
    var ScreenWidth = 750 / window.innerWidth;
    if (ScreenWidth < 1) {
      ScreenWidth = Math.pow(ScreenWidth, 0.7);
    } else {
      ScreenWidth = 1.2;
    }
    ScreenWidth = 2.4 * ScreenWidth + "vw";
    document.documentElement.style.setProperty('--textsize', ScreenWidth);
  }

  //Graph Code
  function CreateURL(SiteNumber) {
    if (typeof SiteNumber === "number") {
      console.warn("A number (" + SiteNumber + ") was passed where a string is needed. If the number contained leading zeros that CreateURL is unable to replace, you may get an error.");
    }
    SiteNumber = String(SiteNumber);
    if (SiteNumber.length < 8) {
      var OldNum = SiteNumber;
      SiteNumber = "0".repeat(8 - SiteNumber.length) + SiteNumber;
      console.warn("Changed " + OldNum + " to " + SiteNumber + ". It is reccomended to pass strings instead of integers so that modification is not required.");
    }
    var DaysBack = 1; //Days of history to load.
    var time = new Date(Date.now());
    var Str1 = time.getFullYear() + "-" + (time.getMonth() + 1) + "-" + time.getDate();
    time = new Date(Date.now() - 86400000 * DaysBack);
    var Str2 = time.getFullYear() + "-" + (time.getMonth() + 1) + "-" + time.getDate();
    return "https://waterdata.usgs.gov/nwis/uv?cb_00045=on&cb_00010=on&cb_00045=on&cb_00060=on&cb_00065=on&format=rdb&site_no=" + SiteNumber + "&period=&begin_date=" + Str2 + "&end_date=" + Str1;
  }

  function TrimTopStuff(StringData) {
    StringData = StringData.split("\n");
    while (StringData[0][0] === "#") {
      StringData.shift();
    }
    return StringData;
  }

  function Expand(DataArray) {
    return DataArray.map(function (value) {
      return value.split("	");
    });
  }

  function TrimExtraData1(Array) {
    return Array.map(function (value) {
      value.splice(0, 2);
      return value;
    });
  }

  function TrimExtraData2(Array) {
    return Array.map(function (value) {
      for (var count = 3; count < value.length; count = count + 1) {
        value.splice(count, 1);
      }
      return value;
    });
  }

  function CheckTimeZone(Check) {
    var Checker = Check[2][1];
    Check = Check.splice(2, Array.length - 3);
    Check.map(function (value) {
      if (value[1] !== Checker) {
        throw "Time zones " + Checker + " and " + value[1] + " do not match!";
      }
    });
    return Checker;
  }

  function RemoveTimeZone(Array) {
    return Array.map(function (value) {
      value.splice(1, 1);
      return value;
    });
  }

  function Objectify(Array, GaugeName, Timezone) {
    var data = {};
    data.Source = GaugeName;
    data.Timezone = Timezone;

    data.timeframe = Array.map(function (value) {
      return value[0];
    });
    data.timeframe.splice(0, 2);
    data.timeframe.pop();

    Array.pop();
    var cfsnum;
    for (var i = 0; i < Array[0].length; i++) {
      if (Array[0][i].indexOf("00060") !== -1) {
        cfsnum = i;
        break;
      }
    }

    var heightnum;
    for (var i = 0; i < Array[0].length; i++) {
      if (Array[0][i].indexOf("00065") !== -1) {
        heightnum = i;
        break;
      }
    }

    var precipnum;
    for (var i = 0; i < Array[0].length; i++) {
      if (Array[0][i].indexOf("00045") !== -1) {
        precipnum = i;
        break;
      }
    }

    var tempnum;
    for (var i = 0; i < Array[0].length; i++) {
      if (Array[0][i].indexOf("00010") !== -1) {
        tempnum = i;
        break;
      }
    }

    if (cfsnum !== undefined) {
      data.cfs = Array.map(function (value) {
        return value[cfsnum];
      });
      data.cfs.splice(0, 2);
    }

    if (heightnum !== undefined) {
      data.height = Array.map(function (value) {
        return value[heightnum];
      });
      data.height.splice(0, 2);
    }

    if (precipnum !== undefined) {
      data.precip = Array.map(function (value) {
        return value[precipnum];
      });
      data.precip.splice(0, 2);
    }

    if (tempnum !== undefined) {
      data.temp = Array.map(function (value) {
        if (!isNaN(Number(value[tempnum])) && value[tempnum] !== "") {
          return value[tempnum];
        } else {
          return NaN;
        }
      });
      data.temp.splice(0, 2);
    }

    //data.all = Array


    return data;
  }
  function AddLine(GraphName, Timezone, timeframe, Source, canvas, horizontal, vertical, color, graphtype, numplace) {
    if (graphtype === 3) {
      var endcolor = numplace;
    }
    if (graphtype !== 2) {
      numplace = 0;
    }
    var height = canvas.height * 0.80;
    var width = canvas.width;

    var ctx = canvas.getContext('2d');

    if (!isNaN(Number(horizontal))) {
      horizontal = [];
      for (var i = 0; i < vertical.length; i++) {
        horizontal.push(i * width);
      }
    }
    if (horizontal.length !== vertical.length) {
      console.warn("Uneven amount of datapoints. " + horizontal.length + " horizontal points found, but " + vertical.length + " vertical points found.");
    }

    if (color === undefined) {
      color = "#000000";
    }
    ctx.strokeStyle = color;
    ctx.lineWidth = Math.ceil(Math.min(width, height) / 120);
    ctx.beginPath();

    if (graphtype === 2) {
      width = width * 0.86;
    } else {
      width = width * 0.93;
    }

    var calcvertical = [];
    for (var i = 0; i < vertical.length; i++) {
      if (!isNaN(Number(vertical[i])) && vertical[i] !== "") {
        calcvertical.push(vertical[i]);
      }
      //else {
      //This is a valid warning - It just got TOO ANNOYING
      //console.warn("Element " + i + " in list is an invalid number. It had a value of: " + vertical[i])
      //}
    }

    var vscale = Math.max.apply(Math, calcvertical) - Math.min.apply(Math, calcvertical);
    var hscale = Math.max.apply(Math, _toConsumableArray(horizontal)) - Math.min.apply(Math, _toConsumableArray(horizontal));
    vscale = height / vscale;
    hscale = width / hscale;
    var voffset = Math.min.apply(Math, calcvertical);
    var hoffset = Math.min.apply(Math, _toConsumableArray(horizontal));

    hoffset -= (Math.max.apply(Math, _toConsumableArray(horizontal)) - Math.min.apply(Math, _toConsumableArray(horizontal))) * 0.07;

    var px = Math.floor(canvas.width * 0.07 / 2.6);
    ctx.font = px + 'px serif';
    if (color.length === 9) {
      color = color.slice(0, 7);
    }
    ctx.fillStyle = color;
    if (graphtype === 3) {
      var grd = ctx.createLinearGradient(0, 0, 0, height);
      grd.addColorStop(0, color);
      grd.addColorStop(1, endcolor);
      ctx.strokeStyle = grd;
      ctx.fillStyle = grd;
    }

    if (numplace === 0 || numplace === undefined) {
      var start = 1;
    } else {
      var start = canvas.width - canvas.width * 0.07;
    }
    for (var i = 1; i < 11; i++) {
      var Text = (Math.max.apply(Math, calcvertical) - Math.min.apply(Math, calcvertical)) * ((i - 1) / 10) + Math.min.apply(Math, calcvertical);

      if (Text >= 1000) {
        Text = Math.round(Text);
      } else {
        Text = Text.toFixed(3 - String(Math.round(Text)).length);
        if (Number(Text) === Math.round(Text)) {
          Text = Math.round(Text);
        }
      }

      ctx.fillText(Text, start, height * (11 - i) / 10 - 5);
    }

    //Top one
    Text = (Math.max.apply(Math, calcvertical) - Math.min.apply(Math, calcvertical)) * ((i - 1) / 10) + Math.min.apply(Math, calcvertical);
    if (Text >= 1000) {
      Text = Math.round(Text);
    } else {
      Text = Text.toFixed(3 - String(Math.round(Text)).length);
      if (Number(Text) === Math.round(Text)) {
        Text = Math.round(Text);
      }
    }
    ctx.fillText(Text, start, 27);

    var px = Math.floor(canvas.width * 0.07 / 2.8);
    ctx.font = px + 'px serif';
    if (color.length === 9) {
      color = color.slice(0, 7);
    }
    ctx.fillStyle = "black";

    var time1 = new Date(timeframe[0]);
    var time2 = new Date(timeframe[timeframe.length - 1]);
    var time3 = new Date((time2 - time1) / 2 + time1.getTime());
    var starttime = time1.getHours();
    var endtime = time2.getHours();
    var midtime = time3.getHours();
    if (String(time1.getHours()).length < 2) {
      starttime = starttime + "0";
    }
    starttime += ":" + time1.getMinutes();
    if (String(time1.getMinutes()).length < 2) {
      starttime = starttime + "0";
    }
    starttime += " " + (time1.getMonth() + 1) + "/" + time1.getDate() + "/" + time1.getFullYear();

    if (String(time2.getHours()).length < 2) {
      endtime = endtime + "0";
    }
    endtime += ":" + time2.getMinutes();
    if (String(time2.getMinutes()).length < 2) {
      endtime = endtime + "0";
    }
    endtime += " " + (time2.getMonth() + 1) + "/" + time2.getDate() + "/" + time2.getFullYear();

    if (String(time3.getHours()).length < 2) {
      midtime = midtime + "0";
    }
    midtime += ":" + time3.getMinutes();
    if (String(time3.getMinutes()).length < 2) {
      midtime = midtime + "0";
    }
    midtime += " " + (time3.getMonth() + 1) + "/" + time3.getDate() + "/" + time3.getFullYear();

    ctx.fillText(starttime + " (" + Timezone + ")", 10, canvas.height * (11 / 12) - canvas.height * 0.06 - 12);

    ctx.textAlign = "end";
    ctx.fillText(endtime + " (" + Timezone + ")", canvas.width - 10, canvas.height * (11 / 12) - canvas.height * 0.06 - 12);

    ctx.textAlign = "center";
    ctx.fillText(midtime + " (" + Timezone + ")", canvas.width / 2, canvas.height * (11 / 12) - canvas.height * 0.06 - 12);

    ctx.textAlign = "start";

    var px = Math.floor(canvas.width * 0.07 / 2.4);
    ctx.font = px + 'px serif';
    ctx.fillStyle = color;
    //because a bit of text is smaller than the whole graph
    if (graphtype === 3) {
      var grd = ctx.createLinearGradient(0, height, 200, height);
      grd.addColorStop(0, color);
      grd.addColorStop(1, endcolor);
      ctx.strokeStyle = grd;
      ctx.fillStyle = grd;
    }

    if (graphtype === 2) {
      if (numplace === 0 || numplace === undefined) {
        ctx.fillText("Flow (Cubic Feet/Second)", start + 5, canvas.height * (11 / 12));
      } else {
        ctx.textAlign = "right";
        ctx.fillText("Gauge Height (Feet)", start - 5, canvas.height * (11 / 12));
        ctx.textAlign = "start";
      }
    } else if (graphtype === 3) {
      ctx.fillText("Water Temperature (°F)", start + 5, canvas.height * (11 / 12));
    } else {
      if (GraphName === "Precipitation") {
        ctx.fillText("Precipitation (Inches)", start + 5, canvas.height * (11 / 12));
        var fulldayprecip = 0;
        var halfdayprecip = 0;
        var preciplist = vertical.slice(-96);
        var preciplist = preciplist.map(Number);
        //convert strings to numbers
        preciplist.forEach(function (value) {
          fulldayprecip += value;
        });
        preciplist = preciplist.slice(-48);
        preciplist.forEach(function (value) {
          halfdayprecip += value;
        });

        fulldayprecip = fulldayprecip.toFixed(2);
        halfdayprecip = halfdayprecip.toFixed(2);

        ctx.fillText("Last 24 Hours: " + fulldayprecip + " in", canvas.width - 700, canvas.height * (11 / 12));
        ctx.fillText("Last 12 Hours: " + halfdayprecip + " in", canvas.width - 330, canvas.height * (11 / 12));
      } else if (GraphName === "cfs") {
        ctx.fillText("Flow (Cubic Feet/Second)", start + 5, canvas.height * (11 / 12));
      } else if (GraphName === "height") {
        ctx.fillText("Gauge Height (Feet)", start + 5, canvas.height * (11 / 12));
      } else {
        ctx.fillText("Labeling Error...", start + 5, canvas.height * (11 / 12));
      }
    }

    //set it back    
    if (graphtype === 3) {
      var grd = ctx.createLinearGradient(0, 0, 0, canvas.height);
      grd.addColorStop(0, color);
      grd.addColorStop(1, endcolor);
      ctx.strokeStyle = grd;
      ctx.fillStyle = grd;
    }

    ctx.fillStyle = "black";
    ctx.textAlign = "center";
    ctx.fillText(Source, canvas.width / 2, canvas.height - 10);
    ctx.textAlign = "start";

    function H(Value) {
      return Math.round((Value - hoffset) * hscale);
    }

    function V(Value) {
      return Math.round(height - (Value - voffset) * vscale);
    }

    for (var p = 0; p < Math.min(vertical.length, horizontal.length); p++) {
      if (!isNaN(Number(vertical[p])) && vertical[p] !== "") {
        ctx.moveTo(H(horizontal[p]), V(vertical[p]));
        break;
      }
    }

    var valid = 1;

    for (var i = p; i < Math.min(vertical.length, horizontal.length); i++) {
      if (!isNaN(Number(vertical[i])) && vertical[i] !== "") {
        if (valid === 1) {
          ctx.lineTo(H(horizontal[i]), V(vertical[i]));
        } else {
          ctx.moveTo(H(horizontal[i]), V(vertical[i]) + 10);
          ctx.lineTo(H(horizontal[i]), V(vertical[i]));
          valid = 1;
        }
      } else {
        valid = 0;
      }
    }

    ctx.stroke();
    ctx.beginPath();

    ctx.lineWidth = Math.ceil(ctx.lineWidth / 10);
    ctx.strokeStyle = "#000000AA";
    for (var i = 1; i < 11; i++) {
      ctx.moveTo(0, height * (11 - i) / 10);
      ctx.lineTo(canvas.width, height * (11 - i) / 10);
    }
    ctx.stroke();
  }

  function ToFlow(idMake) {
    var id = idMake.slice(0, -7);
    var canvas1 = GetId(id + "canvas1");
    var canvas2 = GetId(id + "canvas2");
    var canvas3 = GetId(id + "canvas3");
    var button1 = GetId(id + "button1");
    var button2 = GetId(id + "button2");
    var button3 = GetId(id + "button3");
    canvas1.style.display = "block";
    canvas2.style.display = "none";
    canvas3.style.display = "none";
    button1.className = "FlowButton";
    button2.className = "Unselected";
    button3.className = "Unselected";
  }

  function ToTemp(idMake) {
    var id = idMake.slice(0, -7);
    var canvas1 = GetId(id + "canvas1");
    var canvas2 = GetId(id + "canvas2");
    var canvas3 = GetId(id + "canvas3");
    var button1 = GetId(id + "button1");
    var button2 = GetId(id + "button2");
    var button3 = GetId(id + "button3");
    canvas2.style.display = "block";
    canvas1.style.display = "none";
    canvas3.style.display = "none";
    button1.className = "Unselected";
    button2.className = "TempButton";
    button3.className = "Unselected";
  }

  function ToPrecip(idMake) {
    var id = idMake.slice(0, -7);
    var canvas1 = GetId(id + "canvas1");
    var canvas2 = GetId(id + "canvas2");
    var canvas3 = GetId(id + "canvas3");
    var button1 = GetId(id + "button1");
    var button2 = GetId(id + "button2");
    var button3 = GetId(id + "button3");
    canvas3.style.display = "block";
    canvas2.style.display = "none";
    canvas1.style.display = "none";
    button1.className = "Unselected";
    button2.className = "Unselected";
    button3.className = "PrecipButton";
  }

  function CreateGraphs(DivToAppend, USGSNum, TextReport) {
    var idMake = "";
    for (var i = 0; i < 10; i++) {
      idMake += String(Math.random() * Math.pow(2, 53));
    }

    var canvas1 = document.createElement("canvas");
    var canvas2 = document.createElement("canvas");
    var canvas3 = document.createElement("canvas");
    canvas1.width = 1200;
    canvas2.width = 1200;
    canvas3.width = 1200;
    canvas1.height = 800;
    canvas2.height = 800;
    canvas3.height = 800;

    LoadAndRender(USGSNum, TextReport, canvas1, canvas2, canvas3, "#00AAFF80", "#0000FF80", "#0066FF80").catch(function (event) {
      TextReport.innerHTML = "Error...";
      console.warn(event);
    });
    DivToAppend.appendChild(canvas1);

    canvas2.style.display = "none";
    canvas3.style.display = "none";

    DivToAppend.appendChild(canvas2);
    DivToAppend.appendChild(canvas3);
    canvas1.id = idMake + "canvas1";
    canvas2.id = idMake + "canvas2";
    canvas3.id = idMake + "canvas3";

    canvas1.className = "ToDeleteLater";
    canvas2.className = "ToDeleteLater";
    canvas3.className = "ToDeleteLater";

    var button1 = document.createElement("button");
    button1.innerHTML = "Flow Info";
    button1.addEventListener("click", function () {
      ToFlow(this.id);
    });
    button1.className = "FlowButton";
    button1.id = idMake + "button1";

    var button2 = document.createElement("button");
    button2.innerHTML = "Water Temperature";
    button2.addEventListener("click", function () {
      ToTemp(this.id);
    });
    button2.className = "Unselected";
    button2.id = idMake + "button2";

    var button3 = document.createElement("button");
    button3.innerHTML = "Precipitation";
    button3.addEventListener("click", function () {
      ToPrecip(this.id);
    });
    button3.className = "Unselected";
    button3.id = idMake + "button3";

    var Div = document.createElement("div");

    Div.appendChild(button1);
    Div.appendChild(button3);
    Div.appendChild(button2);

    Div.className = "canvasbuttons ToDeleteLater";
    return Div;
  }
  //End of Graph Code


  function AddElement(Name, Section, Difficulty, Quality, Length, USGS, Writeup) {
    var Rivers = GetId("Rivers");
    var Button = document.createElement("button");
    Button.className = "accordion";
    var Div = document.createElement("Div");
    Div.className = "panel";

    function AddSpan(Content) {
      var Span = document.createElement("Span");
      if (Content !== undefined) {
        Span.innerHTML = Content;
      } else {
        Span.innerHTML = "Not Found";
      }
      Span.className = "riverspan";
      Button.appendChild(Span);
    }
    AddSpan(Name);
    AddSpan(Section);
    AddSpan(Difficulty);

    if (Quality === "Rating" || Quality === "Below" || Quality === "Not Found") {
      AddSpan(Quality);
    } else {
      var Text;
      switch (parseInt(Quality)) {
        case 1:
          Text = "1Star";
          break;
        case 2:
          Text = "2Stars";
          break;
        case 3:
          Text = "3Stars";
          break;
        case 4:
          Text = "4Stars";
          break;
        case 5:
          Text = "5Stars";
          break;
        default:
          Text = "Error";
      }
      if (Text === "Error") {
        AddSpan("???");
      } else {
        var span = document.createElement("span");
        var img = document.createElement("img");
        img.src = "https://rivers.run/resources/" + Text + ".png";
        img.alt = Text[0] + " Stars";
        span.className = "riverspan";
        span.appendChild(img);
        Button.appendChild(span);
      }
    }

    AddSpan(Length);

    if (Writeup !== undefined) {
      Div.innerHTML = Writeup;
    } else {
      Div.innerHTML = "This River has no Writeup.";
    }

    if (USGS === "Flow Info") {
      AddSpan(USGS);
      Button.id = "LabelRow";
    } else if (String(USGS).length < 16 && USGS !== undefined && Number(USGS) !== 0 && !isNaN(Number(USGS))) {
      //This means that it is a valid number, is not undefined, is under 16 digits, and is not zero
      //Thats about as much error checking as I can give it
      var RiverGaugeSpan = document.createElement("span");
      RiverGaugeSpan.className = "riverspan";
      RiverGaugeSpan.innerHTML = "Loading...";
      Button.appendChild(RiverGaugeSpan);
      Div.appendChild(CreateGraphs(Div, USGS, RiverGaugeSpan));
    } else if (USGS !== undefined && Number(USGS) !== 0) {
      //Only add bad gage number if it is not undefined or 0, and failed the test above.
      AddSpan("Bad Gauge #");
    }

    Button.addEventListener("click", function () {
      this.classList.toggle("active");
      var panel = this.nextElementSibling;
      if (panel.style.maxHeight) {
        panel.style.maxHeight = null;
        panel.style.padding = "0px";
        panel.hidden = "hidden";
      } else {
        panel.style.maxHeight = "100%" /*(panel.scrollHeight + 20) + "px"*/;
        panel.style.padding = "10px";
        panel.hidden = "";
      }
    });

    if (Section === "Relevant") {
      Button.id = "lessrelevant";
    }
    Div.hidden = "hidden";
    Rivers.appendChild(Button);
    Rivers.appendChild(Div);
  }

  function ClearList() {
    document.querySelectorAll(".Unselected").forEach(function (e) {
      return e.parentNode.removeChild(e);
    });
    document.querySelectorAll(".FlowButton").forEach(function (e) {
      return e.parentNode.removeChild(e);
    });
    document.querySelectorAll(".PrecipButton").forEach(function (e) {
      return e.parentNode.removeChild(e);
    });
    document.querySelectorAll(".TempButton").forEach(function (e) {
      return e.parentNode.removeChild(e);
    });
    document.querySelectorAll(".ToDeleteLater").forEach(function (e) {
      return e.parentNode.removeChild(e);
    });

    var myNode = GetId("Rivers");
    while (myNode.firstChild) {
      myNode.removeChild(myNode.firstChild);
    }
    AddElement("River Name", "Section", "Skill", "Rating", "Length", "Flow Info", "The River's Write-up will appear here.");
  }
  var Updates = 0;
  //For locking out list. 
  function CreateList(PassedList) {
    Updates += 1;
    var LockCounter = Updates;

    ClearList();
    var i = 0;
    function AddMore(LockCounter) {
      var c = i + 40; //Amount that is added each time
      for (i; i < Math.min(c, PassedList.length); i++) {
        var Elem = PassedList[i];
        if (LockCounter === Updates) {
          AddElement(Elem.Name, Elem.Section, Elem.Difficulty, Elem.Quality, Elem.Length + " miles", Elem.USGS, Elem.Writeup);
        } else {
          break;
        }
      }
      if (i < PassedList.length && LockCounter === Updates) {
        setTimeout(function () {
          requestAnimationFrame(function () {
            AddMore(LockCounter);
          });
        }, 60 /*Try and give time for response to user input*/);
      }
    }
    if (PassedList.length > 0) {
      AddMore(LockCounter);
    }
  }

  //RiverArray is defined because of the other JavaScript file that was loaded.
  CreateList(RiverArray);
  //That will be the initial list with everything in it.
  RotateHandler();
  //Resize text initially


  GetId("SearchBox").addEventListener("keydown", PrepSort);
  var SearchStore = "";

  function SortListGen() {
    var Text = GetId("SearchBox").value.toLowerCase().trim();
    var array = [];
    var array1 = [];
    var array2 = [];
    var array3 = [];
    var array4 = [];
    for (var i = 0; i < RiverArray.length; i++) {
      var Obj = RiverArray[i];
      if (Obj.Tags.toLowerCase().indexOf(Text) !== -1) {
        if (Obj.Name.toLowerCase().indexOf(Text) !== -1) {
          array.splice(0, 0, Obj);
        } else {
          array.push(Obj);
        }
      } else if (Obj.Name.toLowerCase().indexOf(Text) !== -1) {
        array1.push(Obj);
      } else if (Obj.Section.toLowerCase().indexOf(Text) !== -1) {
        array2.push(Obj);
      } else if (Obj.Difficulty.toLowerCase().indexOf(Text) !== -1) {
        //Exact match is highly relevant
        if (Obj.Difficulty.toLowerCase().indexOf(Text) === 0) {
          array3.push(Obj);
        } else if (Obj.Writeup.toLowerCase().indexOf(Text) === -1) {
          array4.push(Obj);
          //Not that relevant. Add to less relevant list if it won't be added later.    
        }
      } else if (Obj.Writeup.toLowerCase().indexOf(Text) !== -1) {
        array4.push(Obj);
      }
    }
    for (var i = 0; i < array1.length; i++) {
      array.push(array1[i]);
    }
    for (var i = 0; i < array2.length; i++) {
      array.push(array2[i]);
    }
    for (var i = 0; i < array3.length; i++) {
      array.push(array3[i]);
    }
    if (array4.length > 0) {
      array.push({ Name: "Less", Section: "Relevant", Difficulty: "Results", Quality: "Below", Length: "", Writeup: "Results below contained the search query, but not in a way that was clearly related to the search query. The results shown below may not be what you are looking for." });
    }
    for (var i = 0; i < array4.length; i++) {
      array.push(array4[i]);
    }
    CreateList(array);

    if (array.length === 0) {
      AddElement("Not Found", "Not Found", "Not Found", "Not Found", "Not Found", "No Rivers were found for your search query.");
    }
  }

  //Query Handler
  var ThisURL = window.location.href;
  ThisURL = decodeURIComponent(ThisURL);
  var Query = ThisURL.slice(ThisURL.indexOf("?") + 1);
  if (Query.indexOf("q=cache:") === 0) {
    Query = "";
    setTimeout(function () {
      alert("It appears that you have been redirected from Google's Webcache to this page. You are now at the actual site.");
    }, 1000);
    //In case they try to visit the cached version.
  }
  if (ThisURL !== Query) {
    document.getElementById("SearchBox").value = Query;
    SortListGen();
    SearchStore = Query;
  }
}
