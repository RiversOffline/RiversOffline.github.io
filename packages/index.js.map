{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/loadUSGS.js","webpack:///./src/flowInfoCalculations.js","webpack:///./src/skillTranslations.js","webpack:///./src/sort.js","webpack:///./src/index.js","webpack:///./src/graph.js","webpack:///./src/TopBar.js","webpack:///./src/River.js","webpack:///./src/riverExpansion.js","webpack:///./src/addGraphs.js","webpack:///./src/notificationsWidget.js","webpack:///./src/search.js","webpack:///./src/distance.js","webpack:///./src/objectUtils.js","webpack:///./src/advancedSearchParameters.js","webpack:///./src/searchUI.js","webpack:///./src/NewList.js","webpack:///./src/createLegend.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA;AACA;;AAEA;AACA,iBAAiB;;AAEjB,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO,mBAAO,CAAC,CAAe;AAC9B,OAAO;AACP;;;AAGA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,GAAG;AACH;AACA;;;AAGA;AACA;AACA,cAAc,oBAAoB;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;;;;;;ACvHA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB;AACtB,WAAW;AACX;;;;;;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,KAAK;AACxC;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;AAGA;AACA;AACA;AACA;;;AAGA;;AAEA,aAAa;;AAEb,iBAAiB,gBAAgB;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+BAA+B,2BAA2B;AAC1D;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;;AAEA;;AAEA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iEAAiE;AACjE;AACA;AACA,yCAAyC;AACzC,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AACd,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACvJa;;;AAGb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C;;AAE3C;;AAEA;AACA;AACA,KAAK,mBAAO,CAAC,CAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,UAAU;;AAEV;AACA,kBAAkB,mBAAO,CAAC,CAAY;AACtC;AACA,UAAU;;AAEV;AACA,sBAAsB,mBAAO,CAAC,CAAa;;AAE3C,eAAe,mBAAO,CAAC,CAAY;;AAEnC,cAAc,mBAAO,CAAC,CAAW;;AAEjC;AACA,sBAAsB,mBAAO,CAAC,EAAa;;AAE3C;;AAEA;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD,mBAAO,CAAC,EAA+B;;AAEvC,mBAAO,CAAC,EAAe;;AAEvB,mBAAO,CAAC,EAAc;;AAEtB;AACA;AACA,mBAAO,CAAC,EAAmB;;;AAG3B;AACA;AACA;;AAEA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,CAAC;;AAED;AACA;;AAEA;AACA,CAAC,mBAAO,CAAC,CAAe;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;ACtJD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,KAAK;AACvB;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,mBAAmB,+CAA+C;AAClE;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,mBAAmB,+CAA+C;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,KAAK;AACxB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;AC/TA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;AC5FA,KAAK,0DAA0D,GAAG,mBAAO,CAAC,CAA2B;;AAErG,OAAO,kBAAkB,GAAG,mBAAO,CAAC,CAAwB;AAC5D,OAAO,mBAAmB,GAAG,mBAAO,CAAC,EAAqB;;AAE1D;AACA;;AAEA;AACA,4DAA4D,kBAAkB;AAC9E,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA,EAAE;AACF;;;AAGA;AACA;;AAEA;;AAEA,eAAe,KAAK;AACpB;AACA;AACA;;AAEA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iBAAiB;;AAE/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;;;AAIA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,I;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;ACtVA,OAAO,kBAAkB,GAAG,mBAAO,CAAC,CAAwB;AAC5D,kBAAkB,mBAAO,CAAC,EAAgB;AAC1C,OAAO,aAAa,GAAG,mBAAO,CAAC,CAA2B;AAC1D,OAAO,gEAAgE,GAAG,mBAAO,CAAC,EAA0B;;AAE5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;AAKA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,+BAA+B;AAC/B,2BAA2B;;AAE3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,0CAA0C;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,OAAO;AACP,MAAM;AACN;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,2BAA2B;AAC7C,wCAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,E;;;;;;;AC3MA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,iBAAiB,aAAa;AAC9B,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA,YAAY;AACZ;;AAEA;;;AAGA;AACA;AACA,2BAA2B;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,G;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;AChNA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,I;;;;;;ACtOA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8BAA8B;;AAE9B,8CAA8C;;AAE9C;AACA;;;;AAIA,gBAAgB,mBAAO,CAAC,CAAW;;;AAGnC;AACA;;AAEA,oBAAoB,4CAA4C;;AAEhE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,0EAA0E;;AAE1E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB;AACxB,KAAK;;AAEL;AACA,oCAAoC,8CAA8C;;AAElF;;AAEA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;AAUA,wBAAwB,mBAAO,CAAC,EAAe;;AAE/C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA,2BAA2B;;AAE3B;;AAEA,+BAA+B,YAAY;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;AAElC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C;AAC9C;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD,8CAA8C;;AAEtG;AACA,yFAAyF,8CAA8C;AACvI;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB,OAAO;;AAEP;AACA;;;;;;;AAOA;AACA;AACA;AACA;;;;;;;AClgBA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;AC9BA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA,gE;;;;;;;AC9LA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;;AAGD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,WAAW;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,mDAAmD,mBAAmB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,EAAE;AACF;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA;;;;;;;ACpMA;AACA,wBAAwB;AACxB,oDAAoD;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC;AACvC;;AAEA;AACA;AACA;AACA,EAAE;AACF,8DAA8D,cAAc;;AAE5E;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iDAAiD;AACjD;;AAEA;AACA;AACA;AACA;AACA,mFAAmF,QAAQ;;AAE3F;AACA;AACA,QAAQ,6BAA6B;;AAErC,0DAA0D;AAC1D,yDAAyD;;AAEzD;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,oB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,aAAa;AACjD;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,YAAY,6DAA6D;;AAEzE;;AAEA;AACA;AACA;AACA,gDAAgD,gCAAgC;AAChF;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW;;AAEX;AACA,0BAA0B,gDAAgD;AAC1E;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrHA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,cAAc,KAAK;AACnB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;;AAE3B;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA","file":"packages/index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","self.usgsarray = {}\nwindow.updateOldDataWarning = function() {\n\n\t\tlet toDelete = document.getElementById(\"topOldDataWarning\")\n\t\tif (toDelete) {toDelete.remove()}\n\n\t\tif (!window.usgsDataAge) {return}\n\t\t//No reason to make an old data warning when data is new (within 1 hour)\n\t\t//Make sure to change the warning text so that if the data becomes old while the page is open, they are not confused.\n\t\tif (window.usgsDataAge < 1000*60*60) {\n\t\t\twindow.loadNewUSGS = \"Flow Data has become old while this page was open. Click try again to update.\"\n\t\t\treturn\n\t\t}\n\n\t\tlet oldDataWarning = document.createElement(\"p\")\n\t\toldDataWarning.id = \"topOldDataWarning\"\n\n\t\toldDataWarning.innerHTML = \"All flow data is more than \" + Math.floor(window.usgsDataAge/1000/60/60) + \" hours old! \"\n\t\toldDataWarning.innerHTML += \"(\" + window.loadNewUSGS + \") \"\n\n\t\t\t\t\tlet reloadButton = document.createElement(\"button\")\n\n\t\t\t\t\t\treloadButton.addEventListener(\"click\", function() {\n\t\t\t\t\t\t\twindow.loadNewUSGS = \"Trying to Load Data\"\n\t\t\t\t\t\t\trequire(\"./loadUSGS.js\").loadUSGS()\n\t\t\t\t\t\t})\n\t\t\t\t\t\treloadButton.innerHTML = \"Try Again\"\n\n\n\t\t\t\t\toldDataWarning.appendChild(reloadButton)\n\n\n\t\tlet legend = document.getElementById(\"legend\")\n\t\tlegend.parentNode.insertBefore(oldDataWarning, legend)\n}\n\n\nfunction updateUSGSDataInfo() {\n\twindow.usgsDataAge = Date.now() - window.requestTime\n\twindow.updateOldDataWarning()\n}\nsetInterval(updateUSGSDataInfo, 1000*60*1) //Every minute, make sure that the data has not become old. If it has, display a warning.\n\n//When the data updates, rerun the current search.\nwindow.addEventListener(\"usgsDataUpdated\", function() {\n\tlet query = getAdvancedSearchParameters()\n\tif (\n\t\t(//Make sure flow searching or sorting is being performed, so that re-running the search may make a difference.\n\t\t\t!objectsEqual(query.flow, defaultAdvancedSearchParameters.flow) //Flow search\n\t\t\t|| (query.sort.query === \"running\") //Flow sort\n\t\t)\n\t\t&& timesLoadUSGSRan >= 1 //And this is actually an update to the data, not the first load\n\t\t&& ItemHolder.length !== 0 //And that there are actually rivers to update - the flow data could have loaded first.\n\t\t&& (//Make sure we don't close writeups that the user is looking at without their permission.\n\t\t\tItemHolder.every(river => !river.expanded) //If no writeups are open, we can continue\n\t\t\t|| confirm(\"USGS data has been updated. Would you like to re-run the previous search?\") //Otherwise, ask the user if they would like the update.\n\t\t)\n\t) {NewList()}\n})\n\n\nlet timesLoadUSGSRan = 0\nlet loadUSGS = async function(useCache) {\n\t//Gaurd against infinite recursion. Ignores calls when data is new. (within 5 minutes)\n\tif (window.usgsDataAge < 1000*60*5) {\n\t\treturn;\n\t}\n\n\ttimesLoadUSGSRan++\n\n\tlet fileName = \"flowdata2.json\"\n\n\tif (useCache) {\n\t\tlet cache = await caches.open(\"rivers.run\")\n\t\tlet response = await caches.match(fileName)\n\t\twindow.usgsarray = await response.json()\n\t}\n\telse if (window.fetch) {\n\t\tlet response = await fetch(fileName)\n\t\twindow.usgsarray = await response.json()\n\t}\n\telse {\n\t\t//For browsers that don't support fetch\n\t\tlet request = new XMLHttpRequest()\n\t\tlet response = await new Promise((resolve, reject) => {\n\t\t\trequest.onload = function(event) {resolve(event.target.response)};\n\t\t\trequest.open(\"GET\", fileName);\n\t\t\trequest.send()\n\t\t})\n\t\twindow.usgsarray = JSON.parse(response)\n\t}\n\n\t\n\tconsole.time(\"updatingRivers\")\n\t//Add USGS Data to Graph\n\tfor (let i=0;i<ItemHolder.length;i++) {\n\t\ttry {\n\t\t\tlet river = ItemHolder[i]\n\n\t\t\triver.updateFlowData()\n\t\t}\n\t\tcatch(e) {\n\t\t\tconsole.error(e)\n\t\t}\n\t}\n\tconsole.timeEnd(\"updatingRivers\")\n\n\twindow.requestTime = usgsarray.generatedAt\n\tupdateUSGSDataInfo()\n\twindow.updateOldDataWarning()\n\t\n\twindow.dispatchEvent(new Event(\"usgsDataUpdated\"))\n}\n\n\nmodule.exports = {\n\tloadUSGS\n}\n\nwindow.loadUSGS = loadUSGS\n","//These functions are used by River.js to calculate things based on a rivers flow.\n\nfunction calculateDirection(usgsNumber) {\n    let usgsData = usgsarray[usgsNumber]\n    if (usgsData) {\n\n        let data = usgsData.cfs || usgsData.feet\n\n        if (data) {\n            let current;\n            let previous;\n\n            //TODO: Ignore insignificant changes.\n\n            //We will go back 4 datapoints (1 hour) if possible.\n            //Do this because USGS sometimes does 1 hour intervals instead of 15 minutes\n            let stop = Math.max(data.length-5, 0)\n            for (let i=data.length;i>=stop;i--) {\n                let item = data[i]\n                if (!item) {continue}\n                let value = item.value\n                if (!current) {\n                    current = value\n                }\n                else {\n                    previous = value\n                }\n            }\n\n            if (current > previous) {\n                //Water level rising\n                return \"⬆\"\n            }\n            else if (previous > current) {\n                //Water level falling\n                return \"⬇\"\n            }\n            else if (current === previous) {\n                //Water level stable\n                return \" –\" //En dash preceeded by a thin space.\n            }\n        }\n    }\n    return; //If we got here, there is not enough USGS data.\n}\n\n\n\nfunction calculateDirection(usgsNumber, prop=\"cfs\") {\n\t//We will try first using cfs. If there is no conclusion, try feet. \n    let usgsData = usgsarray[usgsNumber]\n    if (usgsData) {\n\n        let data = usgsData[prop]\n\n        if (data) {\n            let current;\n            let previous;\n\n            //TODO: Ignore insignificant changes.\n\n            //We will go back 2 datapoints (usually 30 minutes) if possible.\n            let stop = Math.max(data.length-2, 0)\n            for (let i=data.length;i>=stop;i--) {\n                let item = data[i]\n                if (!item) {continue}\n                let value = item.value\n                if (!current) {\n                    current = value\n                }\n                else {\n                    previous = value\n                }\n            }\n\n            if (current > previous) {\n                //Water level rising\n                return \"⬆\"\n            }\n            else if (previous > current) {\n                //Water level falling\n                return \"⬇\"\n            }\n            else if (current === previous) {\n                //Water level stable\n                return \" –\" //En dash preceeded by a thin space.\n            }\n        }\n    }\n\t\n\tif (prop === \"cfs\") {return calculateDirection(usgsNumber, \"feet\")}\n    return; //If we got here, there is not enough USGS data.\n}\n\n\n\n\n\nfunction calculateAge(usgsNumber) {\n\t//Returns millseconds old that USGS data is\n    let usgsData = window.usgsarray[usgsNumber]\n    if (usgsData) {\n        let data = usgsData.cfs || usgsData.feet || usgsData.temp || usgsData.precip;\n\n        if (data) {\n            for (let i=data.length;i>=0;i--) {\n                let item = data[i]\n                if (!item) {continue}\n                return Date.now() - Number(new Date(item.dateTime))\n            }\n        }\n    }\n    return null; //If we got here, there is not enough USGS data.\n}\n\n\nfunction calculateRelativeFlow(river) {\n    //Defines river.running\n    //0-4\n    //0 is too low, 4 is too high, other values in between\n\n\n    let values = [\"minrun\", \"lowflow\", \"midflow\", \"highflow\", \"maxrun\"]\n\n    let type; //Currently, we skip a value if one datapoint is cfs and another feet\n\n    for (let i=0;i<values.length;i++) {\n\n        let str = river[values[i]]\n        if (!str) {\n            values[i] = undefined\n            continue;\n        }\n        str = str.split(\"(computer)\").join(\"\")\n        str = str.trim()\n        let value = parseFloat(str)\n        let currentType = str.match(/[^\\d|.]+/) //Match a series of non-digits\n\n        if (currentType) {\n            currentType = currentType[0].trim().toLowerCase() //Use the first match\n        }\n        if (!type && currentType) {\n            type = currentType\n        }\n        else if (type !== currentType && !isNaN(value)) {\n            console.warn(values[i] + \" on \" + river.name + \" \" + river.section + \" has a different extension and has been skipped\")\n            values[i] = undefined\n            continue;\n        }\n\n        values[i] = value\n    }\n\n\tif (values.filter((value) => {return value !== undefined}).length === 0) {\n\t\treturn null //If no relative flow values exist, return. This should help improve performance with gauges (lots of gauges, none have relative flows)\n\t}\n\n\t\n    let flow;\n    if (type === \"cfs\") {\n        flow = river.cfs\n    }\n    else if (type === \"feet\" || type===\"ft\") {\n        flow = river.feet\n    }\n\n\n    //Use or equal to\n    //While that technically may not be correct (says that river is too low at minrun), it makes no significant difference\n    //In addition, values equal to minrun or maxrun result in a river.running of 0 or 4\n    //Meaning that they may be included in the middle of a darker highlighted rivers\n    //When sorting by runnability is used.\n\n    //It would be better if rivers that are too high or too low are still given river.running values\n    //related to their level. This would also help in determining if something is just barely\n    //too low, and may come up with rain, or is truely too low.\n\n    //If we don't have some values, fill them in using logarithms\n    //Although these calculations are not needed when flow is below minrun or above maxrun. they can be useful in\n    //alerting people what values are being used, so that they can\n\n    function logDist(low, high, ratio = 0.5) {\n        //ratio is how a decimal between 0 and 1. 0.5 means to factor lowLog and highLog evenly. Values greater than 0.5 factor in highLog more, vice versa.\n        let lowLog = Math.log10(low)\n        let highLog = Math.log10(high)\n        if (lowLog > highLog) {\n            console.error(\"Low greater than high on \" + river.name + \" \" + river.section)\n            return;\n        }\n        return 10**(lowLog + (highLog - lowLog)*ratio)\n    }\n\n    let minrun = values[0]\n    let maxrun = values[4]\n    //For midflow, use the nearest values to calculate midflow.\n    let midflow = values[2] //Prefer the specified midflow.\n    midflow = midflow || logDist(values[1], values[3]) //Average lowflow and highflow\n    midflow = midflow || logDist(values[0], values[3], 2/3) // two-thirds of the way between minrun and highflow\n    midflow = midflow || logDist(values[1], values[4], 1/3) // one-third of the way between lowflow and maxrun\n    midflow = midflow || logDist(minrun, maxrun) //Average minrun and maxrun.\n    let lowflow = values[1] || logDist(minrun, midflow)\n    let highflow = values[3] || logDist(midflow, maxrun)\n\n    //Add computer generated properties to the river object so that they will display and people can see the values used in calculations.\n    values[1] || (river.lowflow = parseFloat(lowflow.toFixed(2)) + type + \" (computer)\")\n    values[2] || (river.midflow = parseFloat(midflow.toFixed(2)) + type + \" (computer)\")\n    values[3] || (river.highflow = parseFloat(highflow.toFixed(2)) + type + \" (computer)\")\n\n\n    if (flow <= minrun) {\n        //Too low\n        river.running = 0\n    }\n    else if (flow >= maxrun) {\n        //Too high\n        river.running = 4\n    }\n    else {\n\n        function calculateRatio(low, high, current) {\n            low = Math.log(low)\n            high = Math.log(high)\n\n            current = Math.log(current)\n\n\n            let range = high-low\n            let value = current-low\n\n            return value/range\n\n        }\n\n        if (flow < lowflow && minrun) {\n            river.running = calculateRatio(minrun, lowflow, flow)\n        }\n        else if (flow < midflow && lowflow) {\n            river.running = 1+calculateRatio(lowflow, midflow, flow)\n        }\n        else if (flow < highflow && midflow) {\n            river.running = 2+calculateRatio(midflow, highflow, flow)\n        }\n        //Use else if and comparison against maxrun to go to the else in case of isNaN(maxrun)\n        else if (flow < maxrun && highflow) {\n            river.running = 3+calculateRatio(highflow, maxrun, flow)\n        }\n        else {\n            return null //We can't calculate a ratio, as we lack information. Example: only have minrun and flow above minrun.\n        }\n    }\n    return river.running\n}\n\n\nfunction calculateColor(river, options) {\n    //hsla color values\n    //hsla(hue, saturation, lightness, opacity)\n    //Saturation hue is 0 red 120 green 240 blue\n    //Saturation - use 100%\n    //Lightness - use 50%\n    //Opacity - Decimal 0 to 1\n\n    let relativeFlow = calculateRelativeFlow(river)\n\n    if (relativeFlow == null || isNaN(relativeFlow)) {\n        return \"\"\n    }\n    else if (relativeFlow === 0) {\n        //Too low\n\t    let lightness = (options && options.highlighted)? (window.darkMode? \"28%\": \"63%\"):  window.darkMode? \"23%\": \"67%\"\n        return \"hsl(0,100%,\" + lightness + \")\"\n    }\n    else if (relativeFlow === 4) {\n        //Too high\n    \tlet lightness = (options && options.highlighted)? (window.darkMode? \"30%\": \"67%\"):  window.darkMode? \"20%\": \"69%\"\n        return \"hsl(240,100%,\" + lightness + \")\"\n    }\n    else {\n\t\t//Normal Flow lightness values\n\t\t//Tough to see a difference when highlighted amount the more middle values in light mode.\n    \tlet lightness = (options && options.highlighted)? (window.darkMode? \"30%\": \"65%\"): window.darkMode? \"25%\": \"70%\"\n        return \"hsl(\" + (0 + 60*relativeFlow) + \",100%,\" + lightness + \")\"\n    }\n}\n\nmodule.exports = {\n\tcalculateColor,\n\tcalculateAge,\n\tcalculateDirection,\n    calculateRelativeFlow\n}\n","let skillTranslations = {\n\t\"?\": \"Skill Unknown\",\n\t\"FW\": \"Flat Water\",\n\t\"B\": \"Beginner\",\n\t\"N\": \"Novice\",\n\t\"N+\": \"Novice Plus\",\n\t\"LI-\": \"Low-Intermediate Minus\",\n\t\"LI\": \"Low-Intermediate\",\n\t\"LI+\": \"Low-Intermediate Plus\",\n\t\"I-\": \"Intermediate Minus\",\n\t\"I\": \"Intermediate\",\n\t\"I+\": \"Intermediate Plus\",\n\t\"HI-\": \"High-Intermediate Minus\",\n\t\"HI\": \"High-Intermediate\",\n\t\"HI+\": \"High-Intermediate Plus\",\n\t\"A-\": \"Advanced Minus\",\n\t\"A\": \"Advanced\",\n\t\"A+\": \"Advanced Plus\",\n\t\"E-\": \"Expert Minus\",\n\t\"E\": \"Expert\",\n\t\"E+\": \"Expert Plus\"\n}\n\nmodule.exports = {\n\tskillTranslations\n}","function simpleSort(list, propertyName) {\n    list.sort(function(a,b) {\n        if (a[propertyName] > b[propertyName]) {\n            return 1;\n        }\n        if (a[propertyName] < b[propertyName]) {\n            return -1;\n        }\n        return 0;\n    })\n    return list\n}\n\n\nfunction alphabeticalsort(list, reverse) {\n    list = simpleSort(list, \"name\")\n\n    if (reverse) {\n        list.reverse()\n    }\n\n    return list\n}\n\nfunction ratingsort(list, reverse) {\n\t//In the sorting, the numbers all come before the letters\n\t//Convert numbers to strings so that we are comparng the same type, and do not always get false.\n\t//Convert back after.\n\n\tfor (let i=0;i<list.length;i++) {\n\t\tif (typeof list[i].rating === \"number\") {\n\t\t\tlist[i].rating = String(list[i].rating)\n\t\t}\n\t}\n\n    list = simpleSort(list, \"rating\")\n\n\tfor (let i=0;i<list.length;i++) {\n\t\tif (!isNaN(parseFloat(list[i].rating))) {\n\t\t\tlist[i].rating = parseFloat(list[i].rating)\n\t\t}\n\t}\n\n\t//The list is backwards. Reverse it if reverse is NOT specified.\n\tif (!reverse) {\n        list.reverse()\n    }\n\n    //Move error values to end\n    while (list[0].rating === \"Error\") {\n        list.push(list.shift())\n    }\n    return list\n}\n\n\nfunction skillsort(list, reverse) {\n    list.sort(function(a,b) {\n\n        function ToNum(value) {\n\n            let skillList = [\"FW\",\"B\",\"N\",\"N+\",\"LI-\",\"LI\",\"LI+\",\"I-\",\"I\",\"I+\",\"HI-\",\"HI\",\"HI+\",\"A-\",\"A\",\"A+\",\"E-\",\"E\",\"E+\"]\n            value = skillList.indexOf(value.skill)\n            if (value === undefined) {value = Infinity}\n\n            return value\n        }\n        return ToNum(a)-ToNum(b)\n    })\n\n\n    if (reverse) {\n        list.reverse()\n    }\n\n    while (list[0].skill === \"?\") {\n        list.push(list.shift())\n    }\n\n    return list\n}\n\n\nfunction runningSort(list, reverse) {\n\n    let noData = []\n\tlet hasDam = []\n    let hasGauge = []\n\tlet hasGaugeAndDam = []\n    let knownState = []\n\n    list.forEach((item) => {\n        if (item.running !== undefined && !isNaN(item.running)) {knownState.push(item)}\n        //If there is gauge data, the user may be able to determine level themselves\n        //As such, put rivers with gauges second\n        else if (item.flow && item.dam) {hasGaugeAndDam.push(item)}\n        else if (item.flow) {hasGauge.push(item)}\n\t\telse if (item.dam) {hasDam.push(item)}\n        else {noData.push(item)}\n    })\n\n    knownState = simpleSort(knownState, \"running\")\n\n\t//Default order should be highest flow first.\n    if (!reverse) {\n        knownState.reverse()\n    }\n\n    if (window.usgsDataAge === undefined) {\n        alert(\"Sorting based on flow requires flow data, which has not fully loaded. The flow sort is not being performed.\")\n        return list\n    }\n\n    knownState = knownState.concat(hasGaugeAndDam)\n    knownState = knownState.concat(hasGauge)\n    knownState = knownState.concat(hasDam)\n    knownState = knownState.concat(noData)\n\n    return knownState\n}\n\n\n\n\n\nfunction sort(method, list, reverse) {\n    if (method === \"none\") {}\n    else if (method === \"alphabetical\") {\n        list = alphabeticalsort(list, reverse)\n    }\n    else if (method === \"rating\") {\n        list = ratingsort(list, reverse)\n    }\n    else if (method === \"skill\") {\n        list = skillsort(list, reverse)\n    }\n    else if (method === \"running\") {\n        list = runningSort(list, reverse)\n    }\n    else {\n        throw \"Unknown sorting method \" + method\n    }\n    return list\n}\n\n\nmodule.exports = {\n    ratingsort,\n    alphabeticalsort,\n    skillsort,\n    sort\n}\n","'use strict';\n\n\ntry {\n\twindow.loadNewUSGS = \"Trying to Load Data\"\n\tif ('serviceWorker' in navigator) {\n\t\twindow.serviceWorkerMessages = []\n\t\tnavigator.serviceWorker.ready.then(function(registration) {\n\t\t\tnavigator.serviceWorker.onmessage = function(event) {\n\t\t\t\twindow.serviceWorkerMessages.push(event.data)\n\t\t\t\tlet data = event.data\n\n\t\t\t\tif (!data.includes(\"flowdata2.json\")) {return;}\n\n\t\t\t\twindow.oldLoadUSGS = window.loadNewUSGS\n\n\t\t\t\tif (data.includes(\"Updated cache for\")) {\n\t\t\t\t\tconsole.log(\"Updating\")\n\t\t\t\t\trequire(\"./loadUSGS.js\").loadUSGS(true) //Update the information. true says to use cache.\n\t\t\t\t}\n\t\t\t\telse if (data.includes(\"errored. Using cache\")) {\n\t\t\t\t\twindow.loadNewUSGS = \"Unable to load latest data\"\n\t\t\t\t}\n\t\t\t\telse if (data.includes(\" took too long to load from network\")) {\n\t\t\t\t\twindow.loadNewUSGS = \"Updating data in backgroud\"\n\t\t\t\t}\n\t\t\t\telse if (data.includes(\"has been loaded from the network\")) {\n\t\t\t\t\twindow.loadNewUSGS = \"This is likely a glitch. You should be viewing the latest data.\"\n\t\t\t\t}\n\t\t\t\twindow.updateOldDataWarning()\n\t\t\t}\n\t\t})\n\t}\n}\ncatch(e) {console.error(e)}\n\ntry {\n\twindow.addLine = require(\"./graph.js\").addLine\n}\ncatch(e) {console.error(e)}\n\n//Defines window.TopBar and window.triangle\nObject.assign(window, require(\"./TopBar.js\"))\n\nwindow.River = require(\"./River.js\").River\n\nwindow.sort = require(\"./sort.js\").sort\n\n//Defines window.normalSearch, window.advanedSearch, and window.toDecimalDegrees\nObject.assign(window, require(\"./search.js\"))\n\nwindow.usgsarray = {}\n\n//Defines recursiveAssign, deleteMatchingPortions, and objectsEqual\nObject.assign(window, require(\"./objectUtils.js\"))\nrequire(\"./advancedSearchParameters.js\") //Defines window.setMenuFromSearch and window.getAdvancedSearchParameters\n\nrequire(\"./searchUI.js\") //Adds listeners to the searchbox and advanced search menu.\n\nrequire(\"./NewList.js\") //Defines window.NewList\n\ndocument.getElementById(\"Rivers\").appendChild(new TopBar().create())\n//createLegend.js needs a #Rivers > .riverbutton to get font-size using getComputedStyle\nrequire(\"./createLegend.js\")\n\n\n//Handle search links.\n\tif (window.location.hash.length > 0) {\n\t\tlet search = decodeURI(window.location.hash.slice(1))\n\t\t\n\tif (search.startsWith(\"{\")) {\n\t\t//Advanced search\n\t\t\tlet query = JSON.parse(search)\n\t\t\tsetMenuFromSearch(query)\n\t}\n\t\telse {\n\t\t\t//Normal search\n\t\t\tlet query = window.getAdvancedSearchParameters()\n\t\t\tquery.normalSearch = search\n\t\t\tsetMenuFromSearch(query)\n\t\t}\n\t}\n\n\n;(async function() {\n\n\t//ItemHolder is a list of all the river objects. New objects should be pushed into the list.\n\twindow.ItemHolder = []\n\t\n\t//Load flow information. This is async, and will finish whenever.\n\trequire(\"./loadUSGS.js\").loadUSGS(false)\n\n\t//Load river data so that the page can be rendered.\n\tlet fileName = \"riverdata.json\"\n\tif (window.fetch) {\n\t\tlet response = await fetch(fileName)\n\t\twindow.riverarray = await response.json()\n\t}\n\telse {\n\t\t//For browsers that don't support fetch\n\t\tlet request = new XMLHttpRequest()\n\t\tlet response = await new Promise((resolve, reject) => {\n\t\t\trequest.onload = function(event) {resolve(event.target.response)};\n\t\t\trequest.open(\"GET\", fileName);\n\t\t\trequest.send()\n\t\t})\n\t\twindow.riverarray = JSON.parse(response)\n\t}\n\n\tconsole.time(\"Create River Objects\")\n\triverarray.map(function(event, index) {\n\t\tItemHolder[index] = new River(index, event)\n\t})\n\tconsole.timeEnd(\"Create River Objects\")\n\n\t//If there is a custom search link, use it. Otherwise, just call NewList.\n\n\tlet query = window.getAdvancedSearchParameters()\n\tif (\n\t\twindow.usgsDataAge === undefined &&\n\t\t(!objectsEqual(defaultAdvancedSearchParameters.flow, query.flow) || query.sort.query === \"running\") \n\t) {\n\t\t\t//We have no usgs data yet. Wait to flow search/sort.\n\t\t\t\tlet oldQuery = recursiveAssign({}, query)\n\t\t\t\tdelete query.flow\n\t\t\t\tif (query.sort && query.sort.query === \"running\") {\n\t\t\t\t\tdelete query.sort\n\t\t\t\t}\n\t\t\t\tfunction dataNowLoaded() {\n\t\t\t\t\t//If the user has made any changes that caused the list to reload, ask.\n\t\t\t\t\tif (timesNewListCalled <= 2 || confirm(\"Flow data has now loaded. Would you like to apply your original search link?\")) {\n\t\t\t\t\t\tsetMenuFromSearch(oldQuery)\n\t\t\t\t\t\tNewList()\n\t\t\t\t\t}\n\t\t\t\t\twindow.removeEventListener(\"usgsDataUpdated\", dataNowLoaded)\n\t\t\t\t}\n\t\t\t\tif (!objectsEqual(query, oldQuery)) {\n\t\t\t\t\twindow.addEventListener(\"usgsDataUpdated\", dataNowLoaded)\n\t\t\t\t\tlet searchNotFinished = document.createElement(\"p\")\n\t\t\t\t\tsearchNotFinished.id = \"topOldDataWarning\" //Reuse styling\n\t\t\t\t\tsearchNotFinished.innerHTML = \"Portions of your search link use flow data, which is still loading. \"\n\t\t\t\t\t//loadUSGS.js will delete searchNotFinished when it is not needed due to the id overlap.\n\t\t\t\t\tlet legend = document.getElementById(\"legend\")\n\t\t\t\t\tlegend.parentNode.insertBefore(searchNotFinished, legend)\n\t\t\t}\n\t\t\tNewList(query)\n\t\t}\n\telse {\n\t\tNewList()\n\t}\n}())\n","//Graph Code\n//It's Ugly... It should be fixed\n//BUT IT WORKS\n\n//addline(canvas, horizontal, vertical, color, graphtype, numplace)\n\n//canvas - HTML canvas element\n//horizontal - array of horizontal values. Pass 0 and it will evenly space.\n//vertical - array of vertical values\n\n//color - Optional. Color of line. Default black\n//graphtype - Optional. Specify 2 to put 2 lines and 2 scales on one graph. See numplace below\n//numplace - Use only if you are using graphtype = 2.\n//If you specify 0 or do not pass a value, the line's scale will be on the left side of the graph.\n//If you specify 1, the line's scale will be on the right side of the graph\nfunction addLine(GraphName, timeframe, Source, canvas, horizontal, vertical, color, graphtype, numplace) {\n    if (graphtype === 3) {\n        var endcolor = numplace\n        }\n    if (graphtype !== 2) {\n        numplace = 0\n    }\n    var height = canvas.height*0.80\n    var width = canvas.width\n\n    var ctx = canvas.getContext('2d');\n\n    if (!isNaN(Number(horizontal))) {\n        horizontal = []\n        for (var i = 0;i<vertical.length;i++) {\n            horizontal.push(i*width)\n        }\n    }\n    if (horizontal.length !== vertical.length) {\n        console.warn(\"Uneven amount of datapoints. \" + horizontal.length + \" horizontal points found, but \" + vertical.length + \" vertical points found.\")\n    }\n\n    color = color || \"#000000\"\n\n    ctx.lineWidth = Math.ceil(Math.min(width, height)/60)\n\n    ctx.beginPath();\n\n    if (graphtype === 2) {\n        width = width*0.86 //We need to put values on both sides\n\t\t//Because there are two lines, make the second line thinner so that it can't entirely cover the first. (first is about double the size.)\n\t\tif (numplace === 1) {\n        \tctx.lineWidth = Math.ceil(ctx.lineWidth/1.6) //Thinner\n\t\t}\n\t\telse {\n        \tctx.lineWidth = Math.ceil(ctx.lineWidth*1.1) //Slightly Wider\n\t\t}\n    }\n    else {\n        width = width*0.93\n    }\n\n\t//Eliminate invalid values so that they can't cause issues in calculating min/max.\n    var calcvertical = []\n    for (var i = 0;i<vertical.length;i++) {\n        if (!isNaN(Number(vertical[i])) && (vertical[i]) !== \"\") {\n            calcvertical.push(vertical[i])\n        }\n    }\n\t\n\tlet verticalMax = Math.max(...calcvertical)\n\tlet verticalMin = Math.min(...calcvertical)\n\tlet horizontalMax = Math.max(...horizontal)\n\tlet horizontalMin = Math.min(...horizontal)\n\t\n    var vscale = verticalMax - verticalMin\n    var hscale = horizontalMax - horizontalMin\n    vscale = height/vscale\n    hscale = width/hscale\n    var voffset = verticalMin\n    var hoffset = horizontalMin\n\n    hoffset -= (Math.max(...horizontal) - Math.min(...horizontal))*0.07\n\n    var px = Math.floor(((canvas.width)*0.07)/2.6)\n    ctx.font = (px + 'px serif')\n    if (color.length === 9) {\n        color = color.slice(0,7)\n    }\n    ctx.fillStyle = color\n    ctx.strokeStyle = color\n\n    if (graphtype === 3) {\n        var grd = ctx.createLinearGradient(0, 0, 0, height);\n        grd.addColorStop(0, color);\n        grd.addColorStop(1, endcolor);\n        ctx.strokeStyle = grd;\n        ctx.fillStyle = grd;\n    }\n\n    if (numplace === 0 || numplace === undefined) {\n        var start = 1\n        }\n    else {\n        var start = canvas.width-(canvas.width*0.07)\n        }\n        ctx.font = \"bold \" + ctx.font\n    for(var i = 1;i<11;i++) {\n        var Text = ((Math.max(...calcvertical) - Math.min(...calcvertical))*((i-1)/10))+Math.min(...calcvertical)\n\n        let precision = Math.max(0, 3-String(Math.round(Text)).length)\n\n        Text = Number(Text.toFixed(precision))\n\n        ctx.fillText(Text, start, (height*(11-i))/10-5);\n    }\n\n    //Top one\n    Text = ((Math.max(...calcvertical) - Math.min(...calcvertical))*((i-1)/10))+Math.min(...calcvertical)\n\n    let precision = Math.max(0, 3-String(Math.round(Text)).length)\n\n    Text = Number(Text.toFixed(precision))\n\n    ctx.fillText(Text, start, 27);\n\n\n\n\n\n    var px = Math.floor(((canvas.width)*0.07)/2.4)\n    ctx.font = (px + 'px serif')\n    if (color.length === 9) {\n        color = color.slice(0,7)\n    }\n\n\n    if (!window.darkMode) {\n        ctx.fillStyle = \"black\"\n    }\n    else {\n        //Dark Mode\n        ctx.fillStyle = \"#eeeeee\"\n    }\n\n\n\n    function formatDate(date) {\n        var time = String(date.getHours())\n\n        if (date.getHours() < 10) {\n            time = \"0\" + time\n        }\n        time += \":\"\n        if (date.getMinutes() < 10) {\n            time += \"0\" + date.getMinutes()\n        }\n        else {\n            time += date.getMinutes()\n        }\n        time += \" \" + (date.getMonth()+1) + \"/\" + date.getDate() + \"/\" +date.getFullYear()\n        return time\n    }\n\n    var time1 = new Date(timeframe[0])\n    var time2 = new Date(timeframe[timeframe.length - 1])\n    var time3 = new Date(((time2-time1)/2)+time1.getTime())\n\n    var starttime = formatDate(time1)\n    var endtime = formatDate(time2)\n    var midtime = formatDate(time3)\n\n    ctx.fillText(starttime, 10, (canvas.height*(11/12))-(canvas.height*0.06)-12)\n\n    ctx.textAlign = \"end\";\n    ctx.fillText(endtime, canvas.width-10, (canvas.height*(11/12))-(canvas.height*0.06)-12)\n\n    ctx.textAlign = \"center\";\n    ctx.fillText(midtime, canvas.width/2, (canvas.height*(11/12))-(canvas.height*0.06)-12)\n\n    ctx.textAlign = \"start\";\n\n\tctx.lineJoin = \"round\" //Round out edges, and make sure that lines don't spike off the canvas (miter is a really bad default)\n\n    var px = Math.floor(((canvas.width)*0.07)/2.0)\n    ctx.font = (px + 'px serif')\n    ctx.fillStyle = color\n    //We need to create a gradient for just the text \"Water Temperature (F)\"\n    if (graphtype === 3) {\n        var grd = ctx.createLinearGradient(0, height, 200, height);\n        grd.addColorStop(0, color);\n        grd.addColorStop(1, endcolor);\n        ctx.strokeStyle = grd;\n        ctx.fillStyle = grd;\n    }\n\n    if (graphtype === 2) {\n        if (numplace === 0 || numplace === undefined) {\n            ctx.fillText(\"Flow (Cubic Feet/Second)\", start+5, (canvas.height*(11/12)));\n        }\n        else {\n            ctx.textAlign = \"right\";\n            ctx.fillText(\"Gauge Height (Feet)\", start-5, (canvas.height*(11/12)));\n            ctx.textAlign = \"start\";\n        }\n    }\n    else if (graphtype === 3) {\n        ctx.fillText(\"Water Temperature (°F)\", start+5, (canvas.height*(11/12)));\n    }\n    else {\n        if (GraphName === \"Precipitation\") {\n            ctx.fillText(\"Precipitation (Inches)\", start+5, (canvas.height*(11/12)));\n            var fulldayprecip = 0\n            var halfdayprecip = 0\n            var preciplist = vertical.slice(-96)\n            var preciplist = preciplist.map(Number)\n            //convert strings to numbers\n            preciplist.forEach(function(value){\n                fulldayprecip += value\n            })\n            preciplist = preciplist.slice(-48)\n            preciplist.forEach(function(value){\n                halfdayprecip += value\n            })\n\n            fulldayprecip = fulldayprecip.toFixed(2)\n            halfdayprecip = halfdayprecip.toFixed(2)\n\n            ctx.fillText(\"Last 24 Hours: \" + fulldayprecip + \"\\\"\", canvas.width-770, (canvas.height*(11/12)));\n            ctx.fillText(\"Last 12 Hours: \" + halfdayprecip + \"\\\"\", canvas.width-400, (canvas.height*(11/12)));\n        }\n        else if (GraphName === \"cfs\") {\n            ctx.fillText(\"Flow (Cubic Feet/Second)\", start+5, (canvas.height*(11/12)));\n        }\n        else if (GraphName === \"height\") {\n            ctx.fillText(\"Gauge Height (Feet)\", start+5, (canvas.height*(11/12)));\n        }\n        else {\n            ctx.fillText(\"Labeling Error...\", start+5, (canvas.height*(11/12)));\n        }\n    }\n\n    //set it back\n    if (graphtype === 3) {\n        //The area that actually has the graph is the top 80% height wise\n        var grd = ctx.createLinearGradient(0, 0, 0, canvas.height*0.8);\n        grd.addColorStop(0, color);\n        grd.addColorStop(1, endcolor);\n        ctx.strokeStyle = grd;\n        ctx.fillStyle = grd;\n    }\n\n    if (!window.darkMode) {\n        ctx.fillStyle = \"black\"\n    }\n    else {\n        //Dark Mode\n        ctx.fillStyle = \"#eeeeee\"\n    }\n\n    ctx.textAlign = \"center\";\n\t//Fill the name of the gauge. Max 1150px.\n    ctx.fillText(Source, canvas.width/2 , canvas.height-10, 1150);\n    ctx.textAlign = \"start\";\n\n    function H(Value) {\n        return Math.round((Value-hoffset)*hscale)\n    }\n\n    function V(Value) {\n        return Math.round(height-((Value-voffset)*vscale))\n    }\n\n\n    for (var p = 0;p<Math.min(vertical.length, horizontal.length);p++) {\n        if (!isNaN(Number(vertical[p])) && vertical[p] !== \"\") {\n            ctx.moveTo(H(horizontal[p]), V(vertical[p]))\n            break;\n        }\n    }\n\n\n    var valid = 1\n\n    for (var i = p;i<Math.min(vertical.length, horizontal.length);i++) {\n        if (!isNaN(Number(vertical[i])) && vertical[i] !== \"\") {\n            if (valid === 1) {\n                ctx.lineTo(H(horizontal[i]), V(vertical[i]))\n            }\n            else {\n                ctx.moveTo(H(horizontal[i]), V(vertical[i])+10)\n                ctx.lineTo(H(horizontal[i]), V(vertical[i]))\n                valid = 1\n            }\n        }\n        else {\n            valid = 0\n        }\n    }\n\n\n    ctx.stroke();\n    ctx.beginPath()\n\n    ctx.lineWidth = Math.ceil(ctx.lineWidth/10)\n\n    if (!window.darkMode) {\n        ctx.strokeStyle = \"000000AA\"\n    }\n    else {\n        //Dark Mode\n        ctx.strokeStyle = \"#ccccccAA\"\n    }\n\n    for (var i = 1;i<11;i++) {\n        ctx.moveTo(0, height*(11-i)/10)\n        ctx.lineTo(canvas.width, height*(11-i)/10)\n    }\n    ctx.stroke()\n}\n\n\nmodule.exports = {\n    addLine\n}\n","function NewSpan(Text) {\n    let span = document.createElement(\"span\")\n    span.className = \"riverspan\"\n    span.innerHTML = Text\n    return span\n}\n\nfunction addSorting(span, type, reverse = false) {\n    span.addEventListener(\"click\", function() {\n        let query = window.getAdvancedSearchParameters()\n        if (query.sort.query === type) {\n            query.sort.reverse = !query.sort.reverse\n            reverse = query.sort.reverse\n        }\n        else {\n            query.sort.query = type\n            query.sort.reverse = reverse\n            reverse = !reverse\n        }\n        window.setMenuFromSearch(query)\n        NewList()\n    })\n}\n\n\nfunction TopBar() {\n    this.create = function() {\n        let button = document.createElement(\"button\")\n        button.id = \"topbar\"\n        button.className = \"riverbutton\"\n\n        if (!!window.MSInputMethodContext && !!document.documentMode) {\n            //IE 11 will not dispatch click events to the Name, Skill, Rating, etc, spans, but rather to their parent.\n            //Time to do an evil workaround...\n            button.onclick = function(e) {\n                var x = e.clientX, y = e.clientY,\n                    elementMouseIsOver = document.elementFromPoint(x, y);\n\n                elementMouseIsOver.click()\n            }\n        }\n\n        let span = NewSpan(\"River⇅\")\n        addSorting(span, \"alphabetical\", true) //Starts sorted alphabetically, a-z. Pass 1 so the first sort reverses that.\n        button.appendChild(span)\n\n        button.appendChild(NewSpan(\"Section\"))\n\n        function addSkillSpan() {\n            span = NewSpan(\"Skill⇅\")\n            span.classList.add(\"skillspan\")\n            addSorting(span, \"skill\", false)\n            button.appendChild(span)\n        }\n\n        function addClassSpan() {\n            span = NewSpan(\"Class\")\n            span.classList.add(\"classspan\")\n            button.appendChild(span)\n        }\n\n        if (localStorage.getItem(\"classOrSkill\") === \"class\") {\n            addClassSpan() //Add the class span first so it shows up on small screens.\n            addSkillSpan()\n        }\n        else {\n            addSkillSpan() //Add the skill span first so it shows up on small screens.\n            addClassSpan()\n        }\n\n\t    span = NewSpan(\"Rating⇅\")\n        addSorting(span, \"rating\", false) //We want greatest first, not least first, on the first sort. Pass 0 to not reverse\n        button.appendChild(span)\n\n        span = NewSpan(\"Flow/Trend⇅\")\n        addSorting(span, \"running\", false) //Show highest flow first, instead of lowest. Pass 0 to not reverse.\n        button.appendChild(span)\n\n        return button\n    }\n\n    this.delete = function() {\n        let Node = document.getElementById(\"topbar\")\n        if (Node) {\n            Node.parentNode.removeChild(Node)\n        }\n    }\n}\n\n\nmodule.exports = {\n    TopBar\n}\n","let {calculateColor, calculateDirection, calculateRelativeFlow} = require(\"./flowInfoCalculations.js\")\n\nconst {skillTranslations} = require(\"./skillTranslations.js\")\nconst {riverbuttonClicked} = require(\"./riverExpansion.js\")\n\nfunction addHandlers(button, locate) {\n\t\tlet river = ItemHolder[locate]\n\n\t\tbutton.addEventListener(\"mouseover\", function(){\n\t\t\t\t\tbutton.style.backgroundColor =  calculateColor(river, {highlighted: true})\n\t\t\t\t})\n\n\t\t\t\tbutton.addEventListener(\"mouseout\", function(){\n\t\t\t\t\tbutton.style.backgroundColor = calculateColor(river)\n\t\t\t\t})\n\n\t\t\t\twindow.addEventListener(\"colorSchemeChanged\", function() {\n\t\t\t\t\tif (river.dam) {\n\t\t\t\t\t\tbutton.style.background = createStripes()\n\t\t\t\t\t}\n\t\t\t\t\tbutton.style.backgroundColor = calculateColor(river)\n\t\t\t\t})\n\n\n\tbutton.addEventListener(\"click\", function() {\n\t\triverbuttonClicked(button, river)\n\t})\n}\n\n\nfunction createStripes(newColor = window.darkMode ? \"rgba(256,256,256,0.25)\":\"rgba(170,170,170,0.33)\", oldColor = \"rgba(0,0,0,0)\") {\n\t\t//If the river has a dam, stripe it.\n\n\t\tlet background = \"linear-gradient(150deg\"\n\n\t\tfor (let i=0;i<19;i++) {\n\t\t\tbackground += \", \"\n\t\t\tbackground += i % 3 ? oldColor:newColor\n\t\t}\n\n        background += \")\"\n\n\t\treturn background\n}\n\n\n\nfunction AddSpan(text, elem, className) {\n\tlet span = document.createElement(\"span\")\n    span.innerHTML = text\n    span.className = \"riverspan\"\n\tif (className) {span.classList.add(className)}\n\telem.appendChild(span)\n    return span\n}\n\n\n\t\t\tfunction addClassSpan(river, button) {\n\t\t\t\tlet riverclass = river.class || \"\"\n\t\t\t\t//Put a zero width space between a parantheses and the preceeding character so that the browser knows it can split the line.\n\t\t\t\t//This helps make the browser correctly wrap class instead of overflowing.\n\t\t\t\triverclass = riverclass.split(\"(\").join(\"\\u200b(\")\n\t\t\t\tAddSpan(riverclass, button).classList.add(\"classspan\")\n\t\t\t}\n\n\t\t\tfunction addSkillSpan(river, button) {\n\t\t\t\t//Check if the user has disabled tooltips.\n\t\t\t\tif (localStorage.getItem(\"skillTooltips\") === \"false\") {\n\t\t\t\t\tAddSpan(river.skill, button).classList.add(\"skillspan\")\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet skillSpan = document.createElement(\"span\")\n\t\t\t\t\tskillSpan.className = \"riverspan skillspan tooltip\"\n\n\t\t\t\t\tlet tooltip = document.createElement(\"div\")\n\t\t\t\t\ttooltip.innerHTML = river.skill\n\t\t\t\t\ttooltip.className = \"tooltip\"\n\n\t\t\t\t\tlet tooltiptext = document.createElement(\"span\")\n\t\t\t\t\ttooltiptext.innerHTML = skillTranslations[river.skill]\n\t\t\t\t\ttooltiptext.className = \"tooltiptext\"\n\n\t\t\t\t\tskillSpan.style.borderBottom = \"none\"\n\n\t\t\t\t\ttooltip.appendChild(tooltiptext)\n\t\t\t\t\tskillSpan.appendChild(tooltip)\n\t\t\t\t\tbutton.appendChild(skillSpan)\n\t\t\t\t}\n\t\t\t}\n\n\nfunction addRatingSpan(river, button) {\n            //Star images for rating\n            if (river.rating === \"Error\") {\n\t\t\t\t//Make sure that the span is the correct width, but inivisble.\n                let span = AddSpan(\"☆☆☆☆☆\", button)\n\t\t\t\tspan.style.opacity = \"0.2\"\n\t\t\t\tspan.classList.add(\"emptyStars\")\n            }\n            else {\n\t\t\t\tlet span = document.createElement(\"span\")\n                span.className = \"riverspan\"\n\n\t\t\t\t//We will use one empty span to set the width of the containing span.\n\t\t\t\t//We will use another empty span to overlay the full stars\n                let spacer = document.createElement(\"span\")\n\t\t\t\tspacer.className = \"emptyStars\"\n\t\t\t\tspacer.innerHTML = \"☆☆☆☆☆\"\n\t\t\t\tspacer.style.opacity = \"0\"\n                span.appendChild(spacer)\n\n                let empty = document.createElement(\"span\")\n\t\t\t\tempty.className = \"emptyStars\"\n\t\t\t\tempty.innerHTML = \"☆☆☆☆☆\"\n\t\t\t\tempty.style.position = \"absolute\"\n\t\t\t\tempty.style.zIndex = \"1\" //Overlay the full stars\n                span.appendChild(empty)\n\n\t\t\t\tlet full = document.createElement(\"span\")\n\t\t\t\tfull.className = \"fullStars\"\n\t\t\t\tfull.innerHTML = \"★★★★★\"\n\t\t\t\tfull.style.width = river.rating*20 + \"%\"\n                span.appendChild(full)\n\n                button.appendChild(span)\n            }\n}\n\n\nfunction addFlowData(river) {\n\ttry {\n\t\t\t//Load this.flow from usgsarray.\n\t\t\tlet data = usgsarray[river.usgs]\n\t\t\tif (data) {\n\t            let cfs = data.cfs\n\t            let feet = data.feet\n\n\t            let latestCfs, latestFeet;\n\t\t\t\ttry {\n\t\t\t\t\tif (cfs) {\n\t\t\t\t\t\tlet latestCFSReading = cfs[cfs.length - 1]\n\t\t\t\t\t\tif (latestCFSReading) {\n\t\t\t\t\t\t\t//Equipment malfunctions, conversion table changes/creation, backwater at measurement site, etc, will result in USGS intentionally making values null.\n\t\t\t\t\t\t\tlatestCfs = latestCFSReading.value\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch(e) {console.error(e);console.log(river.usgs)}\n\t\t\t\ttry {\n\t\t\t\t\tif (feet) {\n\t\t\t\t\t\tlet latestFeetReading = feet[feet.length - 1]\n\t\t\t\t\t\tif (latestFeetReading) {\n\t\t\t\t\t\t\t//Though issues are alot rarer than with CFS, equipment malfunctions can cause this to be null. \n\t\t\t\t\t\t\tlatestFeet = latestFeetReading.value\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch(e) {console.error(e);console.log(river.usgs)}\n\n\t            river.feet = latestFeet\n\t            river.cfs = latestCfs\n\n\t            if (latestCfs && latestFeet) {\n\t                river.flow = latestCfs + \"cfs \" + latestFeet + \"ft\"\n\t            }\n\t            else if (latestCfs) {\n\t                river.flow = cfs[cfs.length - 1].value + \" cfs\"\n\t            }\n\t            else if (latestFeet) {\n\t                river.flow = feet[feet.length - 1].value + \" ft\"\n\t            }\n\t\t\t}\n\t}\n\tcatch(e) {console.error(e)}\n}\n\n\n\nfunction addFlowSpan(river, button) {\n\t\t\t//If there is already a flowspan, get rid of it.\n\t\t\tlet current = button.querySelector(\".flowspan\")\n\t\t\tif (current) {current.remove()}\n\t\n            if (river.flow) {\n\t\t\t\tlet value = river.flow + (calculateDirection(river.usgs) || \"\")\n\t\t\t\t//If the user has color blind mode enabled, add river.running to one digit onto the flow data.\n\t\t\t\tif (localStorage.getItem(\"colorBlindMode\") === \"true\" && calculateColor(river) && river.running !== undefined) {\n\t\t\t\t\tvalue += \"(\" + Math.round(river.running*10)/10 + \")\"\n\t\t\t\t}\n\t\t\t\t//TODO: Show the text \"Dam\" if there is plenty of space to do so. Consider using a smaller icon instead.\n\t\t\t\t//value += this.dam ? \"Dam\" : \"\"\n                AddSpan(value, button, \"flowspan\")\n            }\n\t\t\telse if (river.dam) {AddSpan(\"Dam\", button, \"flowspan\")}\n}\n\n\nfunction addFlowStyling(river, button) {\n\t\tif (river.dam) {\n\t\t\tbutton.style.background = createStripes()\n\t\t}\n\t\tif (calculateColor(river)) {\n\t\t\tbutton.style.backgroundColor = calculateColor(river)\n\t\t}\n\t\telse if (river.dam) {\n\t\t\t//Background color gets overwrote by background. This class uses !important to prevent that.\n\t\t\tbutton.classList.add(\"riverbuttonDam\")\n\t\t}\n}\n\n\nfunction River(locate, event) {\n\n    //Copies name, section, skill, rating, writeup, tags, usgs, plat,plon, tlat,tlon, aw, dam\n    Object.assign(this, event)\n    //tags and writeup need to be a string. They can't be undefined\n    this.tags = this.tags || \"\"\n    this.writeup = this.writeup || \"\"\n    //Convert the numeric value to the filename\n\n\tthis.rating = parseFloat(this.rating)\n\t//Consider allowing ratings less than 1.\n    if (this.rating < 1 || this.rating > 5 || isNaN(this.rating) || this.rating === undefined) {\n        this.rating = \"Error\"\n    }\n\n    this.skill = this.skill || \"?\"\n\n    this.base = \"b\" + locate\n    this.expanded = 0\n    this.index = locate\n\t\n\tif (this.relatedusgs) {\n\t\ttry {\n\t\t\tthis.relatedusgs = JSON.parse(this.relatedusgs)\n\t\t}\n\t\tcatch(e) {console.warn(e);}\n\t}\n\n    this.create = function (forceregenerate) {\n        //Only create the button once - It's about 3 times faster.\n        if (!this.finished || forceregenerate) {\n\n            var button = document.createElement(\"button\")\n            button.id = this.base + 1\n\t\t\t\n\t\t\tif (!this.id) {\n\t\t\t\tbutton.classList.add(\"riverbuttonGauge\")\n\t\t\t}\t\t\t\n\n            AddSpan(this.name, button)\n            AddSpan(this.section, button)\n\n\n\t\t\tif (localStorage.getItem(\"classOrSkill\") === \"class\") {\n\t\t\t\t//Put class first so that it will show up if screen small.\n\t\t\t\taddClassSpan(this, button)\n\t\t\t\taddSkillSpan(this, button)\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//Put skill first so that it will show up if screen small.\n\t\t\t\taddSkillSpan(this, button)\n\t\t\t\taddClassSpan(this, button)\n\t\t\t}\n\n            //Star images for rating\n            addRatingSpan(this, button)\n\n\t\t\taddFlowData(this)\n\n\t\t\taddFlowSpan(this, button)\n\n\n            button.classList.add(\"riverbutton\")\n            //Add the click handler\n            addHandlers(button, locate)\n\n            //Store button for reuse later\n            this.finished = button\n\n        }\n\n\t\tthis.updateExpansion = function() {\n\t\t\t//Do not use \"this\". If called from event listener on window it will fail.\n\t\t\tlet river = ItemHolder[locate]\n\t\t\t//Make sure it is expanded. Otherwise, there is no need to update the expansion - and\n\t\t\t//updating the expansion can take a lot of time, expecially if it causes reflow.\n\t\t\tif (river.expanded) {\n\t\t\t\triver.finished.click()\n\t\t\t\triver.finished.click()\n\t\t\t}\n\t\t}\n\n\t\twindow.addEventListener(\"colorSchemeChanged\", this.updateExpansion) //TODO: This event listener should not remain forever.\n\n\t\taddFlowStyling(this, this.finished)\n\n        //Return finished button\n        return this.finished\n\n    }\n\t\n\t\n\tthis.updateFlowData = function() {\n\t\taddFlowData(this) //Update the flow information on the river object.\n\t\tif (this.finished) {\n\t\t\taddFlowSpan(this, this.finished) //Update the flowspan if it exists.\n\t\t\taddFlowStyling(this, this.finished) //And make sure colors, etc, are updated.\n\t\t}\n\t\telse {\n\t\t\tcalculateRelativeFlow(this) //Adds the lowflow, relative flow, and other values to the object.\n\t\t}\n\t\tif (this.updateExpansion) {\n\t\t\tthis.updateExpansion()\n\t\t}\n\t}\n\n\tthis.updateFlowData()\n\n    this.delete = function () {\n        let river = ItemHolder[locate]\n        function Remove(Code) {\n            let ToDelete = document.getElementById(river.base + Code)\n            if (ToDelete) {\n                ToDelete.parentNode.removeChild(ToDelete)\n            }\n        }\n\n        //Reset background color\n        let reset = document.getElementById(river.base + 1)\n        if (reset) {\n            reset.style.backgroundColor = \"\"\n        }\n\n        Remove(2)\n        Remove(1)\n\n    }\n}\n\nmodule.exports = {\n\tRiver\n}\n","const {skillTranslations} = require(\"./skillTranslations.js\")    \nconst addGraphs = require(\"./addGraphs.js\").addGraphs\nconst {calculateAge} = require(\"./flowInfoCalculations.js\")\nconst {createDeviceNotificationsWidget, createEmailNotificationsWidget} = require(\"./notificationsWidget.js\")\n\n//Code that runs when the button is clicked\n    function riverbuttonClicked(button, river) {\n        if (river.expanded === 0) {\n            river.expanded = 1\n            createExpansion(button, river)\n        }\n        else {\n\t\t\t//Delete the expansion.\n            river.expanded = 0\n            var elem = document.getElementById(river.base + 2)\n            if (elem) {\n                elem.parentNode.removeChild(elem)\n            }\n\n        }\n    }\n\n\n\n\nfunction createExpansion(button, river) {\n            var div = document.createElement(\"div\")\n\n\t\t\tdiv.innerHTML = \"\"\n\n\t\t\t//Only show a link if river.dam is a link. This allows rivers to be marked as dams and explainations to be put in the writeups.\n\t\t\tif (river.dam && river.dam.trim().startsWith(\"http\")) {\n                //Adding to div.innerHTML works, but logs CSP errors\n                let link = document.createElement(\"a\")\n                link.target = \"_blank\"\n                link.rel = \"noopener\"\n                link.href = river.dam\n                link.innerHTML = \"This river has a dam. View information.\"\n                div.appendChild(link)\n\t\t\t\tdiv.appendChild(document.createElement(\"br\"))\n\t\t\t\tdiv.appendChild(document.createElement(\"br\"))\n            }\n\n\t\t\tdiv.innerHTML += river.writeup + \"<br><br>\"\n\n\t\t\tif (river.class && river.skill) {\n\t\t\t\tdiv.innerHTML += \"This river is class \" + river.class + \" and is rated \" + skillTranslations[river.skill] + \".<br>\"\n\t\t\t}\n\t\t\telse if (river.class) {\n\t\t\t\tdiv.innerHTML += \"This river is rated class \" + river.class + \".<br>\"\n\t\t\t}\n\t\t\telse if (river.skill) {\n\t\t\t\tdiv.innerHTML += \"This river is rated \" + skillTranslations[river.skill] + \".<br>\"\n\t\t\t}\n\n\n\t\t\tif (river.averagegradient) {div.innerHTML += \"Average gradient: \" + river.averagegradient + \" feet per mile.<br>\"}\n\t\t\tif (river.maxgradient) {div.innerHTML += \"Maximum gradient: \" + river.maxgradient + \" feet per mile.<br>\"}\n\n\t\t\tif (river.plat && river.plon) {\n                div.innerHTML += \"Put-In GPS Coordinates: \" + river.plat + \", \" + river.plon + \"<br>\"\n            }\n\n            if (river.tlat && river.tlon) {\n                div.innerHTML += \"Take-Out GPS Coordinates: \" + river.tlat + \", \" + river.tlon + \"<br>\"\n            }\n\n\t\t\t//Show the user the values being used for determining relative flow.\n            let values = [\"minrun\", \"lowflow\", \"midflow\", \"highflow\", \"maxrun\"]\n\t\t\tlet flowRange = document.createElement(\"p\")\n\t\t\tflowRange.innerHTML = \"\"\n            for (let i=0;i<values.length;i++) {\n                let name = values[i]\n                if (river[name] && !isNaN(parseFloat(river[name]))) {\n                    flowRange.innerHTML += name + \":\" + river[name] + \" \"\n                }\n            }\n\t\t\tif (flowRange.innerHTML !== \"\") {div.appendChild(flowRange)}\n\n\t\t\tif (river.id) {\n\t\t\t\t//All rivers have an ID. All gauges do not.\n\t\t\t\tdiv.appendChild(document.createElement(\"br\"))\n\t\t\t\tlet link = document.createElement(\"a\")\n\t\t\t\tlink.target = \"_blank\"\n\t\t\t\tlink.rel = \"noopener\"\n\t\t\t\tlink.href = \"https://docs.google.com/document/d/\" + river.id\n\t\t\t\tlink.innerHTML = \"Edit this river\"\n\t\t\t\tdiv.appendChild(link)\n\t\t\t}\n            if (river.aw) {\n                div.appendChild(document.createElement(\"br\"))\n                let link = document.createElement(\"a\")\n                link.target = \"_blank\"\n                link.rel = \"noopener\"\n                link.href = \"https://www.americanwhitewater.org/content/River/detail/id/\" + river.aw\n                link.innerHTML = \"View this river on American Whitewater\"\n                div.appendChild(link)\n            }\n\n\n            if (river.usgs) {\n                //Adding to div.innerHTML works, but logs CSP errors\n                div.appendChild(document.createElement(\"br\"))\n                let link = document.createElement(\"a\")\n                link.target = \"_blank\"\n                link.rel = \"noopener\"\n                link.href = \"https://waterdata.usgs.gov/nwis/uv?site_no=\" + river.usgs\n                link.innerHTML = \"View flow information on USGS\"\n                div.appendChild(link)\n            }\n\n\t\t\tdiv.appendChild(document.createElement(\"br\"))\n\t\t\tlet disclaimer = document.createElement(\"a\")\n\t\t\tdisclaimer.href = \"legal/DISCLAIMER.html\"\n\t\t\tdisclaimer.target = \"_blank\"\n\t\t\tdisclaimer.innerHTML = \"Rivers.run Content and Flow Disclaimer\"\n\t\t\tdiv.appendChild(disclaimer)\n\n\t\t\tlet addedUSGSDisclaimer = false\n\t\t\tlet addedVirtualGaugeDisclaimer = false\n\n\t\t\t//Auxillary function\n\t\t\t//TODO: Show button to see code used by virtual gauge.\n\t\t\tfunction addUSGSGraphs(usgsID, relatedGauge) {\n\n\t\t\t\tlet data = self.usgsarray[usgsID]\n\t\t\t\tif (!data) {console.log(\"No flow data for \" + usgsID); return;}\n\t\t\t\t\n\t\t\t\t//Alert the user if the data is (at least 2 hours) old\n\t\t\t\tlet dataAge\n                try {\n                    dataAge = calculateAge(usgsID)\n                }\n                catch(e) {\n                    console.error(e)\n                    dataAge = null\n                }\n                let maxAge = 1000*60*60*2\n                let oldDataWarning;\n\t\t\t\tif (dataAge > maxAge) {\n\t\t\t\t\toldDataWarning = document.createElement(\"p\")\n\t\t\t\t\toldDataWarning.innerHTML = \"Check the dates! This river data is more than \" + Math.floor(dataAge/1000/60/60) + \" hours old!\"\n\n\t\t\t\t\toldDataWarning.className = \"oldDataWarning\"\n\t\t\t\t\tdiv.appendChild(oldDataWarning)\n\t\t\t\t}\n\n\t\t\t\tfunction addDisclaimer(text) {\n\t\t\t\t\tlet disclaimer = document.createElement(\"p\")\n\t\t\t\t\tdisclaimer.style.fontWeight = \"bold\"\n\t\t\t\t\tdisclaimer.style.textAlign = \"center\"\n\t\t\t\t\tdisclaimer.innerHTML = text\n\t\t\t\t\treturn div.appendChild(disclaimer)\n\t\t\t\t}\n\n\t\t\t\tif (relatedGauge) {\n\t\t\t\t\t//Space out the gauges.\n\t\t\t\t\tdiv.appendChild(document.createElement(\"br\"))\n\t\t\t\t\tdiv.appendChild(document.createElement(\"br\"))\n\t\t\t\t\tdiv.appendChild(document.createElement(\"br\"))\n\t\t\t\t}\n\t\t\t\tdiv.appendChild(createDeviceNotificationsWidget(river, usgsID))\n\t\t\t\tdiv.appendChild(createEmailNotificationsWidget(river, usgsID))\n\n\t\t\t\tconsole.time(\"Add Graphs\")\n\t\t\t\tlet graphs = addGraphs(data)\n\t\t\t\tdiv.appendChild(graphs)\n\t\t\t\t\n\t\t\t\t//Fetch comprehensive flow data, then update the graphs.\n\t\t\t\t//TODO: Add XMLHttpRequest fallback.\n\t\t\t\tif (!usgsarray[usgsID].full) {\n\t\t\t\t\tfetch(\"gaugeReadings/\" + usgsID).then((response) => {\n\t\t\t\t\t\tresponse.json().then((newData) => {\n\t\t\t\t\t\t\tusgsarray[usgsID] = newData\n\t\t\t\t\t\t\tusgsarray[usgsID].full = true\n\t\t\t\t\t\t\tgraphs.replaceWith(addGraphs(self.usgsarray[usgsID]))\n\t\t\t\t\t\t\tif (oldDataWarning) {oldDataWarning.remove()}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconsole.timeEnd(\"Add Graphs\")\n\t\t\t}\n\n            //USGS data may not have loaded yet\n\t\t\tif (self.usgsarray) {\n\t\t\t\triver.usgs && addUSGSGraphs(river.usgs)\n\t\t\t\tif (river.relatedusgs) {\n\t\t\t\t\tfor (let i=0;i<river.relatedusgs.length;i++) {\n\t\t\t\t\t\tif (river.relatedusgs[i] === \"\") {continue;}\n\t\t\t\t\t\taddUSGSGraphs(river.relatedusgs[i], true)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n            div.style.padding = \"6px\"\n            div.id = river.base + 2\n            button.parentNode.insertBefore(div, button.nextSibling)\n}\n\n\n\t\n\tmodule.exports = {\n\t\triverbuttonClicked\n\t}","\n//Auxillary Function\n//Creates the canvas used by each of the graphs\nfunction createcanvas() {\n    let canvas = document.createElement(\"canvas\")\n    canvas.width = 1200\n    canvas.height = 800\n\n\tcanvas.className = \"graph\"\n\t\n    //Make sure the background is not transparent\n    let ctx = canvas.getContext(\"2d\");\n    if (!window.darkMode) {\n        ctx.fillStyle = \"white\";\n    }\n    else {\n        //Dark Mode\n        ctx.fillStyle = \"black\"\n    }\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    return canvas\n}\n\n\n//Auxillary Function\nfunction toparts(arr) {\n    let values = []\n    let timestamps = []\n\n    for (let i=0;i<arr.length;i++) {\n\t\tif (!arr[i]) {continue;}\n        let obj = arr[i]\n        values.push(obj.value)\n        timestamps.push(obj.dateTime)\n    }\n\n    return {values:values,timestamps:timestamps}\n}\n\n//In dark mode, blue doesn't show up well enough, so different colors are used.\n\n\nfunction getFlowGraph(cfs, height, data) {\n    //Make sure we actually have some data, and don't create an empty graph\n    if (!(cfs || height)) {return}\n\n    let canvas = createcanvas()\n    //Time to create a dual lined graph!\n    if (cfs && height) {\n\t\tlet parts = toparts(cfs)\n        addLine(\"cfs\", parts.timestamps, data.name, canvas, 0, parts.values, \"#00CCFF\", 2)\n        parts = toparts(height)\n        addLine(\"height\", parts.timestamps, data.name, canvas, 0, parts.values, window.darkMode?\"#7175ff\":\"#0000FF\", 2, 1)\n\t}\n    //We won't have both cfs and height. Draw a single line graph for whichever we have.\n    else if (cfs) {\n        let parts = toparts(cfs)\n        addLine(\"cfs\", parts.timestamps, data.name, canvas, 0, parts.values, \"#00CCFF\")\n    }\n    else {\n        let parts = toparts(height)\n        addLine(\"height\", parts.timestamps, data.name, canvas, 0, parts.values,  window.darkMode?\"#7175ff\":\"blue\")\n    }\n\n\treturn canvas\n}\n\n\nfunction getTempGraph(temp, data) {\n    if (temp) {\n        let canvas = createcanvas()\n\n        let parts = toparts(temp)\n        addLine(\"\", parts.timestamps, data.name, canvas, 0, parts.values, \"red\", 3, window.darkMode?\"#00AAFF\":\"blue\")\n\n \t\treturn canvas\n    }\n}\n\n\n\nfunction getPrecipGraph(precip, data) {\n    if (precip) {\n        let canvas = createcanvas()\n\n        let parts = toparts(precip)\n        addLine(\"Precipitation\", parts.timestamps, data.name, canvas, 0, parts.values, \"#0099FF\")\n\n\t\treturn canvas\n    }\n}\n\nfunction getButton(text, className) {\n\tlet button = document.createElement(\"button\")\n\tbutton.innerHTML = text\n\tbutton.className = className\n\n\treturn button\n}\n\nfunction addGraphs(data) {\n\n    //The graphing is wrapped in a try-catch statement because USGS often supplies invalid data\n    //for a specific river due to gauge problems.\n    //Each canvas is wrapped individually because sometimes only some graphs have invalid data\n\n\tlet container = document.createElement(\"div\")\n\tlet graphs = []\n\tcontainer.style.textAlign = \"center\"\n\t\n\t//TODO: We only need to synchronusly render the first graph, as only one will be displayed at once. \n\t//This will lead to speed increases when .riverbuttons are clicked.\n    try {\n        if (!localStorage.getItem(\"colorBlindMode\")) {\n            let flowGraph = getFlowGraph(data.cfs, data.feet, data)\n\t\t\tif (flowGraph) {\n\t\t\t\tgraphs.push({\n\t\t\t\t\ttext: \"Flow Info\",\n\t\t\t\t\tclassName: \"flowButton\",\n\t\t\t\t\telem: flowGraph\n\t\t\t\t})\n\t\t\t}\n        }\n        else {\n\t\t\ttry {\n\t\t\t\t//Use one graph for cfs and one for feet if the user is in color blind mode.\n\t\t\t\tlet cfsGraph = getFlowGraph(data.cfs, undefined, data)\n\t\t\t\tif (cfsGraph) {\n\t\t\t\t\tgraphs.push({\n\t\t\t\t\t\ttext: \"Flow In CFS\",\n\t\t\t\t\t\tclassName: \"flowButton\",\n\t\t\t\t\t\telem: cfsGraph\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tconsole.error(e)\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tlet feetGraph = getFlowGraph(undefined, data.feet, data)\n\t\t\t\tif (feetGraph) {\n\t\t\t\t\tgraphs.push({\n\t\t\t\t\t\ttext: \"Flow In Feet\",\n\t\t\t\t\t\tclassName: \"flowButton\",\n\t\t\t\t\t\telem: feetGraph\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tconsole.error(e)\n\t\t\t}\n        }\n    }\n    catch(e){console.error(\"Error creating flow graph: \" + e)}\n\n    try {\n        let tempGraph = getTempGraph(data.temp, data)\n\t\tif (tempGraph) {\n\t\t\tgraphs.push({\n\t\t\t\ttext: \"Temperature\",\n\t\t\t\tclassName: \"tempButton\",\n\t\t\t\telem: tempGraph\n\t\t\t})\n\t\t}\n    }\n    catch(e){console.error(\"Error creating temperature graph: \" + e)}\n\n    try {\n        let precipGraph = getPrecipGraph(data.precip, data)\n\t\tif (precipGraph) {\n\t\t\tgraphs.push({\n\t\t\t\ttext: \"Precipitation\",\n\t\t\t\tclassName: \"precipButton\",\n\t\t\t\telem: precipGraph\n\t\t\t})\n\t\t}\n    }\n    catch(e){console.error(\"Error creating precipitation graph: \" + e)}\n\t\n\ttry {\n\t\tlet buttonContainer = document.createElement(\"div\")\n\t\tif (graphs.length > 1) {\n\t\t\t//We don't need to show selection buttons if we only have one graph.\n\t\t\tcontainer.appendChild(buttonContainer)\n\t\t}\t\n\t\t//Add the starting graph - the flow graph.\n\t\tcontainer.appendChild(graphs[0].elem)\n\n\t\tgraphs.forEach((data) => {\n\t\t\tlet button = getButton(data.text, data.className)\t   \n\t\t\tbutton.addEventListener(\"click\", function() {\n\t\t\t\tlet oldGraph = container.querySelector(\".graph\")\n\t\t\t\toldGraph.replaceWith(data.elem)\n\t\t\t})\n\t\t\tbuttonContainer.appendChild(button)\n\t\t})\n\n\t\treturn container\n\t}\n\tcatch(e) {\n\t\tconsole.error(e)\n\t}\n}\n\n\nmodule.exports = {\n    addGraphs\n}\n","\t\t\tfunction createDeviceNotificationsWidget(river, usgsID) {\n\t\t\t\tlet data = {\n\t\t\t\t\tid: river.id,\n\t\t\t\t\tname: river.name\n\t\t\t\t}\n\n\t\t\t\tlet existing;\n\t\t\t\tlet current;\n\n\t\t\t\tfunction resyncData() {\n\t\t\t\t\texisting = JSON.parse(localStorage.getItem(\"flownotifications\") || \"{}\")\n\t\t\t\t\tcurrent = existing[usgsID]\n\t\t\t\t\tif (current) {\n\t\t\t\t\t\tcurrent = current[river.id]\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresyncData()\n\n\t\t\t\tconsole.log(current)\n\n\t\t\t\t//Container for the river alert creator.\n\t\t\t\tlet container = document.createElement(\"div\")\n\t\t\t\tcontainer.className = \"notificationsContainer\"\n\n\t\t\t\t//Describe what this does, and alert the user if their browser is unsupported.\n\t\t\t\tlet description = document.createElement(\"p\")\n\t\t\t\tcontainer.appendChild(description)\n\t\t\t\tdescription.innerHTML = \"Receive notifications for \" + ((usgsarray[usgsID] && usgsarray[usgsID].name) || \"this river\") + \":<br>\"\n\t\t\t\tdescription.style.marginBottom = \"0.5em\" //Make the description closer to what it is describing...\n\n\t\t\t\tif (!(\"PushManager\" in window) || !(\"Notification\" in window) || !(\"serviceWorker\" in navigator)) {\n\t\t\t\t\tdescription.innerHTML += \"Your browser does not support flow alerts. (iOS users - blame apply for abusive app store monopoly behavior). You may however utilize email notifications.\"\n\t\t\t\t\treturn description;\n\t\t\t\t}\n\n\t\t\t\tlet low = document.createElement(\"input\")\n\t\t\t\tlow.className = \"minimum\"\n\t\t\t\tlow.type = \"number\"\n\t\t\t\tlow.placeholder = \"Minimum\"\n\t\t\t\tlow.value = (current && current.minimum) || \"\"\n\n\t\t\t\tlet high = document.createElement(\"input\")\n\t\t\t\thigh.className = \"maximum\"\n\t\t\t\thigh.placeholder = \"Maximum\"\n\t\t\t\thigh.value = (current && current.maximum) || \"\"\n\t\t\t\thigh.type = \"number\"\n\n\t\t\t\tlet units = document.createElement(\"select\")\n\n\t\t\t\tlet blank = document.createElement(\"option\")\n\t\t\t\tblank.selected = true\n\t\t\t\tblank.disabled = true\n\t\t\t\tblank.value = \"\"\n\t\t\t\tblank.innerHTML = \"Units\"\n\t\t\t\tunits.appendChild(blank)\n\n\t\t\t\tlet feet = document.createElement(\"option\")\n\t\t\t\tfeet.value = \"ft\"\n\t\t\t\tfeet.innerHTML = \"Feet\"\n\t\t\t\tfeet.pattern = \"[0-9]\"\n\t\t\t\tunits.appendChild(feet)\n\n\t\t\t\tlet cfs = document.createElement(\"option\")\n\t\t\t\tcfs.value = \"cfs\"\n\t\t\t\tcfs.innerHTML = \"CFS\"\n\t\t\t\tcfs.pattern = \"[0-9]\"\n\t\t\t\tunits.appendChild(cfs)\n\n\t\t\t\tunits.value = (current && current.units) || \"\"\n\n\t\t\t\tlet save = document.createElement(\"button\")\n\t\t\t\tsave.innerHTML = \"Save\"\n\n\t\t\t\tsave.addEventListener(\"click\", function() {\n\t\t\t        let lowValue = parseFloat(low.value)\n\t\t\t\t\tlet highValue = parseFloat(high.value)\n\n\t\t\t\t\tdata.minimum = lowValue\n\t\t\t\t\tdata.maximum = highValue\n\t\t\t\t\tdata.units = units.value\n\n\t\t\t\t\tif (isNaN(lowValue)) {\n\t\t\t\t\t\talert(\"Minimum must be a number. Ex: 2.37, 3000\")\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isNaN(highValue)) {\n\t\t\t\t\t\talert(\"Maximum must be a number. Ex: 2.37, 3000\")\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!units.value) {\n\t\t\t\t\t\talert(\"Please specify whether feet or cfs should be used.\")\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tresyncData() //Make sure we don't restore rivers that were removed while this river was open.\n\n\t\t\t\t\texisting[usgsID] = existing[usgsID] || {}\n\t\t\t\t\texisting[usgsID][river.id] = data\n\n\t\t\t\t\tlocalStorage.setItem(\"flownotifications\", JSON.stringify(existing))\n\n\t\t\t\t\twindow.open(\"notifications.html\")\n\t\t\t\t})\n\n\t\t\t\tlet manage = document.createElement(\"button\")\n\t\t\t\tmanage.innerHTML = \"Manage Notifications\"\n\t\t\t\tmanage.addEventListener(\"click\", function() {\n\t\t\t\t\twindow.open(\"notifications.html\")\n\t\t\t\t})\n\n\t\t\t\tcontainer.appendChild(low)\n\t\t\t\tcontainer.appendChild(high)\n\t\t\t\tcontainer.appendChild(units)\n\t\t\t\tcontainer.appendChild(save)\n\t\t\t\tcontainer.appendChild(manage)\n\t\t\t\treturn container\n\t\t\t}\n\t\t\t\n\n\n\n//TODO: How should email notificatios get handled?\t\t\t\n\n//Proposal: Seperate widget. Save button may want to actually save instead of opening the window.\n//TODO: Remove a lot of duplication\n\n\t\t\tfunction createEmailNotificationsWidget(river, usgsID) {\n\t\t\t\tlet data = {\n\t\t\t\t\tid: river.id,\n\t\t\t\t\tname: river.name\n\t\t\t\t}\n\n\t\t\t\t//Container for the river alert creator.\n\t\t\t\tlet container = document.createElement(\"div\")\n\t\t\t\tcontainer.className = \"notificationsContainer\"\n\n\t\t\t\t//Describe what this does, and alert the user if their browser is unsupported.\n\t\t\t\tlet description = document.createElement(\"p\")\n\t\t\t\tcontainer.appendChild(description)\n\t\t\t\tdescription.innerHTML = \"Receive Emails for \" + ((usgsarray[usgsID] && usgsarray[usgsID].name) || \"this river\") + \":<br>\"\n\t\t\t\tdescription.style.marginBottom = \"0.5em\" //Make the description closer to what it is describing...\n\n\t\t\t\tlet low = document.createElement(\"input\")\n\t\t\t\tlow.className = \"minimum\"\n\t\t\t\tlow.type = \"number\"\n\t\t\t\tlow.placeholder = \"Minimum\"\n\n\t\t\t\tlet high = document.createElement(\"input\")\n\t\t\t\thigh.className = \"maximum\"\n\t\t\t\thigh.placeholder = \"Maximum\"\n\t\t\t\thigh.type = \"number\"\n\n\t\t\t\tlet units = document.createElement(\"select\")\n\n\t\t\t\tlet blank = document.createElement(\"option\")\n\t\t\t\tblank.selected = true\n\t\t\t\tblank.disabled = true\n\t\t\t\tblank.value = \"\"\n\t\t\t\tblank.innerHTML = \"Units\"\n\t\t\t\tunits.appendChild(blank)\n\n\t\t\t\tlet feet = document.createElement(\"option\")\n\t\t\t\tfeet.value = \"ft\"\n\t\t\t\tfeet.innerHTML = \"Feet\"\n\t\t\t\tfeet.pattern = \"[0-9]\"\n\t\t\t\tunits.appendChild(feet)\n\n\t\t\t\tlet cfs = document.createElement(\"option\")\n\t\t\t\tcfs.value = \"cfs\"\n\t\t\t\tcfs.innerHTML = \"CFS\"\n\t\t\t\tcfs.pattern = \"[0-9]\"\n\t\t\t\tunits.appendChild(cfs)\n\n\t\t\t\tlet save = document.createElement(\"button\")\n\t\t\t\tsave.innerHTML = \"Save\"\n\n\t\t\t\tsave.addEventListener(\"click\", function() {\n\t\t\t\t\tlet addparameters = {}\n\t\t\t\t\t\n\t\t\t        let lowValue = parseFloat(low.value)\n\t\t\t\t\tlet highValue = parseFloat(high.value)\n\n\t\t\t\t\tdata.minimum = lowValue\n\t\t\t\t\tdata.maximum = highValue\n\t\t\t\t\tdata.units = units.value\n\n\t\t\t\t\tif (isNaN(lowValue)) {\n\t\t\t\t\t\talert(\"Minimum must be a number. Ex: 2.37, 3000\")\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isNaN(highValue)) {\n\t\t\t\t\t\talert(\"Maximum must be a number. Ex: 2.37, 3000\")\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!units.value) {\n\t\t\t\t\t\talert(\"Please specify whether feet or cfs should be used.\")\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\taddparameters[usgsID] = {}\n\t\t\t\t\taddparameters[usgsID][river.id] = data\n\n\t\t\t\t\tlocalStorage.setItem(\"addparameters\", JSON.stringify(addparameters))\n\n\t\t\t\t\twindow.open(\"emailnotifications.html\")\n\t\t\t\t})\n\n\t\t\t\tlet manage = document.createElement(\"button\")\n\t\t\t\tmanage.innerHTML = \"Manage Notifications\"\n\t\t\t\tmanage.addEventListener(\"click\", function() {\n\t\t\t\t\twindow.open(\"emailnotifications.html\")\n\t\t\t\t})\n\n\t\t\t\tcontainer.appendChild(low)\n\t\t\t\tcontainer.appendChild(high)\n\t\t\t\tcontainer.appendChild(units)\n\t\t\t\tcontainer.appendChild(save)\n\t\t\t\tcontainer.appendChild(manage)\n\t\t\t\treturn container\n\t\t\t}\n\t\t\t\n\n\t\t\tmodule.exports = {\n\t\t\t\tcreateDeviceNotificationsWidget,\n\t\t\t\tcreateEmailNotificationsWidget\n\t\t\t}","((typeof window !== \"undefined\" && window) || globalThis).toDecimalDegrees = function(coord) {\n\tif (!isNaN(Number(coord))) {\n\t\treturn Number(coord) //Coordinate is already in decimal form.\n\t}\n\t\n\tif (typeof coord !== \"string\") {\n\t\treturn undefined;\n\t}\n\n\tlet parts = coord.split(/[^.\\w]+/) //Split on non-alphanumeric characters that aren't decimals.\n\tconsole.log(parts)\n\tlet direction;\n\tfor (let i=0;i<parts.length;i++) {\n\t\tif ([\"N\",\"S\",\"E\",\"W\"].includes(parts[i])) {\n\t\t\tdirection = parts[i];\n\t\t\tparts.splice(i, 1)\n\t\t\tbreak;\n\t\t}\n\t}\n\tconsole.log(parts)\n\tlet degrees = Number(parts[0])\n\tlet minutes = Number(parts[1]) || 0\n\tlet seconds = Number(parts[2]) || 0\n\n\tminutes += seconds/60\n\tdegrees += minutes/60\n\n\tif (isNaN(Number(degrees))) {throw \"Coordinate \" + coord + \" could not be processed.\"}\n\n\tif (direction === \"S\" || direction === \"W\") {degrees = -degrees}\n\t\n\treturn degrees\n}\n\n\n\nlet sortUtils = require(\"./sort.js\")\n\n\nfunction normalSearch(list, query) {\n    query = query.toLowerCase().trim()\n\t\n\tif (query === \"\") {return sortUtils.sort(\"alphabetical\", list)} //Don't search for an empty query.\n\t\n\t//The first buckets are better matches than later ones.\n    let buckets = [[],[],[],[],[],[],[]]\n\tlet bucket2 = [] //Bucket 2 - index 1 in buckets - is special.\n\t\n\t//corejs regexp polyfill is taking 40 times longer splitting with the regex /[ ,]+/ than using .split(\",\").join(\" \").split(\" \")\n\t//A bug will need to be filed - this level of performance is simply unacceptable.\n\t//See if this polyfill can be removed.\n\t\t\n\tlist.forEach(function(event) {\n\t\t\n\t\tlet lowerCaseName = event.name.toLowerCase()\n\t\tlet lowerCaseSection = event.section.toLowerCase()\n\t\t\n\t\t\n\t\t//First bucket\n\t\tlet nameExactMatch = (lowerCaseName === query)\n\t\tlet sectionExactMatch = (lowerCaseSection === query)\n\t\t\t\t\n\t\tif (nameExactMatch || sectionExactMatch) {\n\t\t\tbuckets[0].push(event)\n\t\t\treturn\n\t\t}\n\n\t\t\n\t\t//Second Bucket\n\t\t//This bucket is build to handle searches across name and section - such as \"Lower Haw\"\n\t\t//As long as name and section contain all space seperated parts of the query, this bucket can be used.\n\t\t\n\t\t//Split on spaces and commas. This handles things like \"Lower, Lower Yough\"\n\t\tlet words = query.split(\",\").join(\" \").split(\" \")\n\t\t\n\t\tif (words.length > 1) {\n\t\t\tlet passes = words.every((word) => {\n\t\t\t\treturn (lowerCaseName.indexOf(word) !== -1) || (lowerCaseSection.indexOf(word) !== -1)\n\t\t\t})\n\n\t\t\tlet nameWords = lowerCaseName.split(\",\").join(\" \").split(\" \")\n\t\t\tlet sectionWords = lowerCaseSection.split(\",\").join(\" \").split(\" \")\n\t\t\t//For the search \"Lower Haw\", the Lower Haw should show up higher than Lower Hawksbill Creek.\n\t\t\t//This works by assigning higher relevance to exact matches, then startsWith, than contains.\n\t\t\tlet bonus = words.reduce((bonus, word) => {\n\t\t\t\t//TODO: Consider making .includes() and startsWith worth 7.\n\t\t\t\tif (nameWords.includes(word)) {\n\t\t\t\t\tdelete nameWords[nameWords.indexOf(word)] //Remove the word so that is can't be matched twice (ex. text lower, search lower lower)\n\t\t\t\t\treturn bonus + 10\n\t\t\t\t}\n\t\t\t\telse if (sectionWords.includes(word)) {\n\t\t\t\t\tdelete sectionWords[sectionWords.indexOf(word)]\n\t\t\t\t\treturn bonus + 10\n\t\t\t\t}\n\t\t\t\telse if (lowerCaseName.startsWith(word) || lowerCaseSection.startsWith(word)) {\n\t\t\t\t\treturn bonus + 6\n\t\t\t\t}\n\t\t\t\t//If name or section contains word.\n\t\t\t\telse if ((lowerCaseName.indexOf(word) !== -1) || (lowerCaseSection.indexOf(word) !== -1)) {\n\t\t\t\t\treturn bonus + 2\n\t\t\t\t}\n\t\t\t\treturn bonus\n\t\t\t}, 0)\n\n\t\t\t//If the total number of words in the query are equal to the number of words in name and section (so all words matched), add one point.\n\t\t\t//This makes things like the Lower Yough show up above the Lower Lower Yough for the search Lower Yough\n\t\t\tif (bonus && nameWords.length + sectionWords.length === words.length) {bonus += 1}\n\n\t\t\tif (passes) {\n\t\t\t\tbucket2[bonus] = bucket2[bonus] || []\n\t\t\t\tbucket2[bonus].push(event)\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Thrid bucket\n\t\tlet nameMatches = lowerCaseName.startsWith(query)\n\t\tlet sectionMatches = lowerCaseSection.startsWith(query)\n\t\t\n\t\tif (nameMatches || sectionMatches) {\n\t\t\tbuckets[2].push(event)\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//Fourth bucket\n\t\tlet tagsContains = (event.tags.toLowerCase().indexOf(query) !== -1)\n\t\t\n\t\tif (tagsContains) {\n\t\t\tbuckets[3].push(event)\n\t\t\treturn;\n\t\t}\n\n\t\t\n\t\t//Fifth bucket\n\t\tlet nameContains = (lowerCaseName.indexOf(query) !== -1)\n\t\t\n\t\tif (nameContains) {\n\t\t\tbuckets[4].push(event)\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//Sixth Bucket\n\t\tlet sectionContains = (lowerCaseSection.indexOf(query) !== -1)\n\n\t\tif (sectionContains) {\n\t\t\tbuckets[5].push(event)\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//Final Bucket\n\t\tlet writeupContains = (event.writeup.toLowerCase().indexOf(query) !== -1)\n\t\t\n\t\tif (writeupContains) {buckets[6].push(event)}\n    })\n\t\n\t//Sort each match level alphabetically by river name\n\tbuckets = buckets.map((bucket) => {return sortUtils.sort(\"alphabetical\", bucket)})\n\t\t\n\tbucket2.reverse() //Highest relevance ones come first in the second bucket.\n\t\n\tfor (let i=0;i<bucket2.length;i++) {\n\t\tlet subbucket = bucket2[i]\n\t\tif (subbucket) {\n\t\t\t//Sort the subbucket alphabetically.\n\t\t\tsubbucket = sortUtils.sort(\"alphabetical\", subbucket)\n\t\t\tsubbucket.forEach((value) => {\n\t\t\t\tbuckets[1].push(value)\n\t\t\t})\n\t\t}\n\t}\n\t\n    let result = [].concat(...buckets)\n\tresult.buckets = buckets\n\treturn result\n}\n\n\nfunction stringQuery(parameters) {\n\n    let content = parameters.content\n    let query = parameters.query\n\n    //Ignore case by default\n    if (!parameters.matchCase) {\n        content = content.toLowerCase()\n        query = query.toLowerCase()\n    }\n\n    if (parameters.type === \"contains\") {\n        return content.includes(query)\n    }\n    else if (parameters.type === \"matches\") {\n        return content === query\n    }\n    else {\n        throw \"Unknown Search Type \" + parameters.type\n    }\n}\n\n\nfunction stringFilter(list, property, parameters) {\n    //Filter out the elements that fail the test\n    //Since we may be deleting elements in the list, items will be skipped if we use array.length\n    for (let item in list) {\n        parameters.content = list[item][property]\n        let passes = stringQuery(parameters)\n        if (!passes) {\n            //Remove the item if it fails\n            delete list[item]\n        }\n    }\n    delete parameters.content //Cleanup\n    return list\n}\n\n\n\nfunction skillToNumber(skill) {\n    let value\n    switch (skill) {\n        case \"FW\":\n            value = 1;\n            break;\n        case \"B\":\n            value = 2;\n            break;\n        case \"N\":\n            value = 3;\n            break;\n        case \"LI\":\n            value = 4;\n            break;\n        case \"I\":\n            value = 5;\n            break;\n        case \"HI\":\n            value = 6;\n            break;\n        case \"A\":\n            value = 7;\n            break;\n        case \"E\":\n            value = 8;\n    }\n    return value\n}\n\n\n\n\n\n\nfunction skillFilter(list, parameters) {\n\n    let query = parameters.query\n\n    let min = Math.min(query[0], query[1])\n    let max = Math.max(query[0], query[1])\n\n    for (let item in list) {\n\n        let passes = false;\n        let skill = skillToNumber(list[item].skill)\n\n        if (min <= skill && skill <= max) {\n            passes = true\n        }\n\n        if (!passes && !(parameters.includeUnknown && skill === undefined)) {\n            //Remove the item if it fails\n            delete list[item]\n        }\n    }\n\n\treturn list\n}\n\n\n\n\n\n\n\n\n\nlet calculateDistance = require(\"./distance.js\").lambert //Lambert formula\n\nfunction locationFilter(list, parameters) {\n\n    let maxDistance = Number(parameters.distance)\n    let lat1 = toDecimalDegrees(parameters.lat)\n    let lon1 = toDecimalDegrees(parameters.lon)\n\t\t\n    if (!(maxDistance && lat1 && lon1)) {\n        //Cancel the search.\n        //Technically we could be missing part of 1 coordinate, sometimes both, and eliminate some rivers, however this goes against\n\t\t//the purpose of location sorting - to find rivers, not eliminate them (we want all rivers to have full coordinates)\n        return list\n    }\n\n    for (let item in list) {\n        let river = list[item]\n\n\t\tlet lat2 = toDecimalDegrees(river.plat) || toDecimalDegrees(river.tlat) || toDecimalDegrees(river.hidlat)\n    \tlet lon2 = toDecimalDegrees(river.plon) || toDecimalDegrees(river.tlon) || toDecimalDegrees(river.hidlon)\n\t\n\t\tlet distance = calculateDistance(lat1, lon1, lat2, lon2)\n        \t\t\n        let passes = (distance < maxDistance) || parameters.includeUnknown //Follow parameters.includeUnknown unless the river has been eliminated on distance.\n\n        if (!passes) {\n            //Remove the item if it does not pass the test.\n            delete list[item]\n        }\n    }\n    return list\n\n}\n\n\nfunction flowFilter(list, parameters) {\n\n\tlet query = parameters.query\n\tlet min = query[0]\n\tlet max = query[1]\n\n    //Alert user when an actually useful flow search can't be performed.\n    if (window.usgsDataAge === undefined && (max !== 4 || min !== 0)) {\n        alert(\"Searching based on flow requires flow data, which has not fully loaded. The flow search is not being performed.\")\n        return list\n    }\n\n\tfor (let item in list) {\n\t\tlet river = list[item]\n\n        if (river.dam && parameters.includeDams) {\n            //Do nothing if the river is a dam and dams are to be included.\n        }\n        //If we do not know flow status, follow parameters.includeUnknown\n        else if (river.running === undefined) {\n            if (!parameters.includeUnknown) {\n                delete list[item]\n            }\n        }\n        //If we do know flow status, filter based on the flow.\n\t\telse if (river.running < min || river.running > max) {\n\t\t\tdelete list[item]\n\t\t}\n\t}\n\treturn list\n}\n\nfunction tagsFilter(list, parameters) {\n\tlet query = parameters.query\n\tlet components = parameters.query.split(\" \").join(\"\").split(\",\")\n\n\tfor (let item in list) {\n\t\tlet river = list[item]\n\n\t\tfor (let i=0;i<components.length;i++) {\n\t\t\tif (typeof river.tags !== \"string\" || !river.tags.toLowerCase().includes(components[i].toLowerCase())) {\n\t\t\t\tdelete list[item]\n\t\t\t}\n\t\t}\n\t}\n\treturn list\n}\n\n\nfunction ratingFilter(list, parameters) {\n\n\tlet query = parameters.query\n\tlet min = query[0]\n\tlet max = query[1]\n\n\tfor (let item in list) {\n\t\tlet river = list[item]\n\n        if (river.rating === \"Error\" && !parameters.includeUnknown) {\n\t\t\tdelete list[item]\n\t\t}\n\t\telse if (Number(river.rating) < min || Number(river.rating) > max) {\n\t\t\tdelete list[item]\n\t\t}\n\t}\n\treturn list\n}\n\n\n//Query is in form of:\n//{\n//  name: {\n//    type: \"matches\",\n//    query: \"potomac\"\n//},\n//section: {\n//    type: \"contains\",\n//    query: \"something\"\n//  },\n// skill: {\n//\ttype:\"\" //easier harder exactly from\n//\tvalue: 3 //An array of 2 if from\n//from is inclusive (From medium to hard)\n//},\n//location:{\n//\tdistance: 100 //Maximum distance in miles\n//\tlat: 78//Starting latitude\n//\tlon:-56 //Starting londitude\n//\tincludeUnknown: false //Do not eliminate if location not known\n//}\n//}\n\n\n\nfunction IDSearch(list, query) {\n\tif (query === undefined) {return list}\n\n\tlet components = query.split(\",\")\n\n\tif (components.length === 0) {return list} //No IDs to search for.\n\n\tfor (let item in list) {\n\t\tlet river = list[item]\n\t\tif (!components.includes(river.id)) {\n\t\t\tdelete list[item]\n\t\t}\n\t}\n\treturn list\n}\n\n\n\n//This doesn't work for difficulty and rating - no greater than or equal to.\n//That needs to be added\nfunction advancedSearch(list, query) {\n    //List is the array of river elements that we are searching\n    //Query is the search parameters\n    console.log(recursiveAssign({},query))\n\n    for (let property in query) {\n        //Iterate through each part of the query\n\n        let parameters = query[property]\n\n        if ([\"name\", \"section\", \"writeup\"].includes(property)) {\n            list = stringFilter(list, property, parameters)\n        }\n        else if (property === \"normalSearch\" || property === \"sort\") {\n            //These are delt with later\n        }\n        else if (property === \"skill\") {\n            list = skillFilter(list, parameters)\n        }\n        else if (property === \"rating\") {\n            list = ratingFilter(list, parameters)\n        }\n        else if (property === \"location\") {\n            list = locationFilter(list, parameters)\n        }\n        else if (property === \"flow\") {\n            list = flowFilter(list, parameters)\n        }\n\t\telse if (property === \"tags\") {\n\t\t\tlist = tagsFilter(list, parameters)\n\t\t}\n\t\telse if (property === \"id\") {\n\t\t\tlist = IDSearch(list, parameters)\n\t\t}\n        else {\n            alert(\"Unable to search based on \" + property)\n        }\n    }\n\n\tlist = list.filter(item => item !== undefined)\n\tconsole.time(\"normalSearch\")\n    if (query[\"normalSearch\"] !== undefined) {list = normalSearch(list, query[\"normalSearch\"])}\n\tconsole.timeEnd(\"normalSearch\")\n    if (query[\"sort\"]) {list = sortUtils.sort(query[\"sort\"].query, list, query[\"sort\"].reverse)}\n\t\n\tlet gaugesList = []\n\tif (list.buckets) {\n\t\tgaugesList = gaugesList.concat(...list.buckets.slice(0,3)) //Buckets 0, 1 and 2\n\t}\n\telse {\n\t\tgaugesList = list\n\t}\n\n\tlet riverAmount = gaugesList.reduce((total, value) => {return total + (value.id !== undefined ? 1:0)}, 0) //Number of good river matches.\n\t\n\tif (list.buckets) {\n\t\tlet additionalRivers = ([].concat(...list.buckets.slice(3))).reduce((total, value) => {return total + (value.id !== undefined ? 1:0)}, 0)\n\t\tlist.gaugeAmount = list.length - riverAmount - additionalRivers\n\t\tlist.riverAmount = riverAmount + additionalRivers\n\t\t\n\t}\n\telse {\n\t\tlist.gaugeAmount = list.length - riverAmount\n\t\tlist.riverAmount = riverAmount\n\t}\n\t\n\tif (riverAmount === 0) {list.useGauges = true}\n\telse {list.useGauges = false}\n\t\t\n    return list\n}\n\n\n\n\n\n\nmodule.exports = {\n    normalSearch,\n    advancedSearch\n}\n","function lambert(lat1, lon1, lat2, lon2) {\n\t//Should be accurate to <100 meters\n\n\t//Parameters from WGS-84\n\tlet radius = 3963.1905919430524 //Equatorial radius in miles\n\tlet flattening = 0.0033528106647474805\n\n\tlat1 = lat1 / 180 * Math.PI\n\tlon1 = lon1 / 180 * Math.PI\n\tlat2 = lat2 / 180 * Math.PI\n\tlon2 = lon2 / 180 * Math.PI\n\n\tlet ratio = 1-flattening\n\n\tlet reducedLat1 = Math.atan(ratio*Math.tan(lat1))\n\tlet reducedLat2 = Math.atan(ratio*Math.tan(lat2))\n\n    //Spherical Law of Cosines\n\tlet angle = Math.acos(Math.sin(reducedLat1) * Math.sin(reducedLat2) + Math.cos(reducedLat1) * Math.cos(reducedLat2) * Math.cos(lon2-lon1))\n\n\tlet p = (reducedLat1+reducedLat2)/2\n\tlet q = (reducedLat2-reducedLat1)/2\n\tlet x = (angle - Math.sin(angle)) * (((Math.sin(p)**2)*(Math.cos(q)**2))/(Math.cos(angle/2)**2))\n\tlet y = (angle + Math.sin(angle)) *(((Math.cos(p)**2)*(Math.sin(q)**2))/(Math.sin(angle/2)**2))\n\treturn radius*(angle-((flattening/2)*(x+y)))\n}\n\n\nmodule.exports = {\n  lambert\n}\n","//Used to determine where search parameters match the default.\n//This is rather ineffecient, because it has to be called twice. A new system (probably using object.keys()) should be used instead.\n\tfunction _objectsEqual(obj1, obj2) {\n\t\t//Tells if all properties, recursively, match.\n\n\t\t//Avoid property of undefined issues.\n\t\tif (obj1 === undefined || obj2 === undefined) {\n\t\t\tif (obj1 !== obj2) {return false}\n\t\t\treturn true\n\t\t}\n\n\t\tfor (let property in obj1) {\n\t\t\tif (typeof obj1[property] === \"object\") {\n\t\t\t\tif (!objectsEqual(obj1[property], obj2[property])) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (obj1[property] !== obj2[property]) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tfunction objectsEqual(obj1, obj2) {\n\t\treturn _objectsEqual(obj1, obj2) && _objectsEqual(obj2, obj1)\n\t}\n\nfunction deleteMatchingPortions(obj1, obj2) {\n\t//Deletes all properties on obj1, recursively, that are identical to obj2\n\tif (!obj1 || !obj2) {\n\t\treturn obj1\n\t}\n\tfor (let property in obj1) {\n\t\t\tif (typeof obj1[property] === \"object\") {\n\t\t\t\tif (objectsEqual(obj1[property], obj2[property])) {\n\t\t\t\t\t//If the objects are equal, delete them.\n\t\t\t\t\tdelete obj1[property]\n\t\t\t\t}\n\t\t\t\t//With an array, positional data can be totally lost by this. Do not delete portions of arrays.\n\t\t\t\telse if (!(obj1[property] instanceof Array)) {\n\t\t\t\t\t//Delete the portions of the objects that match.\n\t\t\t\t\tdeleteMatchingPortions(obj1[property], obj2[property])\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (obj1[property] === obj2[property]) {\n\t\t\t\t\tdelete obj1[property]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\treturn obj1\n}\n\nfunction recursiveAssign(target, ...objects) {\n\tif (objects.length > 1) {\n\t\tfor (let i=0;i<objects.length;i++) {\n\t\t\trecursiveAssign(target, objects[i])\n\t\t}\n\t}\n\telse {\n\t\tlet object = objects[0]\n\t\tfor (let property in object) {\n\t\t\tif (typeof object[property] === \"object\") {\n\t\t\t\tif (typeof target[property] !== \"object\") {\n\t\t\t\t\t//Fixing needed!!!\n\t\t\t\t\t//Right here we need to clone, recursively, object[property]\n\t\t\t\t\t//Object.assign() is only one level deep.\n\t\t\t\t\ttarget[property] = recursiveAssign({}, object[property])\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//Setting target[property] to the result probably isn't needed.\n\t\t\t\t\ttarget[property] = recursiveAssign(target[property], object[property])\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttarget[property] = object[property]\n\t\t\t}\n\t\t}\n\t}\n\treturn target\n}\n\nmodule.exports = {\n\trecursiveAssign,\n\tdeleteMatchingPortions,\n\tobjectsEqual\n}\n","function highlightFailingFields(parameters) {\n\t//Input checking. Highlight fields that fail in red.\n\tif (!toDecimalDegrees(parameters.location.lat) && (toDecimalDegrees(parameters.location.lon) || Number(parameters.location.distance) > 0)) {\n\t\tdocument.getElementById(\"latitudeQuery\").style.border = \"3px solid red\"\n\t}\n\telse {\n\t\tdocument.getElementById(\"latitudeQuery\").style.border = \"\"\n\t}\n\t\n\tif (!toDecimalDegrees(parameters.location.lon) && (toDecimalDegrees(parameters.location.lat) || Number(parameters.location.distance) > 0)) {\n\t\tdocument.getElementById(\"longitudeQuery\").style.border = \"3px solid red\"\n\t}\n\telse {\n\t\tdocument.getElementById(\"longitudeQuery\").style.border = \"\"\n\t}\n\t\n\tif (!(Number(parameters.location.distance) > 0) && (toDecimalDegrees(parameters.location.lat) || toDecimalDegrees(parameters.location.lon))) {\n\t\tdocument.getElementById(\"distanceQuery\").style.border = \"3px solid red\"\n\t}\n\telse {\n\t\tdocument.getElementById(\"distanceQuery\").style.border = \"\"\n\t}\n}\n\n\n//Generate advanced search parameters from menu\nwindow.getAdvancedSearchParameters = function(filter) {\n\t//filter: Filter out parameters that match defaults.\n\tlet parameters = {}\n\n\tparameters.name = {\n\t\ttype: document.getElementById(\"nameType\").value,\n\t\tquery: document.getElementById(\"nameQuery\").value\n\t}\n\n\tparameters.section  = {\n\t\ttype: document.getElementById(\"sectionType\").value,\n\t\tquery: document.getElementById(\"sectionQuery\").value\n\t}\n\n\tparameters.writeup = {\n\t\ttype: document.getElementById(\"writeupType\").value,\n\t\tquery: document.getElementById(\"writeupQuery\").value\n\t}\n\n\tparameters.location = {\n\t\tlat: document.getElementById(\"latitudeQuery\").value,\n\t\tlon: document.getElementById(\"longitudeQuery\").value,\n\t\tdistance: document.getElementById(\"distanceQuery\").value,\n\t\tincludeUnknown: document.getElementById(\"includeUnknownLocation\").checked\n\t}\n\n\t//ID search is currently hidden from the user.\n\tparameters.id = window.IDSearchParameters\n\n\tparameters.tags = {\n\t\tquery: document.getElementById(\"tagsQuery\").value\n\t}\n\n\n\tparameters.skill = {\n\t\ttype: \"from\",\n\t\tquery: [\n\t\t\tNumber(document.getElementById(\"skillQuery1\").value),\n\t\t\tNumber(document.getElementById(\"skillQuery2\").value)\n\t\t],\n\t\tincludeUnknown: document.getElementById(\"includeUnknownSkill\").checked\n\t}\n\n\tparameters.normalSearch = document.getElementById(\"searchbox\").value\n\n\tparameters.flow = {\n\t\ttype: \"from\",\n\t\tquery: [\n\t\t\tNumber(document.getElementById(\"flowQuery1\").value),\n\t\t\tNumber(document.getElementById(\"flowQuery2\").value)\n\t\t],\n\t\tincludeDams: document.getElementById(\"includeDams\").checked,\n\t\tincludeUnknown: document.getElementById(\"includeUnknownFlow\").checked\n\t}\n\t\n\tparameters.rating = {\n\t\ttype: \"from\",\n\t\tquery: [\n\t\t\tNumber(document.getElementById(\"ratingQuery1\").value),\n\t\t\tNumber(document.getElementById(\"ratingQuery2\").value)\n\t\t],\n\t\tincludeUnknown: document.getElementById(\"includeUnknownRating\").checked\n\t}\n\t\n\tparameters.sort = {\n\t\tquery: document.getElementById(\"sortQuery\").value,\n\t\treverse: document.getElementById(\"sortQueryReverse\").checked\n\t}\n\t\n\thighlightFailingFields(parameters)\n\n\treturn parameters\n}\n\n\nwindow.setMenuFromSearch = function(query) {\n\tquery = recursiveAssign(window.getAdvancedSearchParameters(), query)\n\n\tdocument.getElementById(\"nameType\").value = query.name.type\n\tdocument.getElementById(\"nameQuery\").value = query.name.query\n\tdocument.getElementById(\"sectionType\").value = query.section.type\n\tdocument.getElementById(\"sectionQuery\").value = query.section.query\n\tdocument.getElementById(\"writeupType\").value = query.writeup.type\n\tdocument.getElementById(\"writeupQuery\").value = query.writeup.query\n\n\tdocument.getElementById(\"distanceQuery\").value = query.location.distance\n\tdocument.getElementById(\"includeUnknownLocation\").checked = query.location.includeUnknown\n\tdocument.getElementById(\"latitudeQuery\").value = query.location.lat\n\tdocument.getElementById(\"longitudeQuery\").value = query.location.lon\n\n\tdocument.getElementById(\"tagsQuery\").value = query.tags.query\n\n\tdocument.getElementById(\"skillQuery1\").value = query.skill.query[0]\n\tdocument.getElementById(\"skillQuery2\").value = query.skill.query[1]\n\tdocument.getElementById(\"includeUnknownSkill\").checked = query.skill.includeUnknown\n\t\n\tdocument.getElementById(\"ratingQuery1\").value = query.rating.query[0]\n\tdocument.getElementById(\"ratingQuery2\").value = query.rating.query[1]\n\tdocument.getElementById(\"includeUnknownRating\").checked = query.rating.includeUnknown\n\n\tdocument.getElementById(\"searchbox\").value = query.normalSearch\n\tdocument.getElementById(\"normalSearchBoxOnAdvancedSearch\").value = query.normalSearch\n\n\tdocument.getElementById(\"flowQuery1\").value = query.flow.query[0]\n\tdocument.getElementById(\"flowQuery2\").value = query.flow.query[1]\n\tdocument.getElementById(\"includeDams\").checked = query.flow.includeDams\n\tdocument.getElementById(\"includeUnknownFlow\").checked = query.flow.includeUnknown\n\n\tdocument.getElementById(\"sortQuery\").value = query.sort.query\n\tdocument.getElementById(\"sortQueryReverse\").checked = query.sort.reverse\n\t//ID search is currently hidden from the user.\n\twindow.IDSearchParameters = query.id\n\t\n\thighlightFailingFields(query)\n}\n\n\n//Previously I just used the initial state of the HTML fields to calculate defaultAdvancedSearchParameters (call getAdvancedSearchParameters at page load) - \n//However Chrome will remember the state of input fields if the hits the back button to go back to the page (sometimes with the app to), causing issues.\n//This is probably a feature intended to stop users from losing form inputs if they navigate accidentally - meaning that filing a bug report would be useless.\nwindow.defaultAdvancedSearchParameters = {\n  \"name\": {\n    \"type\": \"contains\",\n    \"query\": \"\"\n  },\n  \"section\": {\n    \"type\": \"contains\",\n    \"query\": \"\"\n  },\n  \"writeup\": {\n    \"type\": \"contains\",\n    \"query\": \"\"\n  },\n  \"location\": {\n    \"lat\": \"\",\n    \"lon\": \"\",\n    \"distance\": \"\",\n    \"includeUnknown\": false\n  },\n  \"tags\": {\n    \"query\": \"\"\n  },\n  \"skill\": {\n    \"type\": \"from\",\n    \"query\": [1, 8],\n    \"includeUnknown\": true\n  },\n  \"rating\": {\n    \"type\": \"from\",\n    \"query\": [1, 5],\n    \"includeUnknown\": true\n  },\n  \"normalSearch\": \"\",\n  \"flow\": {\n    \"type\": \"from\",\n    \"query\": [0, 4],\n    \"includeDams\": true,\n    \"includeUnknown\": true\n  },\n  \"sort\": {\n    \"query\": \"none\",\n    \"reverse\": false\n  }\n};\n\nwindow.setMenuFromSearch(window.defaultAdvancedSearchParameters)","\n//Prepare the Advanced Search button\nlet advanced_search_modal = document.getElementById('advanced-search-modal');\n\nlet span = document.getElementById(\"advanced-search-modal-close\").onclick = function() {\n    advanced_search_modal.style.display = \"none\"\n}\n\ndocument.addEventListener(\"click\", function(event) {\n    if (event.target === advanced_search_modal) {\n        advanced_search_modal.style.display = \"none\"\n    }\n})\n\ndocument.getElementById(\"advancedsearch\").addEventListener(\"click\", function() {\n    advanced_search_modal.style.display = \"block\"\n})\n\n\n//For dynamic searching, we may want to use the keyup event instead of input if there are performance issues when users hold down delete.\n//Event listeners for the normal search boxes.\n\nfunction searchBoxChange(event) {\n    let query = window.getAdvancedSearchParameters()\n    query.sort.query = \"none\" //Normal searches apply their own sorting. query.sort will override this.\n    query.normalSearch = event.target.value\n    setMenuFromSearch(query) //Make sure the user knows that the sort has been canceled.\n\tNewList(query)\n}\n\ndocument.querySelectorAll(\"#searchbox, #normalSearchBoxOnAdvancedSearch\").forEach((element) => {\n    element.addEventListener(\"input\", function searchBoxKeyPress(event) {\n\t\t//If the user is backspacing, search only when key lifted up or box empty.\n\t\tif (event.inputType === \"deleteContentBackward\") {\n\t\t\tif (event.target.value === \"\") {\n\t\t\t\twindow.removeEventListener(\"keyup\", searchBoxChange)\n\t\t\t\tsearchBoxChange(event)\n\t\t\t}\n\t\t\telse {\n\t\t\t\twindow.addEventListener(\"keyup\", searchBoxChange, {once: true})\n\t\t\t}\n\t\t\treturn\n\t\t}\n    \t//If the user presses the \"Go\" button (Actually an Enter/Return), unfocus the searchbox.\n    \tif (event.keyCode === 13) {\n    \t\tevent.target.blur()\n    \t}\n    \tsearchBoxChange(event)\n    })\n})\n\n//Advanced search event listeners.\nlet elements = document.querySelectorAll(\n    \"#advanced-search-modal > .modal-content > input, \" +\n    \"#advanced-search-modal > .modal-content > select, \" +\n    \"#advanced-search-modal > .modal-content > #locationSearchPortion > input\"\n).forEach((element) => {\n    function input() {\n\t\t//If the user presses the \"Go\" key (Actually an Enter/Return), unfocus the searchbox.\n\t\tif (event.keyCode === 13) {\n\t\t\tevent.target.blur()\n\t\t}\n\t\tNewList()\n\t}\n    element.addEventListener(\"input\", input)\n    element.addEventListener(\"change\", input) //Some browsers don't fire input event in some cases due to bugs\n    element.addEventListener(\"click\", input) //Just an extra precaution.\n})\n\n\nasync function calculateCoordinates() {\n\n\tlet status = document.getElementById(\"locationProgress\")\n\tlet num = 0\n\tlet progress = setInterval(function() {\n\t\tnum = (num+1)%6\n\t\tstatus.innerHTML = \"Calculating your Approximate Location (Expect this to take 15-60 seconds)\" + \".\".repeat(num)\n\t}, 500)\n\n\tlet position;\n\ttry {\n\t\tposition = await new Promise((resolve, reject) => {\n\t\t\tnavigator.geolocation.getCurrentPosition(resolve, reject)\n\t\t});\n\t}\n\tcatch(error) {\n\t\tlet output = \"Your device encountered an error when attempting to find your position. \" //Message for POSITION_UNAVAILABLE error.\n\t\tif (error.PERMISSION_DENIED) {\n\t\t\t//If the error is actually permission denied, check to see if we have location permission.\n\t\t\tlet status = await navigator.permissions.query({name:'geolocation'})\n\t\t\tif (status.state === \"granted\") {\n\t\t\t\t//If we do have location permission, odds are that the browser did not. Tell that to the user.\n\t\t\t\t//Browsers used to do this, but it looks like they now give a POSITION_UNAVAILABLE error.\n\t\t\t\toutput = \"It appears that your browser could not access your location. Make sure that location services is enabled and allowed for your device and browser.\"\n\t\t\t}\n\t\t\telse if (status.state === \"denied\"){\n\t\t\t\t//If the user denied permission, tell the user that they need to enable it.\n\t\t\t\toutput = \"Rivers.run does not have permission access to your location. Please enable location permission in site settings. You will also want to check that location is on for your device and/or browser.\"\n\t\t\t}\n\t\t\telse if (status.state === \"prompt\") {\n\t\t\t\t//If the user dismissed the prompt, tell them that they need to click Allow.\n\t\t\t\toutput = \"It appears that you dismissed the permission prompt. To find your location, you need to grant the location permission.\"\n\t\t\t}\n\t\t}\n\t\toutput += \"\\n\\nError message: \" + error.message\n\t\talert(output)\n\t\tclearInterval(progress)\n\t\tstatus.innerHTML = output\n\t}\n\n\n\tlet coords = position.coords\n\n\tclearInterval(progress)\n\n\tdocument.getElementById(\"latitudeQuery\").value = coords.latitude\n\tdocument.getElementById(\"longitudeQuery\").value = coords.longitude\n\tstatus.innerHTML = \"You are within \" + coords.accuracy + \" meters of \" + coords.latitude + \" degrees latitude and \" + coords.longitude + \" degrees longitude.\"\n\n\t//Alert the user if the potential error is greater than 10 miles..\n\tif (coords.accuracy > 10*1609.344) {\n\t\talert(\"Your device stated that GPS readings could be up to \" + Math.ceil(coords.accuracy/1609.344) + \" miles off target. You may want to make sure the coordinates are working properly.\")\n\t}\n\n\tNewList()\n}\n\ndocument.getElementById(\"calculateCoordinates\").addEventListener(\"click\", calculateCoordinates)\n\n\nelements = document.querySelectorAll(\".clearAdvancedSearch\")\nfor (let i=0;i<elements.length;i++) {\n\telements[i].addEventListener(\"click\", function() {\n\t\tif (confirm(\"Are you sure that you would like to clear the advanced search query?\")) {\n\t\t\t//Reset all but normalSearch\n\t\t\tlet query = recursiveAssign({}, window.defaultAdvancedSearchParameters)\n\t\t\tquery.normalSearch = getAdvancedSearchParameters().normalSearch\n\t\t\twindow.setMenuFromSearch(query)\n\t\t\tNewList()\n\t\t}\n\t})\n}\n\n\nlet ipLocation = document.getElementById(\"ipLocation\")\ntry {\n\t//IP based Geolocation only appears to be accurate with WIFI.\n\t//Although most browsers don't support it, try not to use IP based geolocation for mobile users.\n\t//Note that the IP geolocation service should be able to tell us if the user is mobile.\n\n\tlet notWifi\n\tif (window.navigator && navigator.connection && navigator.connection.type) {\n\t\tnotWifi = (navigator.connection.type !== \"wifi\")\n\t}\n\n    if (window.fetch && !notWifi) {\n\t\t//TODO: Add XMLHttpRequest fallback.\n        fetch(\"https://rivers.run/node/ip2location\").then((response) => {\n    \t\tresponse.json().then((locationInfo) => {\n\n    \t\t\tipLocation.innerHTML = \"Would you like to use coordinates for \" + locationInfo.city + \", \" + locationInfo.region + \"? (From IP Address) \"\n    \t\t\tipLocation.style.display = \"block\"\n\n    \t\t\tfunction close() {\n    \t\t\t\t//IP2Location wants attribution.\n    \t\t\t\tipLocation.innerHTML = \"IP to geolocation data from <a href='https://lite.ip2location.com'>http://lite.ip2location.com</a>\"\n    \t\t\t\tipLocation.style.opacity = 0\n    \t\t\t\tipLocation.style.fontSize = 0\n    \t\t\t\tsetTimeout(function() {\n    \t\t\t\t\tipLocation.remove()\n    \t\t\t\t}, 3000)\n    \t\t\t}\n\n    \t\t\tlet yes = document.createElement(\"button\")\n    \t\t\tyes.innerHTML = \"Yes\"\n    \t\t\tyes.addEventListener(\"click\", function() {\n    \t\t\t\tlet query = window.getAdvancedSearchParameters()\n    \t\t\t\tquery.location.lat = locationInfo.latitude\n    \t\t\t\tquery.location.lon = locationInfo.longitude\n    \t\t\t\twindow.setMenuFromSearch(query)\n    \t\t\t\tclose()\n    \t\t\t})\n    \t\t\tipLocation.appendChild(yes)\n\n    \t\t\tlet no = document.createElement(\"button\")\n    \t\t\tno.innerHTML = \"No\"\n    \t\t\tno.addEventListener(\"click\", function() {\n    \t\t\t\tclose()\n    \t\t\t})\n    \t\t\tipLocation.appendChild(no)\n    \t\t})\n    \t})\n    }\n}\ncatch (e) {\n\tconsole.error(e)\n}\n","window.timesNewListCalled = 0 //Used to handle advanced search links with flow, and to prevent drawing rivers from an older search.\nlet previousSearchQuery; //Used to avoid spending CPU to do the same search query again.\nwindow.NewList = function(query = recursiveAssign({}, defaultAdvancedSearchParameters, window.getAdvancedSearchParameters())) {\n\t//For the advanced search paramters, use the defaults in all non-specified cases. This is ineffecient because we run a search with every parameter, even when that parameter is useless (as the defaults are).\n\n\tif (objectsEqual(previousSearchQuery, query)) {\n\t\t//The search query is the same as the one that was run before. Ignore it.\n\t\tconsole.log(\"Killed search\");\n\t\treturn\n\t}\n\tpreviousSearchQuery = query\n\ttimesNewListCalled++\n\n\tlet orderedlist = ItemHolder.slice(0); //Clone the array\n\torderedlist = advancedSearch(orderedlist, query)\n\n\t//Clear Current\n\tItemHolder.forEach(function(event) {\n\t\tevent.delete()\n\t})\n\tdocument.querySelectorAll(\".gaugesBelow\").forEach((elem) => {elem.remove()})\n\n\tlet useGauges = orderedlist.useGauges\n\t\n\t//Append New\n\tvar div = document.getElementById(\"Rivers\")\n\t//To avoid lagging, append a small amount of rivers at the start, then finish adding rivers in the background.\n\tlet completed = 0\n\tlet callNumber = timesNewListCalled\n\t\n\tfunction drawMore(milliseconds = 8, options = {}) {\n\t\tlet lastDrawn = options.lastDrawn\n\t\t\n\t\t//We won't draw more if we have already drawn more than 5 times the windows height below where the user has scrolled to.\n\t\t//This will help keep performance reasonable.\n\t\t//TODO: Draw only the window height. Wait small amount of time to see if NewList is called again (so typing in searchbox, etc). If not, resume drawing to 5x.\n\t\t//If we do this inside the loop, it destroys performance of rendering.\n\t\tif (lastDrawn && lastDrawn.offsetTop - window.innerHeight * 5 > window.scrollY) {return {lastDrawn, finished: false, time: 0}}\n\t\t\n\t\t//Draw rivers to the screen for milliseconds milliseconds.\n\t\tlet start = Date.now()\n\t\tfor (;completed<orderedlist.length;completed++) {\n\t\t\t\n\t\t\tif (!orderedlist[completed].id && !options.useGauges) {continue}\n\t\t\tif (orderedlist[completed].id && options.onlyGauges) {continue}\n\n\t\t\t//If we have exceeded allocated time, or NewList has been called again (so another draw process is in place), stop drawing.\n\t\t\tif (Date.now() - start > milliseconds || callNumber !== timesNewListCalled) {break;}\n\t\t\tlet riverbutton = orderedlist[completed].create()\n\t\t\tlastDrawn = riverbutton\n\t\t\tdiv.appendChild(riverbutton)\n\t\t}\n\t\treturn {\n\t\t\tfinished: completed >= orderedlist.length,\n\t\t\ttime: Date.now() - start, //Really slow devices may take more than the allocated amount of time to finish\n\t\t\tlastDrawn\n\t\t}\n\t}\n\tfunction asyncDraw(options = {}) {\n\t\tlet oldCompleted = completed\n\t\tlet drawing = drawMore(8, options)\n\t\tif (drawing.finished && !useGauges) {\n\t\t\tuseGauges = true; \n\t\t\tcompleted = 0;\n\t\t\tdrawing.finished = false\n\t\t\tif (orderedlist.gaugeAmount > 0) {\n\t\t\t\t//Add an element that says gauges are shown below.\n\t\t\t\tlet gaugesBelow = document.createElement(\"div\")\n\t\t\t\tgaugesBelow.classList.add(\"riverbutton\")\n\t\t\t\tgaugesBelow.classList.add(\"gaugesBelow\")\n\t\t\t\tlet span = document.createElement(\"span\")\n\t\t\t\tspan.innerHTML = \"Gauges Matching your Search are Shown Below\"\n\t\t\t\tgaugesBelow.appendChild(span)\n\t\t\t\tspan.style.width = \"100%\"\n\t\t\t\tdiv.appendChild(gaugesBelow)\n\t\t\t}\n\t\t}\n\t\tif (callNumber === timesNewListCalled && !drawing.finished) {\n\t\t\tlet minTime = 16\n\t\t\tif (completed === oldCompleted) {minTime = 64} //If we didn't draw any rivers (enough already drawn), save some CPU by increasing the amount of time between executions.\n\t\t\tsetTimeout(asyncDraw, Math.max(minTime, drawing.time*2), {\n\t\t\t\tlastDrawn: drawing.lastDrawn, \n\t\t\t\tuseGauges, \n\t\t\t\tonlyGauges: (useGauges !== orderedlist.useGauges)\n\t\t\t})\n\t\t}\n\t}\n\tasyncDraw({useGauges, onlyGauges: (useGauges !== orderedlist.useGauges)})\n\n\tquery = deleteMatchingPortions(query, defaultAdvancedSearchParameters) //Filter out parameters where the default is used.\n\n\t//Add link to this search to the advanced search menu.\n\tlet link;\n\t//If the only parameter is normalSearch, create a normal search link.\n\tif (query.normalSearch && objectsEqual(query, {normalSearch:query.normalSearch})) {\n\t\tlink = encodeURI(window.root + \"#\" + query.normalSearch)\n\t}\n\telse if (objectsEqual(query, {})) {\n\t\tlink = window.root //There is no search. Provide the link to this page.\n\t}\n\telse {\n\t\tlink = encodeURI(window.root + \"#\" + JSON.stringify(query))\n\t\t//There are advanced search parameters other than normalSearch. Show the advanced search warning.\n\t}\n\t\n\tdocument.getElementById(\"searchlink\").innerHTML = \"Link to this search: <a target=\\\"_blank\\\" href=\\\"\" + link + \"\\\">\" + link + \"</a>\"\n\t\n\ttry {\n\t\thistory.replaceState(\"\",document.title, link)\n\t}\n\tcatch(e) {console.error(e)}\n\n\t//If there are parameters other than normalSearch and sort, show the advanced search warning\n\tif (objectsEqual(query, {normalSearch:query.normalSearch,sort:query.sort})) {\n\t\tdocument.getElementById(\"advancedSearchWarning\").style.display = \"none\" //No parameters other than sort and normalSearch\n\t}\n\telse {\n\t\tdocument.getElementById(\"advancedSearchWarning\").style.display = \"block\" //Advanced search is in affect!\n\t}\n}\n","\n\nfunction drawColors(canvas, height) {\n\n    let context = canvas.getContext(\"2d\")\n\n    //Some browsers flip screen.width and screen.height on rotation - some don't\n\n    //window.innerWidth fails - the window is expanded to handle the width of the legend\n    //Then the legend doesn't resize (because the window has resized to it)\n\n    //This seems to be the only simple cross browser solution, although it fails if numerous rotations are made\n\n\tlet tooLowLightness = window.darkMode? \"23%\": \"67%\"\n\tlet tooHighLightness = window.darkMode? \"20%\": \"69%\"\n\tlet normalValueLightness = window.darkMode? \"25%\": \"70%\"\n\n\tcanvas.width = document.documentElement.clientWidth\n    canvas.height = height\n\n    let gradient = context.createLinearGradient(0,0,canvas.width,0) //Horizontal gradient\n\n    let redColor = \"hsl(0,100%,\" + tooLowLightness + \")\"\n    let blueColor = \"hsl(240,100%,\" + tooHighLightness + \")\"\n\n    gradient.addColorStop(0, redColor)\n    gradient.addColorStop(0.08, redColor)\n\n    let start = 0.08\n    let end = 0.92\n\n    let range = end-start\n    //240 is number of whole number hsl values\n\n    for (let i=0;i<=240;i++) {\n        gradient.addColorStop(start + (i/240*range), \"hsl(\" + i + \",100%,\" + normalValueLightness + \")\")\n    }\n\n    gradient.addColorStop(0.92, blueColor)\n    gradient.addColorStop(1, blueColor)\n\n    context.fillStyle = gradient\n    context.fillRect(0,0,canvas.width,canvas.height)\n\n}\n\n\n//To makes these stand out slightly better, styles have been changed from the striping applied to the rivers.\n//In addition, the canvas does some weird things (why did changing from transparent black to transparent white do anything?),\n//and makes some features of linear-gradient tough to use.\nfunction drawStripes(canvas, newColor = window.darkMode ? \"rgba(256,256,256,0.4)\":\"rgba(170,170,170,0.33)\", oldColor = window.darkMode? \"rgba(255,255,255,0)\":\"rgba(0,0,0,0)\") {\n\t//Stripe the bottom (has dam) portion of the legend.\n    let context = canvas.getContext(\"2d\")\n\n\tlet angle = 60 / 180 * Math.PI //First number is degrees\n    let gradient = context.createLinearGradient(0,0, canvas.width * Math.cos(angle), canvas.width * Math.sin(angle))\n\n\tfor (let i=0;i<37;i++) {\n\t\tgradient.addColorStop(i/36, i%3 ? oldColor:newColor)\n\t}\n\t\n\tconsole.log(gradient)\n\n    context.fillStyle = gradient\n\t//Apply stripes to bottom 40% of legend.\n    context.fillRect(0,canvas.height*3/5,canvas.width,canvas.height)\n}\n\n\nfunction drawText(canvas, fontSize) {\n\n    let context = canvas.getContext(\"2d\")\n    context.fillStyle = window.darkMode ? \"white\" : \"black\"\n\n    //The fourth parameter is the maximum width of the text in pixels\n    //We use it here, but it takes an extremely small screen before it comes into affect.\n\n    let maxWidth = canvas.width/5\n\n    let height = fontSize\n\n    context.font = fontSize + \"px Arial\"\n\n    context.textAlign = \"start\"\n\t\t\n    context.fillText(\"Too Low\", 0, height, maxWidth)\n\n    context.textAlign = \"center\"\n\t\n\t//Draw the \"Has Dam text at the center on the bottom, in smaller text.\"\n\tcontext.font = fontSize/1.15 + \"px Arial\"\n\tcontext.fillText(\"Has Dam\", canvas.width/2, (canvas.height - height/4))\n    context.font = fontSize + \"px Arial\"\n\n    //Low Flow and High Flow confine the legend, making the range for low-high flow between 8% and 92%. Because of this, lowflow is 29% (8+84*0.25), and highflow is 71%.\n    context.fillText(\"Low Flow\", canvas.width*0.29, height, maxWidth)\n    context.fillText(\"Mid Flow\", canvas.width/2, height, maxWidth)\n    context.fillText(\"High Flow\", canvas.width*0.71, height, maxWidth)\n\n    //Black text on blue is near inivisible - so use white text on blue\n    if (!window.darkMode) {context.fillStyle = \"white\"}\n\n    context.textAlign = \"end\"\n    context.fillText(\"Too High\", canvas.width, height, maxWidth)\n\n}\n\n\nfunction makeSticky(canvas) {\n    //Make the legend stick to the top of the screen\n\n    //We should use position:sticky here, but there were some issues with it in Safari.\n    //canvas.style.position = \"-webkit-sticky\"\n    //canvas.style.position = \"sticky\"\n    //canvas.style.top = 0\n\n\tcanvas.style.zIndex = 2 //Show up on top of stars.\n\n    window.addEventListener(\"scroll\", function() {\n        //We could use canvas.offsetTop, but that doesn't work with absolute positioning, and can't be calculated once,\n        //because warnings and alerts above the canvas can change the correct offset.\n        //As such, we will use #topbar, and subtract the height of the canvas.\n        let elementOffset = document.getElementById(\"topbar\").offsetTop - canvas.height\n        let pageOffset = window.pageYOffset\n\n        if (pageOffset > elementOffset) {\n            canvas.style.position = \"fixed\"\n            canvas.style.top = 0\n            document.body.style.paddingTop = canvas.height + \"px\" //Avoid sudden jerk in page content\n        }\n        else {\n            canvas.style.position = \"\"\n            canvas.style.top = \"\"\n            document.body.style.paddingTop = 0\n        }\n    })\n}\n\n\nfunction updateLegend() {\n    try {\n    let canvas = document.getElementById(\"legend\")\n\n    canvas.getContext(\"2d\").clearRect(0,0,canvas.width,canvas.height)\n\n    let fontSize = parseFloat(window.getComputedStyle(document.getElementById(\"Rivers\").firstChild).getPropertyValue(\"font-size\"))\n\n    let height;\n    //Picked what I thought looked best\n    if (fontSize > 18) {\n        height = 10 + fontSize*2\n    }\n    else if (fontSize > 14.8){\n        fontSize *= 1.2\n        height = 10 + fontSize*2\n    }\n    else {\n        fontSize *= 1.4\n        height = 10 + fontSize*2\n    }\n\n    //Smart watch mode\n    if (window.innerWidth <= 309) {\n        fontSize = (window.innerWidth * 0.032 * 1.5)\n        height = 10 + fontSize*2\n    }\n\n    drawColors(canvas, height)\n    drawText(canvas, fontSize)\n\tdrawStripes(canvas)\n    makeSticky(canvas)\n    }\n    catch (e) {\n        //Something went badly wrong. Prevent from taking down whole page.\n        console.error(\"Legend failed to draw. Logging error.\")\n        console.error(e)\n    }\n\n}\n\nwindow.addEventListener(\"resize\", updateLegend)\n//orientationchange should be fired on resize, but some browsers (such as Safari) do not\nwindow.addEventListener(\"orientationchange\", updateLegend)\nwindow.addEventListener(\"colorSchemeChanged\", updateLegend)\n\nupdateLegend()\n"],"sourceRoot":""}