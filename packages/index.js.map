{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./index.js","webpack:///./allPages.js","webpack:///./graph.js","webpack:///./TopBar.js","webpack:///./River.js","webpack:///./addGraphs.js","webpack:///./sort.js","webpack:///./search.js","webpack:///./distance.js","webpack:///./loadUSGS.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;AClFa;;AAEb,mBAAO,CAAC,CAAe;;AAEvB,eAAe,mBAAO,CAAC,CAAY;;AAEnC;AACA,oBAAoB,mBAAO,CAAC,CAAa;;AAEzC,aAAa,mBAAO,CAAC,CAAY;;AAEjC,YAAY,mBAAO,CAAC,CAAW;;AAE/B;AACA,oBAAoB,mBAAO,CAAC,CAAa;;;;;AAKzC;AACA;AACA;AACA,KAAK;AACL;;;;AAIA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA,mBAAO,CAAC,CAAe;;;AAGvB,c;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kC;AACA;AACA,S;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA,kDAAkD,sBAAsB,mCAAmC,MAAM;;;AAGjH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;;;AAGzC;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;;;AAID;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AClOA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,0CAA0C;AAC1C,yCAAyC;;;AAGzC;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;AACvC,sDAAsD;AACtD;AACA,yBAAyB,uBAAuB;AAChD;AACA,yCAAyC;AACzC;AACA,a;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kCAAkC,gBAAgB;AAClD;AACA,qCAAqC,eAAe;AACpD;AACA,mCAAmC,cAAc;AACjD;AACA,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA,kCAAkC,0CAA0C;;;;;AAK5E;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA,aAAa,eAAe;AAC5B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gCAAgC,iBAAiB;AACjD,gCAAgC,0BAA0B;AAC1D,gCAAgC,WAAW;;AAE3C,kCAAkC,YAAY;AAC9C,kCAAkC,eAAe;AACjD,kCAAkC,aAAa;AAC/C,kCAAkC,mBAAmB;AACrD,kCAAkC,mBAAmB;AACrD;AACA,kCAAkC,sBAAsB;AACxD,kCAAkC,gBAAgB;;;AAGlD,wCAAwC,0BAA0B;AAClE,uCAAuC,0BAA0B;;;;;;;;AAQjE;;AAEA;AACA;AACA;AACA,kB;AACA,mB;AACA,c;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;;;;AC3QA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sC;;;;AAIA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;AACA;AACA;AACA;AACA,K;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,KAAK;AACvB;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,0B;AACA;;AAEA,6B;AACA;;AAEA,4B;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,mC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uF;AACA;AACA;AACA,oC;AACA;AACA,oC;AACA,S;AACA;AACA;AACA,iF;AACA;AACA;AACA;AACA,qF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA,+G;AACA,+G;AACA;AACA;AACA,uF;AACA;AACA;AACA,kF;AACA;AACA;AACA,gF;AACA,S;AACA;;AAEA;AACA;AACA;AACA;AACA,mC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6B;AACA,4D;AACA,4B;;;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,mBAAmB,+CAA+C;AAClE;AACA;AACA;AACA,S;AACA;;;AAGA;;AAEA,mBAAmB,+CAA+C;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,KAAK;AACxB;AACA;AACA;AACA;AACA,C;;;;;;;ACjTA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;;AC5DA,gBAAgB,mBAAO,CAAC,CAAgB;;;;AAIxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,S;AACA,K;AACA;;;;;AAKA;AACA;AACA;AACA;;AAEA,0BAA0B;AAC1B,+BAA+B;;AAE/B;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,OAAO;AACjC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,UAAU;;AAEV,cAAc,gBAAgB;;AAE9B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;;;AAGA;AACA;AACA;AACA,0CAA0C,yCAAyC;AACnF;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA,S;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,K;AACA;;;;;;;;;ACjVA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;;AAEA,YAAY;AACZ;;;AAGA;AACA;AACA,2BAA2B;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;AACb;;;;;;;AC/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,S;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,C;;;;;;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;AAYA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA;AACA,S;AACA;;;;;;;;;;;AAWA;;AAEA;;;;;AAKA,wBAAwB,mBAAO,CAAC,CAAe;;AAE/C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;AAMA;;AAEA;AACA;;;;;;;AAOA;AACA;AACA;AACA;;;;;;;AAOA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;;;;;;;;;;AC/SD,4C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;;;;AClEA,mB;;AAEA;;AAEA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,KAAK;;AAEL;AACA,iBAAiB,oBAAoB;AACrC;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB,mBAAmB;;;AAGnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","'use strict';\n\nrequire(\"./allPages.js\")\n\nself.addLine = require(\"./graph.js\").addLine\n\n//Defines self.TopBar and self.triangle\nObject.assign(self, require(\"./TopBar.js\"))\n\nself.River = require(\"./River.js\").River\n\nself.sort = require(\"./sort.js\").sort\n\n//Defines self.normalSearch and self.advanedSearch\nObject.assign(self, require(\"./search.js\"))\n\n\n\n\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', function() {\n        navigator.serviceWorker.register('/sw.js');\n    });\n}\n\n\n\n//ItemHolder is a list of all the DOM elements objects. New objects should be pushed into the list. \nself.ItemHolder = []\nriverarray.map(function(event, index) {\n    ItemHolder[index] = new River(index, event)\n})\n\n\n//Fetch data from USGS\n//ItemHolder has been filled, so this can be run here (and needs to be.... Otherwise self.usgsarray is undefined)\nrequire(\"./loadUSGS.js\").loadUSGS()\n\n\nvar oldresult;    \nwindow.NewList = function(query, type, reverse) {\n    if (typeof(query) === \"string\") {\n        query = query.toLowerCase()\n    }\n    //Location searching uses numbers.\n\n    let orderedlist = ItemHolder.slice(0); //Clone the array\n    if (!(String(query).length === 0 || !query || !type)) {\n\n        if (type === \"sort\") {\n            //Obey other filters\n            if (oldresult) {\n                orderedlist = oldresult\n            }\n\n            orderedlist = sort(query, orderedlist, reverse)\n        }\n        if (type === \"normal\") {\n            orderedlist = normalSearch(orderedlist, query)\n        }\n        if (type === \"advanced\") { \n            orderedlist = advancedSearch(orderedlist, query)\n        }    \n        if (type === \"location\") {\n            if (oldresult) {\n                orderedlist = oldresult\n            }\n\n            var nlist = []\n            orderedlist.forEach(function(value){\n                if (value.plat && value.plon) {\n                    if (distanceto(value.plat, value.plon) < query) {\n                        nlist.push(value)\n                    }\n                }\n            })\n            orderedlist = nlist\n        }\n\n\n    }//Closing for if a query is present\n\n    //Clear Current\n    ItemHolder.forEach(function(event) {\n        event.delete()\n    }) \n    //Append New\n    var div = document.getElementById(\"Rivers\")\n    //Everything else    \n    orderedlist.forEach(function(event){\n        div.appendChild(event.create())\n    })\n\n    if (type !== \"sort\") {\n        oldresult = orderedlist\n    }\n}\n\n\ndocument.getElementById(\"Rivers\").appendChild(new TopBar().create())\nNewList(\"alphabetical\", \"sort\")\n\n\nlet searchbox = document.getElementById(\"searchbox\")\nsearchbox.addEventListener(\"keydown\", function() {setTimeout(function(){NewList(searchbox.value, \"normal\")}, 20)})\n\n\n//Generate advanced search parameters from menu\nfunction getAdvancedSearchParameters() {\n    let parameters = {}\n\n    parameters.name = {\n        type: document.getElementById(\"nameType\").value,\n        query: document.getElementById(\"nameQuery\").value\n    }\n\n    parameters.section  = {\n        type: document.getElementById(\"sectionType\").value,\n        query: document.getElementById(\"sectionQuery\").value\n    }\n\n    parameters.writeup = {\n        type: document.getElementById(\"writeupType\").value,\n        query: document.getElementById(\"writeupQuery\").value\n    }\n\t\n\tlet distance = document.getElementById(\"distanceQuery\").value\n\tif (distance.length > 0) {\n\t\tdistance = Number(distance)\n\t\tif (distance <= 0 || isNaN(distance)) {alert(\"Distance must be a number greater than 0\")}\n\t\t\n\n\t\t\tlet lat = document.getElementById(\"latitudeQuery\").value\n\t\t\tlet lon = document.getElementById(\"longitudeQuery\").value\n\t\t\t\n\t\t\t//TODO: Parse other latitude and longitude formats\n\t\t\tlat = Number(lat)\n\t\t\tlon = Number(lon)\n\t\t\t\n\t\t\t\n\t\t\tif (lat && lon) {\n\t\t\t\tparameters.location = {\n\t\t\t\t\tlat,\n\t\t\t\t\tlon,\n\t\t\t\t\tdistance,\n\t\t\t\t\tincludeUnknown: document.getElementById(\"includeUnknown\").checked\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {alert(\"Please enter a longitude and a latitude\")}\n\t}\n\t\n\t\n\t//TODO: Add from queries\n    parameters.skill = {\n        type: document.getElementById(\"skillType\").value,\n        query: Number(document.getElementById(\"skillQuery\").value)\n    }\n\t\n\t\n    return parameters\n}\n\n\nasync function calculateCoordinates() {\n\t\n\tlet status = document.getElementById(\"locationProgress\")\n\tlet num = 0\n\tlet progress = setInterval(function() {\n\t\tnum = (num+1)%6\n\t\tstatus.innerHTML = \"Calculating your Approximate Location (Expect this to take 15-60 seconds)\" + \".\".repeat(num)\n\t}, 500)\n\t\n\t\n\tlet position = await new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject)\n   });\n\t\n\tlet coords = position.coords\n\t\n\tclearInterval(progress)\n\tdocument.getElementById(\"latitudeQuery\").value = coords.latitude\n\tdocument.getElementById(\"longitudeQuery\").value = coords.longitude\n\tstatus.innerHTML = \"You are within \" + coords.accuracy + \" meters of \" + coords.latitude + \" degrees latitude and \" + coords.longitude + \" degrees longitude.\"\n}\n\ndocument.getElementById(\"calculateCoordinates\").addEventListener(\"click\", calculateCoordinates)\n\n\n\n\ndocument.getElementById(\"performadvancedsearch\").addEventListener(\"click\", function() {\n    let query = getAdvancedSearchParameters()\n\n    //Add link to this search\n    //This should run before NewList - otherwise the entire content is added to the object and URL\n    //Find where rivers.run is located\n    //This should allow rivers.run to the run from a directory   \n    let root = window.location.href\n    root = root.slice(0,root.lastIndexOf(\"/\") + 1) //Add 1 so we don't clip trailing slash\n    let link = encodeURI(root + \"#\" + JSON.stringify(query))\n    document.getElementById(\"searchlink\").innerHTML = \"Link to this search: <a href=\\\"\" + link + \"\\\">\" + link + \"</a>\"\n\n    NewList(query, \"advanced\", false) //Currently no options are offered to sort or order advanced search\n})\n\n\n\n//Check if there is a search query\nif (window.location.hash.length > 0) {\n    let search = decodeURI(window.location.hash.slice(1))\n\n    try {\n        //Do an advanced search if the query if an advanced search\n        let query = JSON.parse(search)\n\n        //TODO: Set the advanced search areas to the query. \n        NewList(query, \"advanced\")\n\n\n    }\n    catch (e) {\n        //Looks like we have a normal search query\n        document.getElementById(\"searchbox\").value = search\n        NewList(search, \"normal\")\n    }\n\n}\n\n\n","//This JavaScript file should run on all pages\n//It defines global CSS rules, allows for forcing dark mode, and\n//defines the river-overview DOM element\n\n\n//This is extremely sensitive to the design of the CSS\n//The @media query must be last rule in first stylesheet for this to work\nlet styleSheet = document.styleSheets[0]\n\nif (!styleSheet) {\n    console.warn(\"No stylesheet available. There must be an existing stylesheet in order for allPages.js to function properly without inline style allowed or without document.body.\")\n    let style = document.createElement(\"style\")\n    document.body.appendChild(style)\n    styleSheet = document.styleSheets[0]\n}\n\n\n//Determine if the user wants dark mode\n//If prefers-color-scheme does not exist, the user needs to manually select dark/light mode\n//If prefers-color-scheme does exist, we follow it, unless the user wants to override it\n\ntry {\n    //Basic checking to make sure we don't mess with/error on pages that don't support dark mode\n    if (styleSheet.cssRules[styleSheet.cssRules.length - 1] instanceof CSSMediaRule) {\n        window.darkMode = localStorage.getItem(\"prefersDarkMode\")\n        //Convert string to boolean\n        if (window.darkMode === \"null\") {window.darkMode = null}\n        if (window.darkMode === \"false\") {window.darkMode = false}\n        if (window.darkMode === \"true\") {window.darkMode = true}\n\n\n        if (window.darkMode === null) {\n            window.darkMode = window.matchMedia('(prefers-color-scheme: dark)').matches\n        }\n\n        //Override browser to engage or disengage dark mode\n        if (window.darkMode === true && window.matchMedia('(prefers-color-scheme: dark)').matches === false) {\n            let cssText = styleSheet.cssRules[styleSheet.cssRules.length-1].cssText\n            //Trim off the @media ... { and trailing }\n            cssText = cssText.slice(cssText.indexOf(\"{\") + 1, -1)\n            let darkModeRules = cssText.split(\"\\n\")\n            for (let i=0;i<darkModeRules.length;i++) {\n                let rule = darkModeRules[i]\n                if (rule.trim() === \"\") {continue}\n                styleSheet.insertRule(rule, styleSheet.cssRules.length)\n            }    \n        }\n\n        if (window.darkMode === false && window.matchMedia('(prefers-color-scheme: dark)').matches === true) {\n            styleSheet.removeRule(styleSheet.cssRules.length - 1)\n        }\n\t\t\n\t\tif (window.darkMode) {\n\t\t\t//Style links so that they are visible in dark mode\n\t\t\t\n\t\t\t//Unvisited Link\n\t\t\tstyleSheet.insertRule(\"a:link {color: #3333FF;}\", styleSheet.cssRules.length)\n\t\t\t//Visited link\n\t\t\tstyleSheet.insertRule(\"a:visited {color: purple;}\", styleSheet.cssRules.length)\n\t\t\t//Hovering over link\n\t\t\tstyleSheet.insertRule(\"a:hover {color: green;}\", styleSheet.cssRules.length)\n\t\t\t//Quick flash of color when link clicked\n\t\t\tstyleSheet.insertRule(\"a:active {color: red;}\", styleSheet.cssRules.length)\n\t\t}\n    }\n}\ncatch (e) {\n    console.error(e)\n}\n\n\n\n\n\n\n//Make sure I don't hate the font\nstyleSheet.insertRule(\"html body {font-family: Arial, Helvetica, sans-serif}\", styleSheet.cssRules.length)\n\n\n\n\n//Create navigation bar\n//Where rivers.run is located\n//This should allow rivers.run to the run from a directory\nlet root = window.location.href\nroot = root.slice(0,root.lastIndexOf(\"/\") + 1) //Add 1 so we don't clip trailing slash\n\t\nlet topnav = document.createElement(\"div\")\ntopnav.className = \"topnav\"\n\nlet items = []\n\nlet item1 = document.createElement(\"a\")\nitem1.href = root\nitem1.innerHTML = \"River Info\"\nitems.push(item1)\n\nlet item2 = document.createElement(\"a\")\nitem2.href = root + \"about.html\"\nitem2.innerHTML = \"About\"\nitems.push(item2)\n\nlet item3 = document.createElement(\"a\")\nitem3.href = root + \"FAQ.html\"\nitem3.innerHTML = \"FAQ\"\nitems.push(item3)\n\nlet item4 = document.createElement(\"a\")\nitem4.href = root + \"settings.html\"\nitem4.innerHTML = \"Settings\"\nitems.push(item4)\n\n\nlet currentPage = window.location.href.slice(root.length)\nif (currentPage.indexOf(\"#\") !== -1) {\n    currentPage = currentPage.slice(0, currentPage.indexOf(\"#\"))\n}\n\n\nfor (let i=0;i<items.length;i++) {\n    let item = items[i]\n\n\tlet target = item.href.slice(root.length)\t\n\t\n    if (target === currentPage) {\n        item.className = \"topnavcurrent\"\n    }\n    topnav.appendChild(item)\n}\n\ndocument.body.insertBefore(topnav, document.body.firstChild)\n\nstyleSheet.insertRule(\".topnav {overflow: hidden}\", styleSheet.cssRules.length)\nstyleSheet.insertRule(\".topnav {background-color: #24b9cc}\", styleSheet.cssRules.length)\nstyleSheet.insertRule(\".topnav {margin:0px}\", styleSheet.cssRules.length)\n\nstyleSheet.insertRule(\".topnav a {float: left}\", styleSheet.cssRules.length)\nstyleSheet.insertRule(\".topnav a {display: block}\", styleSheet.cssRules.length)\nstyleSheet.insertRule(\".topnav a {color: black}\", styleSheet.cssRules.length)\nstyleSheet.insertRule(\".topnav a {text-align: center}\", styleSheet.cssRules.length)\nstyleSheet.insertRule(\".topnav a {padding: 12px 13px}\", styleSheet.cssRules.length)\n//Not sure what the one below is for\nstyleSheet.insertRule(\".topnav a {text-decoration: none}\", styleSheet.cssRules.length)\nstyleSheet.insertRule(\".topnav a {font-size: 17px}\", styleSheet.cssRules.length)\n\n\nstyleSheet.insertRule(\".topnav a:hover {background-color: #359daa}\", styleSheet.cssRules.length)\nstyleSheet.insertRule(\".topnavcurrent {background-color: #25d1a7}\", styleSheet.cssRules.length)\n\n\n\n\n\n\n\n//The remaining code is for the river-overview tags\n\n//Add the modal styles\nstyleSheet.insertRule(`\n.modal {\n    display: none; \n    position:fixed; \n    z-index:1; \n    padding-top: 5%;\n    left:0;\n    top:0;\n    width:100%;\n    height: 100%;\n    overflow:auto;\n    background-color: rgba(0,0,0,0.4);\n}`, styleSheet.cssRules.length)\n\nstyleSheet.insertRule(`\n.modal-content {\n    color:black;\n    background-color: #fefefe;\n    margin: auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 90%;\n}`,styleSheet.cssRules.length)\n\nstyleSheet.insertRule(`\n.modal-close {\n    color: #aaaaaa;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n}`,styleSheet.cssRules.length)\n\nstyleSheet.insertRule(`\n.modal-close:hover, .modal-close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n}`,styleSheet.cssRules.length)\n\n\nif (window.darkMode) {\n\tstyleSheet.insertRule(`\t\n.modal-content {\n\tbackground-color:black;\n\tcolor:#cfcfcf;\n}`, styleSheet.cssRules.length)\n}\n\n\n//Create the modal element\nlet overview_modal = document.createElement(\"div\")\noverview_modal.className = \"modal\"\n\nlet modal_content = document.createElement(\"div\")\nmodal_content.className = \"modal-content\"\n\nlet overview_modal_close = document.createElement(\"span\")\noverview_modal_close.className = \"modal-close\"\noverview_modal_close.innerHTML = \"×\"\n\nlet overview_modal_text = document.createElement(\"p\")\n\noverview_modal.appendChild(modal_content)\nmodal_content.appendChild(overview_modal_close)\nmodal_content.appendChild(overview_modal_text)\n\ndocument.body.appendChild(overview_modal)\n\n\n\n//Make the modal disappear when the close button is clicked, or when area outside content is clicked\noverview_modal_close.onclick = function() {\n\toverview_modal.style.display = \"none\"\n}\n\nwindow.addEventListener(\"click\", function(event) {\n    if (event.target === overview_modal) {\n        overview_modal.style.display = \"none\"\n    }\n})\n\n\t\n//Create the river-overview element\nclass RiverOverview extends HTMLElement {\n  constructor() {\n\t  super();\n\n\t  function openOverview() {\n\t\t  let text = \"This overview (\" + this.innerHTML + \") is not available. This is likely due to a programming or data entry error\"\n\t\t  if (window.overviews && window.overviews[this.innerHTML]) {\n\t\t  \ttext = window.overviews[this.innerHTML]\n\t\t  }\n\t  \t\n          overview_modal_text.innerHTML = text\n          overview_modal.style.display = \"block\"\n          \n\t  }\n\t  \n\t  \n\t  //Style so that text looks like a link/button\n\t  this.style.cursor = \"pointer\"\n\t  this.style.color = \"rgb(51, 51, 255)\"\n\t  this.style.textDecoration = \"underline\"\n\n\t  this.addEventListener(\"click\", openOverview)\n\t\n  }\n}\n\ncustomElements.define('river-overview', RiverOverview);\n","//Graph Code\n//It's Ugly... It should be fixed\n//BUT IT WORKS\n\n//addline(canvas, horizontal, vertical, color, graphtype, numplace)\n\n//canvas - HTML canvas element\n//horizontal - array of horizontal values. Pass 0 and it will evenly space.\n//vertical - array of vertical values\n\n//color - Optional. Color of line. Default black\n//graphtype - Optional. Specify 2 to put 2 lines and 2 scales on one graph. See numplace below\n//numplace - Use only if you are using graphtype = 2. \n//If you specify 0 or do not pass a value, the line's scale will be on the left side of the graph.\n//If you specify 1, the line's scale will be on the right side of the graph.\n\nmodule.exports.addLine = function (GraphName, timeframe, Source, canvas, horizontal, vertical, color, graphtype, numplace) {\n    if (graphtype === 3) {\n        var endcolor = numplace\n        }\n    if (graphtype !== 2) {\n        numplace = 0\n    }\n    var height = canvas.height*0.80\n    var width = canvas.width\n\n    var ctx = canvas.getContext('2d');  \n\n\n\n    if (!isNaN(Number(horizontal))) {\n        horizontal = []\n        for (var i = 0;i<vertical.length;i++) {\n            horizontal.push(i*width)\n        }\n    }\n    if (horizontal.length !== vertical.length) {\n        console.warn(\"Uneven amount of datapoints. \" + horizontal.length + \" horizontal points found, but \" + vertical.length + \" vertical points found.\")\n    }\n\n    if (color === undefined) {\n        color = \"#000000\"\n    }\n    ctx.strokeStyle = color\n    ctx.lineWidth = Math.ceil(Math.min(width, height)/120)\n    ctx.beginPath();\n\n    if (graphtype === 2) {\n        width = width*0.86\n    }\n    else {\n        width = width*0.93\n    }\n\n    var calcvertical = []\n    for (var i = 0;i<vertical.length;i++) {\n        if (!isNaN(Number(vertical[i])) && (vertical[i]) !== \"\") {\n            calcvertical.push(vertical[i])\n        }\n        //else {\n        //This is a valid warning - It just got TOO ANNOYING\n        //console.warn(\"Element \" + i + \" in list is an invalid number. It had a value of: \" + vertical[i])\n        //}\n    }\n\n    var vscale = Math.max(...calcvertical) - Math.min(...calcvertical)\n    var hscale = Math.max(...horizontal) - Math.min(...horizontal)\n    vscale = height/vscale\n    hscale = width/hscale\n    var voffset = Math.min(...calcvertical)\n    var hoffset = Math.min(...horizontal)\n\n    hoffset -= (Math.max(...horizontal) - Math.min(...horizontal))*0.07\n\n    var px = Math.floor(((canvas.width)*0.07)/2.6)\n    ctx.font = (px + 'px serif')\n    if (color.length === 9) {\n        color = color.slice(0,7)\n    }\n    ctx.fillStyle = color\n    if (graphtype === 3) {\n        var grd = ctx.createLinearGradient(0, 0, 0, height);\n        grd.addColorStop(0, color);   \n        grd.addColorStop(1, endcolor);\n        ctx.strokeStyle = grd;\n        ctx.fillStyle = grd;\n    }    \n\n    if (numplace === 0 || numplace === undefined) {\n        var start = 1\n        }\n    else {\n        var start = canvas.width-(canvas.width*0.07)\n        }\n    for(var i = 1;i<11;i++) {\n        var Text = ((Math.max(...calcvertical) - Math.min(...calcvertical))*((i-1)/10))+Math.min(...calcvertical)\n\n        let precision = Math.max(0, 3-String(Math.round(Text)).length)\n        \n        Text = Number(Text.toFixed(precision))\n\n        ctx.fillText(Text, start, (height*(11-i))/10-5);\n    }\n\n    //Top one\n    Text = ((Math.max(...calcvertical) - Math.min(...calcvertical))*((i-1)/10))+Math.min(...calcvertical)\n    \n    let precision = Math.max(0, 3-String(Math.round(Text)).length)\n        \n    Text = Number(Text.toFixed(precision))\n    \n    ctx.fillText(Text, start, 27);\n\n\n\n\n\n    var px = Math.floor(((canvas.width)*0.07)/2.8)\n    ctx.font = (px + 'px serif')\n    if (color.length === 9) {\n        color = color.slice(0,7)\n    }\n\n\n    if (!window.darkMode) {\n        ctx.fillStyle = \"black\"\n    }\n    else {\n        //Dark Mode\n        ctx.fillStyle = \"#cccccc\"\n    }    \n\n\n\n\tfunction formatDate(date) {\n    \tvar time = String(date.getHours())\n\t\n\t\tif (date.getHours() < 10) {\n\t\t\ttime += \"0\"\n\t\t}\n\t\ttime += \":\" + date.getMinutes()\n\t\tif (date.getMinutes() < 10) {\n\t\t\ttime += \"0\"\n\t\t}\n\t\ttime += \" \" + (date.getMonth()+1) + \"/\" + date.getDate() + \"/\" +date.getFullYear()\n\t\treturn time\n\t}\n\t\n    var time1 = new Date(timeframe[0])\n    var time2 = new Date(timeframe[timeframe.length - 1])\n    var time3 = new Date(((time2-time1)/2)+time1.getTime())\n\t\n    var starttime = formatDate(time1)\n    var endtime = formatDate(time2)\n    var midtime = formatDate(time3)\n\n    ctx.fillText(starttime, 10, (canvas.height*(11/12))-(canvas.height*0.06)-12)\n\n    ctx.textAlign = \"end\"; \n    ctx.fillText(endtime, canvas.width-10, (canvas.height*(11/12))-(canvas.height*0.06)-12)\n\n    ctx.textAlign = \"center\"; \n    ctx.fillText(midtime, canvas.width/2, (canvas.height*(11/12))-(canvas.height*0.06)-12)\n\n    ctx.textAlign = \"start\";     \n\n\n\n    var px = Math.floor(((canvas.width)*0.07)/2.4)\n    ctx.font = (px + 'px serif')\n    ctx.fillStyle = color\n    //We need to create a gradient for just the text \"Water Temperature (F)\"\n    if (graphtype === 3) {\n        var grd = ctx.createLinearGradient(0, height, 200, height);\n        grd.addColorStop(0, color);   \n        grd.addColorStop(1, endcolor);\n        ctx.strokeStyle = grd;\n        ctx.fillStyle = grd;\n    }\n\n    if (graphtype === 2) {\n        if (numplace === 0 || numplace === undefined) {\n            ctx.fillText(\"Flow (Cubic Feet/Second)\", start+5, (canvas.height*(11/12)));    \n        }\n        else {\n            ctx.textAlign = \"right\"; \n            ctx.fillText(\"Gauge Height (Feet)\", start-5, (canvas.height*(11/12)));\n            ctx.textAlign = \"start\"; \n        } \n    }\n    else if (graphtype === 3) {\n        ctx.fillText(\"Water Temperature (°F)\", start+5, (canvas.height*(11/12)));    \n    }\n    else {\n        if (GraphName === \"Precipitation\") {\n            ctx.fillText(\"Precipitation (Inches)\", start+5, (canvas.height*(11/12))); \n            var fulldayprecip = 0\n            var halfdayprecip = 0\n            var preciplist = vertical.slice(-96)\n            var preciplist = preciplist.map(Number)\n            //convert strings to numbers\n            preciplist.forEach(function(value){\n                fulldayprecip += value\n            })\n            preciplist = preciplist.slice(-48)\n            preciplist.forEach(function(value){\n                halfdayprecip += value\n            })\n\n            fulldayprecip = fulldayprecip.toFixed(2)\n            halfdayprecip = halfdayprecip.toFixed(2)\n\n            ctx.fillText(\"Last 24 Hours: \" + fulldayprecip + \" in\", canvas.width-700, (canvas.height*(11/12))); \n            ctx.fillText(\"Last 12 Hours: \" + halfdayprecip + \" in\", canvas.width-330, (canvas.height*(11/12))); \n        }\n        else if (GraphName === \"cfs\") {\n            ctx.fillText(\"Flow (Cubic Feet/Second)\", start+5, (canvas.height*(11/12)));    \n        }\n        else if (GraphName === \"height\") {\n            ctx.fillText(\"Gauge Height (Feet)\", start+5, (canvas.height*(11/12)));    \n        }\n        else {\n            ctx.fillText(\"Labeling Error...\", start+5, (canvas.height*(11/12)));    \n        }    \n    }\n\n    //set it back    \n    if (graphtype === 3) {\n        //The area that actually has the graph is the top 80% height wise\n        var grd = ctx.createLinearGradient(0, 0, 0, canvas.height*0.8);\n        grd.addColorStop(0, color);   \n        grd.addColorStop(1, endcolor);\n        ctx.strokeStyle = grd;\n        ctx.fillStyle = grd;\n    }\n\n    if (!window.darkMode) {\n        ctx.fillStyle = \"black\"\n    }\n    else {\n        //Dark Mode\n        ctx.fillStyle = \"#cccccc\"\n    }\n\n    ctx.textAlign = \"center\"; \n    ctx.fillText(Source, canvas.width/2 , canvas.height-10);  \n    ctx.textAlign = \"start\"; \n\n\n\n\n    function H(Value) {\n        return Math.round((Value-hoffset)*hscale)\n    }\n\n    function V(Value) {\n        return Math.round(height-((Value-voffset)*vscale))\n    }\n\n\n    for (var p = 0;p<Math.min(vertical.length, horizontal.length);p++) {\n        if (!isNaN(Number(vertical[p])) && vertical[p] !== \"\") {\n            ctx.moveTo(H(horizontal[p]), V(vertical[p]))\n            break;\n        }    \n    }\n\n\n    var valid = 1\n\n    for (var i = p;i<Math.min(vertical.length, horizontal.length);i++) {\n        if (!isNaN(Number(vertical[i])) && vertical[i] !== \"\") {\n            if (valid === 1) {\n                ctx.lineTo(H(horizontal[i]), V(vertical[i]))\n            }\n            else {\n                ctx.moveTo(H(horizontal[i]), V(vertical[i])+10)\n                ctx.lineTo(H(horizontal[i]), V(vertical[i]))\n                valid = 1\n            }\n        }\n        else {\n            valid = 0\n        }\n    }\n\n\n    ctx.stroke();\n    ctx.beginPath()\n\n    ctx.lineWidth = Math.ceil(ctx.lineWidth/10)\n\n    if (!window.darkMode) {\n        ctx.strokeStyle = \"000000AA\"\n    }\n    else {\n        //Dark Mode\n        ctx.strokeStyle = \"#ccccccAA\"\n    }\n\n    for (var i = 1;i<11;i++) {\n        ctx.moveTo(0, height*(11-i)/10)\n        ctx.lineTo(canvas.width, height*(11-i)/10)\n    }\n    ctx.stroke()\n}    \n","function NewSpan(Text) {\n    let span = document.createElement(\"span\")\n    span.className = \"riverspan\"\n    span.innerHTML = Text\n    return span\n}\n\nfunction addSorting(span, type) {\n    span.onclick = function() {\n        if (this.value === 1) {\n            NewList(type, \"sort\", true) //Reversed\n            this.value = 0\n        }\n        else {\n            NewList(type, \"sort\")\n            this.value = 1\n        }\n    }\n}\n\n\nfunction TopBar() {\n    this.create = function() {\n        let button = document.createElement(\"button\")\n        button.id = \"topbar\"\n        button.className = \"riverbutton\"\n\n\n        let span = NewSpan(\"River⇅\")\n        addSorting(span, \"alphabetical\")\n        span.value = 1//Starts sorted alphabetically, a-z. The first sort needs to reverse that.\n        button.appendChild(span)\n\n        button.appendChild(NewSpan(\"Section\"))\n\n        span = NewSpan(\"Skill⇅\")\n        addSorting(span, \"skill\")\n        span.value = 0\n        button.appendChild(span) \n\n        span = NewSpan(\"Rating⇅\")\n        addSorting(span, \"rating\")\n        span.value = 1 //We want greatest first, not least first, on the first sort\n        button.appendChild(span) \n\n        button.appendChild(NewSpan(\"Flow Info/Trend\"))\n\n        return button\n    }\n\n    this.delete = function() {\n        let Node = document.getElementById(\"topbar\")\n        if (Node) {\n            Node.parentNode.removeChild(Node)\n        }\n    }\n}\n\n\nmodule.exports = {\n    TopBar\n}\n","\nlet addGraphs = require(\"./addGraphs.js\").addGraphs\n\n\n\nfunction addClickHandler(button, locate) {\n    //Code that runs when the button is clicked\n    button.onclick = function () {\n        let river = ItemHolder[locate]\n        if (river.expanded === 0) {\n            river.expanded = 1\n            var div = document.createElement(\"div\")\n            div.innerHTML = river.writeup + \"<br>\"\n\n            if (river.plat && river.plon) {\n                div.innerHTML += \"<br>Put-In GPS Coordinates: \" + river.plat + \", \" + river.plon\n            }\n\n            if (river.tlat && river.tlon) {\n                div.innerHTML += \"<br>Take-Out GPS Coordinates: \" + river.tlat + \", \" + river.tlon\n            }\n\n            if (river.aw) {\n\t\t\t\t//Adding to div.innerHTML works, but logs CSP errors\n\t\t\t\tdiv.appendChild(document.createElement(\"br\"))\n\t\t\t\tdiv.appendChild(document.createElement(\"br\"))\n\t\t\t\tlet link = document.createElement(\"a\")\n\t\t\t\tlink.href = \"https://www.americanwhitewater.org/content/River/detail/id/\" + river.aw\n\t\t\t\tlink.innerHTML = \"Click here to view this river on American Whitewater\"\n\t\t\t\tdiv.appendChild(link)\n            }\n\n            //USGS data may not have loaded yet\n            if (self.usgsarray) {\n                data = self.usgsarray[river.usgs] \n                addGraphs(div, data)\n            }\n\n            div.style.padding = \"6px\"\n            div.id = river.base + 2\n            if (!window.darkMode) {\n                button.style.backgroundColor = \"#e3e3e3\"\n            }\n            else {\n                //Dark Mode\n                button.style.backgroundColor = \"#333333\"\n            }\n            button.parentNode.insertBefore(div, button.nextSibling)\n        }\n        else {\n            river.expanded = 0\n            button.style.backgroundColor = \"\"//Let the button inherit the default color\n            var elem = document.getElementById(river.base + 2)\n            if (elem) {\n                elem.parentNode.removeChild(elem)\n            }\n\n        }        \n    }    \n}\n\n\n\n\nfunction calculateDirection(usgsNumber) {\n\tlet usgsData = usgsarray[usgsNumber]\n\tif (usgsData) {\n\t\tlet data;\n\t\t\n\t\tif (usgsData[\"00060\"]) {data = usgsData[\"00060\"].values}\n\t\telse if (usgsData[\"00065\"]) {data = usgsData[\"00065\"].values}\n\t\t\n\t\tif (data) {\n\t\t\tlet current;\n\t\t\tlet previous;\n\t\t\t\n\t\t\t//We will go back 4 datapoints (1 hour) if possible. \n\t\t\t//Do this because USGS sometimes does 1 hour intervals instead of 15 minutes\n\t\t\tlet stop = Math.max(data.length-5, 0)\n\t\t\tfor (let i=data.length;i>stop;i--) {\n\t\t\t\tlet item = data[i]\n\t\t\t\tif (!item) {continue}\n\t\t\t\tlet value = item.value\n\t\t\t\tif (!current) {\n\t\t\t\t\tcurrent = value\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tprevious = value\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (current > previous) {\n\t\t\t\t//Water level rising\n\t\t\t\treturn \"⬆\"\n\t\t\t}\n\t\t\telse if (previous > current) {\n\t\t\t\t//Water level falling\n\t\t\t\treturn \"⬇\"\n\t\t\t}\n\t\t\telse if (current === previous) {\n\t\t\t\t//Water level stable\n\t\t\t\treturn \"-\"\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\treturn; //If we got here, there is not enough USGS data. \n}\n\n\n\n\nfunction calculateColor(river) {\n\t//hsla color values\n\t//hsl(hue, saturation, lightness, opacity)\n\t//Saturation hue is 0 red 120 green 240 blue\n\t//Saturation - use 100%\n\t//Lightness - use 50%\n\t//Opacity - Percentage\n\t\n\n\tlet values = [\"minrun\", \"lowflow\", \"midflow\", \"highflow\", \"maxrun\"]\n\t\n\tlet type; //Currently, we skip a value if one datapoint is cfs and another feet\n\t\n\tfor (let i=0;i<values.length;i++) {\n\t\t\n\t\tlet str = river[values[i]]\n\t\tif (!str) {\n\t\t\tvalues[i] = undefined\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tlet value = parseFloat(str)\n\t\tlet currentType = str.match(/[^0-9]+/)\n\t\t\n\t\tif (currentType) {\n\t\t\tcurrentType = currentType[0].trim() //Match a string of non-digits\n\t\t}\n\t\t\n\t\tif (!type && currentType) {\n\t\t\ttype = currentType\n\t\t}\n\t\telse if (type === currentType) {}\n\t\telse {\n\t\t\tvalues[i] = undefined\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tvalues[i] = value\n\t}\n\t\n\tlet flow;\n\tif (type === \"cfs\") {\n\t\tflow = river.cfs\n\t}\n\telse if (type === \"feet\") {\n\t\tflow = river.feet\n\t}\n\t\n\t//TODO: It is difficult to tell when the minimum has not bee reached or the maximum has been exceeded. Make that easy\n\tif (flow < values[0]) {\n\t\treturn \"hsl(0,100%,50%,100%)\"\n\t}\n\telse if (flow > values[4]) {\n\t\treturn \"hsl(240,100%,50%,60%)\"\n\t}\n\telse {\n\t\t//If we don't have some values, fill them in using logarithms\n\t\t//TODO: Do some analyzsis and figure out the best way to do these calculations\n\t\t\n\t\tlet minrun = values[0]\n\t\tlet maxrun = values[4]\n\t\tlet midflow = values[2] || 10**((Math.log10(minrun) + Math.log10(maxrun))/2)\n\t\tlet lowflow = values[1] || 10**((Math.log10(minrun) + Math.log10(midflow))/2)\n\t\tlet highflow = values[3] || 10**((Math.log10(midflow) + Math.log10(maxrun))/2)\n\t\t\n\t\t\n\t\tconsole.log(minrun, lowflow, midflow, highflow, maxrun)\n\t\t\n\t\tfunction calculateRatio(low, high, current) {\n\t\t\tlow = Math.log(low)\n\t\t\thigh = Math.log(high)\n\t\t\t\n\t\t\tcurrent = Math.log(current)\n\t\t\t\n\t\t\t\n\t\t\tlet range = high-low\n\t\t\tlet value = current-low\n\t\t\t\n\t\t\treturn value/range\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tif (flow < lowflow) {\n\t\t\treturn \"hsl(\" + (48 + 48*calculateRatio(minrun, lowflow, flow)) + \",100%,50%,30%\"\n\t\t}\n\t\telse if (flow < midflow) {\n\t\t\treturn \"hsl(\" + (96 + 48*calculateRatio(lowflow, midflow, flow)) + \",100%,50%,30%\"\n\t\t}\n\t\telse if (flow < highflow) {\n\t\t\treturn \"hsl(\" + (144 + 48*calculateRatio(midflow, highflow, flow)) + \",100%,50%,30%\"\n\t\t}\n\t\telse {\n\t\t\treturn \"hsl(\" + (192 + 48*calculateRatio(highflow, maxrun, flow)) + \",100%,50%,30%\"\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\nmodule.exports.River = function(locate, event) {\n\t\n\t//Copies name, section, skill, rating, writeup, tags, usgs, plat,plon, tlat,tlon, aw\n\tObject.assign(this, event)\n\t//tags needs to be a string. It can't be undefined\n    this.tags = this.tags || \"\"\n\t//Convert the numeric value to the filename\n    switch (Number(this.rating)) {\n        case 1:\n            this.rating = \"1Star\";\n            break;\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n            this.rating = event.rating + \"Stars\";\n            break;\n        default:\n            this.rating = \"Error\"\n    }\n    if (!this.rating) {\n        this.rating = \"Error\"\n    }\n\n\n    this.base = \"b\" + locate\n    this.expanded = 0\n    this.index = locate\n\n\n    this.create = function (forceregenerate) {\n        //Only create the button once - It's about 3 times faster.\n        if (!this.finished || forceregenerate) {\n            var button = document.createElement(\"button\")\n            button.id = this.base + 1\n\n            function AddSpan(text) {\n                let span = document.createElement(\"span\")\n                span.innerHTML = text\n                span.className = \"riverspan\"\n                button.appendChild(span)\n\t\t\t\treturn span\n            }\n\n            AddSpan(this.name)\n            AddSpan(this.section)\n            AddSpan(this.skill)\n\n            //Star images for rating\n            if (this.rating === \"Error\") {\n                AddSpan(\"???\") \n            }\n            else {\n                let img = document.createElement(\"img\")\n                img.src = \"resources/\" + this.rating + \".png\"\n                img.alt = this.rating[0] + \" Stars\"\n                img.className = \"starimg\"\n                let span = document.createElement(\"span\")\n                span.appendChild(img)\n                span.className = \"riverspan\"\n                button.appendChild(span)\n            }\n\n\n\n            if (this.flow) {\n                let flowSpan = AddSpan(this.flow + \" \" + calculateDirection(this.usgs))\n\t\t\t\tif (this.minrun && this.maxrun) {\n\t\t\t\t\tflowSpan.style.backgroundColor = calculateColor(this)\n\t\t\t\t}\n\t\t\t\t\n            }\n            \n\n            \n            button.className = \"riverbutton\"\n            //Add the click handler\n            addClickHandler(button, locate)\n\n\n            //Make content available to Googlebot for indexing\n            if (navigator.userAgent.toLowerCase().indexOf(\"google\") !== -1) {\n                try {\n                    setTimeout(function(){button.dispatchEvent(new Event(\"click\"))}, 100)\n                }\n                catch(e) {}\n            }\n            //The code directly above this is used to allow Googlebot to index content. \n            //Shall it result in an SEO hit, or shall Googlebot be improved to handle content inside of JavaScript,\n            //It can safely be removed.    \n\n\n            //Store button for reuse later   \n            this.finished = button\n\n        }    \n\n        //Return finished button\n        return this.finished\n\n    }\n\n\n    this.delete = function () {\n        let river = ItemHolder[locate]\n        function Remove(Code) {\n            let ToDelete = document.getElementById(river.base + Code)\n            if (ToDelete) {\n                ToDelete.parentNode.removeChild(ToDelete)\n            }\n        }\n\n        //Reset background color\n        let reset = document.getElementById(river.base + 1)\n        if (reset) {\n            reset.style.backgroundColor = \"\"\n        }\n\n        Remove(2)\n        Remove(1)   \n\n    } \n}\n\n","\n//Auxillary Function\n//Creates the canvas used by each of the graphs\nfunction createcanvas() {\n    let canvas = document.createElement(\"canvas\")\n    canvas.width = 1200\n    canvas.height = 800 \n\n    //Make sure the background is not transparent\n    let ctx = canvas.getContext(\"2d\");\n    if (!window.darkMode) {\n        ctx.fillStyle = \"white\";\n    }\n    else {\n        //Dark Mode\n        ctx.fillStyle = \"black\"\n    }\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    return canvas\n}\n\n\n//Auxillary Function\nfunction toparts(arr) {\n    let values = []\n    let timestamps = []\n\n    for (let i=0;i<arr.length;i++) {\n        let obj = arr[i]\n        values.push(obj.value)\n        timestamps.push(obj.dateTime)\n    }\n\n    return {values:values,timestamps:timestamps}\n}\n\n\nfunction addFlowGraph(div, cfs, height) {\n    //Make sure we actually have some data, and don't create an empty graph\n    if (!(cfs || height)) {return}\n\n    let canvas = createcanvas()\n    //Time to create a dual lined graph!\n    if (cfs && height) {\n        let parts = toparts(cfs.values)\n        addLine(\"cfs\", parts.timestamps, data.name, canvas, 0, parts.values, \"#00AAFFa0\", 2)\n        parts = toparts(height.values)\n        addLine(\"height\", parts.timestamps, data.name, canvas, 0, parts.values, \"#2222FFa0\", 2, 1)                \n    }\n    //We won't have both cfs and height. Draw a single line graph for whichever we have.\n    else if (cfs) {\n        let parts = toparts(cfs.values)\n        addLine(\"cfs\", parts.timestamps, data.name, canvas, 0, parts.values, \"#00AAFF\")\n    }\n    else {\n        let parts = toparts(height.values)\n        addLine(\"height\", parts.timestamps, data.name, canvas, 0, parts.values, \"#2222FF\")    \n    }\n\n    //For some reason, only the last canvas was showing. Use images\n    //Images also allow \"Save Image As\"\n    let img = document.createElement(\"img\")\n    img.className = \"graph\"\n    //Blobs may be faster - but I don't know of a synchronus method\n    img.src = canvas.toDataURL(\"image/png\")\n\n    div.appendChild(img)\n}\n\n\nfunction addTempGraph(div, temp) {\n    if (temp) {\n        let canvas = createcanvas()\n\n        let parts = toparts(temp.values)\n        addLine(\"\", parts.timestamps, data.name, canvas, 0, parts.values, \"#FF0000\", 3, \"#0000FF\")\n\n        //For some reason, only the last canvas was showing. Use images\n        //Images also allow \"Save Image As\"\n        let img = document.createElement(\"img\")\n        img.className = \"graph\"\n        img.src = canvas.toDataURL(\"image/png\")\n        div.appendChild(img)\n    }\n}\n\n\n\nfunction addPrecipGraph(div, precip) {\n    if (precip) {\n        let canvas = createcanvas() \n\n        let parts = toparts(precip.values)\n        addLine(\"Precipitation\", parts.timestamps, data.name, canvas, 0, parts.values, \"#0066FF\")\n\n        //For some reason, only the last canvas was showing. Use images\n        //Images also allow \"Save Image As\"\n        let img = document.createElement(\"img\")\n        img.className = \"graph\"\n        img.src = canvas.toDataURL(\"image/png\")\n        div.appendChild(img)\n    }\n}\n\n\nmodule.exports.addGraphs = function(div, data) {\n\n    //Avoid erroring\n    if (!data) {\n        return;\n    }\n    \n    //The graphing is wrapped in a try-catch statement because USGS often supplies invalid data\n    //for a specific river due to gauge problems.\n    //Each canvas is wrapped individually because sometimes only some graphs have invalid data\n\n\tlet temp = data[\"00010\"]\n    let precip = data[\"00045\"]\n    let cfs = data[\"00060\"]\n    let height = data[\"00065\"]\n\t\n\t\n\t//Space the first canvas\n\t//div.innerHTML += \"<br><br>\" works, but logs CSP errors\n    div.appendChild(document.createElement(\"br\"))\n    div.appendChild(document.createElement(\"br\"))\n\t\n\n    try {\n        addFlowGraph(div, cfs, height)\n    }\n    catch(e){console.warn(\"Error creating flow graph: \" + e)}\n\n    try {\n        addTempGraph(div, temp)\n    }\n    catch(e){console.warn(\"Error creating temperature graph: \" + e)}\n\n    try {\n        addPrecipGraph(div, precip)\n    }\n    catch(e){console.warn(\"Error creating precipitation graph: \" + e)}\n}\n","function simpleSort(list, propertyName) {\n    list.sort(function(a,b) {\n        if (a[propertyName] > b[propertyName]) {\n            return 1;\n        }\n        if (a[propertyName] < [propertyName]) {\n            return -1;\n        }\n        return 0;\n    })\n    return list\n}\n\n\nfunction alphabeticalsort(list, reverse) {\n    list = simpleSort(list, \"name\")\n\n    if (reverse) {\n        list.reverse()\n    }\n    \n    return list\n}\n\nfunction ratingsort(list, reverse) {\n    list = simpleSort(list, \"rating\")\n\n    if (reverse) {\n        list.reverse()\n    }\n    //Move error values to end\n    while (list[0].rating === \"Error\") {\n        list.push(list.shift())\n    }  \n    return list\n}\n\n\nfunction skillsort(list, reverse) {\n    list.sort(function(a,b) {\n\n        function ToNum(value) {\n\n            switch (value.skill) {\n                case \"FW\":\n                    value = 1;\n                    break;\n                case \"B\":\n                    value = 2;\n                    break;\n                case \"N\":\n                    value = 3;\n                    break;\n                case \"LI\":\n                    value = 4;\n                    break;\n                case \"I\":\n                    value = 5;\n                    break;\n                case \"HI\":\n                    value = 6;\n                    break;\n                case \"A\":\n                    value = 7;\n                    break;\n                case \"E\":\n                    value = 8;\n                    break;\n                default:\n                    value = 9;\n            }\n            return value\n        }       \n        return ToNum(a)-ToNum(b)\n    })\n\n\n    if (reverse) {\n        list.reverse()\n        while (list[0].skill === \"?\") {\n            list.push(list.shift())\n        }\n    }\n\n    return list\n}\n\n\n\n\nfunction sort(method, list, reverse) {\n    if (method === \"alphabetical\") {\n        list = alphabeticalsort(list, reverse)\n    }\n    else if (method === \"rating\") {\n        list = ratingsort(list, reverse)\n    }\n    else if (method === \"skill\") {\n        list = skillsort(list, reverse)\n    }\n    else {\n        throw \"Unknown sorting method \" + method\n    }\n    return list\n}\n\n\nmodule.exports = {\n    ratingsort,\n    alphabeticalsort,\n    skillsort,\n    sort\n}","function normalSearch(list, query) {\n    let l = [[],[],[],[],[]]\n    list.forEach(function(event){\n        if(event.tags.toLowerCase().indexOf(query) !== -1) {\n            if (event.name.toLowerCase().indexOf(query) !== -1) {\n                l[0].push(event)\n            }\n            else {\n                l[1].push(event)\n            }\n        }\n        else if (event.name.toLowerCase().indexOf(query) !== -1) {\n            l[2].push(event)\n        }\n        else if (event.section.toLowerCase().indexOf(query) !== -1) {\n            l[3].push(event)\n        }\n        else if (event.writeup.toLowerCase().indexOf(query) !== -1) {\n            l[4].push(event)\n        }\n    })\n\n    list = l[0].concat(l[1],l[2],l[3])\n\n    //Add the less relevant results below\n    list = list.concat(l[4])\n    \n    return list\n}\n\n\n\n\n\n\n\n\n\n\n\nfunction stringQuery(parameters) {\n    \n    let content = parameters.content\n    let query = parameters.query\n    \n    //Ignore case by default\n    if (!parameters.matchCase) {\n        content = content.toLowerCase()\n        query = query.toLowerCase()\n    }\n    \n    if (parameters.type === \"contains\") {\n        return content.includes(query)\n    }\n    else if (parameters.type === \"matches\") {\n        return content === query\n    }\n    else {\n        throw \"Unknown Search Type \" + parameters.type\n    }\n}\n\n\nfunction stringFilter(list, property, parameters) {\n\t\t//Filter out the elements that fail the test\n        //Since we may be deleting elements in the list, items will be skipped if we use array.length\n        for (let item in list) {\n\t\t\tparameters.content = list[item][property]\n            let passes = stringQuery(parameters)\n            if (!passes) {\n                //Remove the item if it fails\n                delete list[item]\n            }\n        }\n\treturn list\n}\n\n\n\nfunction skillToNumber(skill) {\n\tlet value\n            switch (skill) {\n                case \"FW\":\n                    value = 1;\n                    break;\n                case \"B\":\n                    value = 2;\n                    break;\n                case \"N\":\n                    value = 3;\n                    break;\n                case \"LI\":\n                    value = 4;\n                    break;\n                case \"I\":\n                    value = 5;\n                    break;\n                case \"HI\":\n                    value = 6;\n                    break;\n                case \"A\":\n                    value = 7;\n                    break;\n                case \"E\":\n                    value = 8;\n            }\n\treturn value\n}\n\n\n\n\n\n\nfunction skillFilter(list, parameters) {\n\t\n\tlet query = parameters.query\n\tlet type = parameters.type\n\t\n        for (let item in list) {\n\n\t\t\tlet passes = false;\n\t\t\tlet skill = skillToNumber(list[item].skill)\n\t\t\t\n\t\t\tif (type === \"max\") {\n\t\t\t\tif (skill <= query) {\n\t\t\t\t\tpasses = true\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (type === \"min\") {\n\t\t\t\tif (skill >= query) {\n\t\t\t\t\tpasses = true\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (type === \"exactly\") {\n\t\t\t\tif (skill === query) {\n\t\t\t\t\tpasses = true\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (type === \"from\") {\n\t\t\t\tif (skill >= query[0] && skill <= query[1]) {\n\t\t\t\t\tpasses = true\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {throw \"Unknown search type\" + type}\n\t\t\t\n\t\t\t\n            if (!passes) {\n                //Remove the item if it fails\n                delete list[item]\n            }\n        }\t\n}\n\n\n\n\n\n\n\n\n\n\nfunction ratingFilter(list, parameters) {\n\t\n}\n\n\n\n\nlet calculateDistance = require(\"./distance.js\").lambert //Lambert formula\n\nfunction locationFilter(list, parameters) {\n\t\n\tlet maxDistance = parameters.distance\n\tlet lat1 = parameters.lat\n\tlet lon1 = parameters.lon\n\t\n\t\t//Filter out the elements that fail the test\n        //Since we may be deleting elements in the list, items will be skipped if we use array.length\n        for (let item in list) {\n\t\t\tlet river = list[item]\n\t\t\t\n\t\t\tlet lat2 = river.plat || river.tlat || river.hidlat\n\t\t\tlet lon2 = river.plon || river.tlon || river.hidlon\n\t\t\t\n\t\t\t\n\t\t\tlet passes;\n\t\t\tif (lat2 && lon2) {\n\t\t\t\tlet distance = calculateDistance(lat1, lon1, lat2, lon2)\n\t\t\t\t\n\t\t\t\tpasses = distance < maxDistance\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//TODO: If we only have one of two coordinates, we may still be able to eliminate it\n\t\t\t\tpasses = parameters.includeUnknown\n\t\t\t}\n\n            if (!passes) {\n                //Remove the item if it fails\n                delete list[item]\n            }\n        }\n\treturn list\n\t\n}\n\n//Query is in form of:\n//{\n  //  name: {\n    //    type: \"matches\",\n    //    query: \"potomac\"\n    //},\n    //section: {\n    //    type: \"contains\",\n    //    query: \"something\"\n  //  },\n// skill: {\n//\ttype:\"\" //easier harder exactly from\n//\tvalue: 3 //An array of 2 if from\n//from is inclusive (From medium to hard)\n//},\n//location:{\n//\tdistance: 100 //Maximum distance in miles\n//\tlat: 78//Starting latitude\n//\tlon:-56 //Starting londitude\n//\tincludeUnknown: false //Do not eliminate if location not known \n//}\n//}\n\n\n\n//This doesn't work for difficulty and rating - no greater than or equal to.\n//That needs to be added\nfunction advancedSearch(list, query) {\n    //List is the array of river elements that we are searching\n\t//Query is the search parameters\n    console.log(query)\n\n    for (let property in query) {\n\t\t//Iterate through each part of the query\n\t\t\n\t\tlet parameters = query[property]\n\t\t\n\t\t\n\t\tif ([\"name\", \"section\", \"writeup\"].includes(property)) {\n\t\t\tstringFilter(list, property, parameters)\n\t\t}\n\t\telse if (property === \"skill\") {\n\t\t\tskillFilter(list, parameters)\n\t\t}\n\t\telse if (property === \"rating\") {\n\t\t\tratingFilter(list, parameters)\n\t\t}\n\t\telse if (property === \"location\") {\n\t\t\tlocationFilter(list, parameters)\n\t\t}\n\t\telse if (property === \"sort\") {\n\t\t\t\n\t\t}\n\t\telse {\n\t\t\talert(\"Unable to search based on \" + property)\n\t\t}\n\t\t\n\t\t\n\n\t\t\n\t\t\n    }\n    \n    return list\n}\n\n\n\n\n\n\nmodule.exports = {\n    normalSearch,\n    advancedSearch\n}\n\n\n\n\n\n\n//Prepare the Advanced Search button\nlet advanced_search_modal = document.getElementById('advanced-search-modal');\n\nlet span = document.getElementById(\"advanced-search-modal-close\").onclick = function() {\n\tadvanced_search_modal.style.display = \"none\"\n}\n\nwindow.addEventListener(\"click\", function(event) {\n    if (event.target === advanced_search_modal) {\n        advanced_search_modal.style.display = \"none\"\n    }\n})\n\ndocument.getElementById(\"advancedsearch\").addEventListener(\"click\", function() {\n    advanced_search_modal.style.display = \"block\"\n})\n\n\n\n\n","function haversine(lat1, lon1, lat2, lon2) { \n\t//Haversine formula\n\t//Based off the Spherical Law of Cosines\n\tlet radius = 3958.8 //Earth's mean radius in miles\n\tlat1 = lat1 * Math.PI / 180\n\tlon1 = lon1 * Math.PI / 180\n\tlat2 = lat2 * Math.PI / 180\n\tlon2 = lon2 * Math.PI / 180  \n  //1 - Math.cos() is a versine - half of that is a haversine\n  let dLat = lat2 - lat1;\n  let dLon = lon2 - lon1;\n  let a =\n    0.5 - Math.cos(dLat) / 2 +\n    Math.cos(lat1) * Math.cos(lat2) *\n    (1 - Math.cos(dLon)) / 2;\n\n  return radius * 2 * Math.asin(Math.sqrt(a));\n}\n    \n\nfunction cosines(lat1, lon1, lat2, lon2) {\n\t//Spherical Law of Cosines\n\tlet radius = 3958.8 //Earth's mean radius in miles\n\n\tlat1 = lat1 * Math.PI / 180\n\tlon1 = lon1 * Math.PI / 180\n\tlat2 = lat2 * Math.PI / 180\n\tlon2 = lon2 * Math.PI / 180\n\t//With 32 bit floats, limited precision could cause Math.acos() to give wrong outputs on small distances\n\t//The haversine formula fixes this issue - and so do 64 bit floats (unless the distances are REALLY small)\n\treturn Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(lon2-lon1))*radius\n}\n\n\n\nfunction lambert(lat1, lon1, lat2, lon2) {\n\t//Should be accurate to <100 meters\n\t\n\t//Parameters from WGS-84\n\tlet radius = 3963.1905919430524 //Equatorial radius in miles\n\tlet flattening = 0.0033528106647474805\n\n\tlat1 = lat1 * Math.PI / 180\n\tlon1 = lon1 * Math.PI / 180\n\tlat2 = lat2 * Math.PI / 180\n\tlon2 = lon2 * Math.PI / 180\n\n\tlet ratio = 1-flattening\n\t\n\tlet reducedLat1 = Math.atan(ratio*Math.tan(lat1))\n\tlet reducedLat2 = Math.atan(ratio*Math.tan(lat2))\n\t\n\tlet angle = Math.acos(Math.sin(reducedLat1) * Math.sin(reducedLat2) + Math.cos(reducedLat1) * Math.cos(reducedLat2) * Math.cos(lon2-lon1))\n\t\n\tlet p = (reducedLat1+reducedLat2)/2\n\tlet q = (reducedLat2-reducedLat1)/2\n\tlet x = (angle - Math.sin(angle)) * (((Math.sin(p)**2)*(Math.cos(q)**2))/(Math.cos(angle/2)**2))\n\tlet y = (angle + Math.sin(angle)) *(((Math.cos(p)**2)*(Math.sin(q)**2))/(Math.sin(angle/2)**2))\n\treturn radius*(angle-((flattening/2)*(x+y)))\t\n}\n\n\nmodule.exports = {\n  lambert,\n  cosines,\n  haversine\n}\n","self.usgsarray = {} \n\nmodule.exports.loadUSGS = async function() {\n    \n    var sites = []\n    for (let i=0;i<riverarray.length;i++) {\n        let val = riverarray[i].usgs\n        //Check for accuracy\n        if (val && val.length > 7 && val.length < 16) {\n            sites.push(val)\n        }\n    }\n    let url = \"https://waterservices.usgs.gov/nwis/iv/?format=json&sites=\" + sites.join(\",\") +  \"&startDT=\" + new Date(Date.now()-1000*86400).toISOString()  + \"&parameterCd=00060,00065,00010,00045&siteStatus=all\"\n\n    let response = await fetch(url)\n    let usgsdata = await response.json()    \n\n    //Iterate through all known conditions\n    usgsdata.value.timeSeries.forEach(function(event){\n        let obj2 = {}\n        obj2.values = event.values[0].value //The values - ex. Gauge Height Array\n      \n        if (obj2.values.length === 0) {\n          console.log(\"Empty Array. Skipping\")\n          return;\n        }\n      \n        obj2.units = event.variable.variableDescription //Units of values\n        \n        let sitecode = event.sourceInfo.siteCode[0].value\n        //See if the site is already in the array.\n        //If the site code is not in the array, add it. \n        if (!usgsarray[sitecode]) {\n            let obj3 = {}\n            obj3.name = event.sourceInfo.siteName\n            usgsarray[sitecode] = obj3\n        }\n      \n        let variablecode = event.variable.variableCode[0].value\n\n        //Convert celcius to farenheight\n        if (variablecode === \"00010\" && obj2.units === \"Temperature, water, degrees Celsius\") {\n          for (let i=0;i<obj2.values.length;i++) {\n            obj2.values[i].value = obj2.values[i].value * 1.8 + 32\n          }\n          \n          obj2.units = \"Temperature, water, degrees Fahrenheit\"\n        }\n      \n         \n        //Add the values onto the site code object\n        usgsarray[sitecode][variablecode] = obj2\n    })\n  \n    //Add USGS Data to Graph\n    for (let i=0;i<ItemHolder.length;i++) {\n      let item = ItemHolder[i]\n      let data = usgsarray[item.usgs]\n      \n      if (data) {\n        let cfs = data[\"00060\"]\n        let feet = data[\"00065\"]\n        \n        //Prevent \"TypeError: Can't Read Property 'values' of undefined\"\n        if (cfs) {cfs = cfs.values}\n        if (feet) {feet = feet.values}\n\n\t\t  \n\t\tlet latestCfs, latestFeet;\n\t\tif (cfs) {\n\t\t\tlatestCfs = cfs[cfs.length - 1].value\n\t\t}\n\t\tif (feet) {\n\t\t\tlatestFeet = feet[feet.length - 1].value\n\t\t}\n\t\t  \n\t\titem.feet = latestFeet\n\t\t  item.cfs = latestCfs\n\t\t  \n        if (latestCfs && latestFeet) {\n          item.flow = latestCfs + \" cfs, \" + latestFeet + \" ft\"\n        }\n        else if (latestCfs) {\n          item.flow = cfs[cfs.length - 1].value + \" cfs\"\n        }\n        else if (latestFeet) {\n          item.flow = feet[feet.length - 1].value + \" ft\" \n        }\n\n        //item.create(true) will force regeneration of the button\n        //Replace the current button so that the flow info shows \n        let elem = document.getElementById(item.base + \"1\")\n        let expanded = item.expanded\n        console.log(expanded)\n        let replacement = item.create(true) //Update the version in cache\n        try {\n            elem.parentNode.replaceChild(replacement, elem)\n            //If the river was expanded before, keep it expanded\n            if (expanded) {\n                replacement.dispatchEvent(new Event(\"click\"))\n                //For some reason, the automatically opened buttons and the manually opened buttons behave different.\n                if (navigator.userAgent.toLowerCase().indexOf(\"google\") === -1) {\n                    replacement.dispatchEvent(new Event(\"click\"))\n                }\n            }\n        }\n        catch (e) {} //The list must have been sorted - the node was not currently in list\n      }\n    }\n    \n}\n"],"sourceRoot":""}